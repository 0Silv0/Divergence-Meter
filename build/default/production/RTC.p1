Version 4.0 HI-TECH Software Intermediate Code
"19 ./IIC.h
[; ;./IIC.h: 19: void I2C_Start(void);
[v _I2C_Start `(v ~T0 @X0 0 ef ]
"22
[; ;./IIC.h: 22: void I2C_WriteByte(unsigned char Data);
[v _I2C_WriteByte `(v ~T0 @X0 0 ef1`uc ]
"20
[; ;./IIC.h: 20: void I2C_ReStart(void);
[v _I2C_ReStart `(v ~T0 @X0 0 ef ]
"23
[; ;./IIC.h: 23: unsigned char I2C_ReadByte(void);
[v _I2C_ReadByte `(uc ~T0 @X0 0 ef ]
"25
[; ;./IIC.h: 25: void I2C_SendNACK(void);
[v _I2C_SendNACK `(v ~T0 @X0 0 ef ]
"21
[; ;./IIC.h: 21: void I2C_Stop(void);
[v _I2C_Stop `(v ~T0 @X0 0 ef ]
"56 ./main.h
[; ;./main.h: 56: extern unsigned char Flag;
[v _Flag `uc ~T0 @X0 0 e ]
"57
[; ;./main.h: 57: extern unsigned char ErrFlag;
[v _ErrFlag `uc ~T0 @X0 0 e ]
"13 ./tubes.h
[; ;./tubes.h: 13: void displayError(void);
[v _displayError `(v ~T0 @X0 0 ef ]
[v F164 `(v ~T0 @X0 1 tf1`ul ]
"20 C:\Program Files\Microchip\xc8\v2.45\pic\include\builtins.h
[v __delay `JF164 ~T0 @X0 0 e ]
[p i __delay ]
"21 ./RTC.h
[; ;./RTC.h: 21: void getDate(void);
[v _getDate `(v ~T0 @X0 0 ef ]
"24 ./IIC.h
[; ;./IIC.h: 24: void I2C_SendACK(void);
[v _I2C_SendACK `(v ~T0 @X0 0 ef ]
"63 ./main.h
[; ;./main.h: 63: unsigned char swapNibbles(unsigned char data);
[v _swapNibbles `(uc ~T0 @X0 0 ef1`uc ]
"16 ./tubes.h
[; ;./tubes.h: 16: void passTubeNum(unsigned char tmp7, unsigned char tmp6, unsigned char tmp5, unsigned char tmp4, unsigned char tmp3, unsigned char tmp2, unsigned char tmp1, unsigned char tmp0, unsigned char tmpLDP, unsigned char tmpRDP);
[v _passTubeNum `(v ~T0 @X0 0 ef10`uc`uc`uc`uc`uc`uc`uc`uc`uc`uc ]
"54 C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 54: __asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
"61
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 61: __asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
"68
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 68: __asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
"75
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 75: __asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
"161
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 161: __asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
"168
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 168: __asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
"230
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 230: __asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
"292
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 292: __asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
"312
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 312: __asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
"390
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 390: __asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
"447
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 447: __asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
"454
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 454: __asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
"461
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 461: __asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
"468
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 468: __asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
"527
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 527: __asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
"534
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 534: __asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
"605
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 605: __asm("CCPR1 equ 015h");
[; <" CCPR1 equ 015h ;# ">
"612
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 612: __asm("CCPR1L equ 015h");
[; <" CCPR1L equ 015h ;# ">
"619
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 619: __asm("CCPR1H equ 016h");
[; <" CCPR1H equ 016h ;# ">
"626
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 626: __asm("CCP1CON equ 017h");
[; <" CCP1CON equ 017h ;# ">
"684
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 684: __asm("RCSTA equ 018h");
[; <" RCSTA equ 018h ;# ">
"755
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 755: __asm("TXREG equ 019h");
[; <" TXREG equ 019h ;# ">
"762
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 762: __asm("RCREG equ 01Ah");
[; <" RCREG equ 01Ah ;# ">
"769
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 769: __asm("CMCON equ 01Fh");
[; <" CMCON equ 01Fh ;# ">
"839
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 839: __asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
"909
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 909: __asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
"971
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 971: __asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
"1033
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1033: __asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
"1090
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1090: __asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
"1139
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1139: __asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
"1146
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1146: __asm("TXSTA equ 098h");
[; <" TXSTA equ 098h ;# ">
"1203
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1203: __asm("SPBRG equ 099h");
[; <" SPBRG equ 099h ;# ">
"1210
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1210: __asm("EEDATA equ 09Ah");
[; <" EEDATA equ 09Ah ;# ">
"1217
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1217: __asm("EEADR equ 09Bh");
[; <" EEADR equ 09Bh ;# ">
"1224
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1224: __asm("EECON1 equ 09Ch");
[; <" EECON1 equ 09Ch ;# ">
"1262
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1262: __asm("EECON2 equ 09Dh");
[; <" EECON2 equ 09Dh ;# ">
"1269
[; ;C:/Users/Silv/.mchp_packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8\pic\include\proc\pic16f628a.h: 1269: __asm("VRCON equ 09Fh");
[; <" VRCON equ 09Fh ;# ">
"7 ./main.h
[p x FOSC  =  INTOSCIO   ]
"8
[p x WDTE  =  OFF        ]
"9
[p x PWRTE  =  OFF       ]
"10
[p x MCLRE  =  OFF       ]
"11
[p x BOREN  =  OFF       ]
"12
[p x LVP  =  OFF         ]
"13
[p x CPD  =  OFF         ]
"14
[p x CP  =  OFF          ]
"3 RTC.c
[; ;RTC.c: 3: unsigned char oldSeconds;
[v _oldSeconds `uc ~T0 @X0 1 e ]
"6
[; ;RTC.c: 6: void reqReadRTC(unsigned char address) {
[v _reqReadRTC `(v ~T0 @X0 1 ef1`uc ]
{
[e :U _reqReadRTC ]
[v _address `uc ~T0 @X0 1 r1 ]
[f ]
"7
[; ;RTC.c: 7:     I2C_Start();
[e ( _I2C_Start ..  ]
"8
[; ;RTC.c: 8:     I2C_WriteByte(0b11010000);
[e ( _I2C_WriteByte (1 -> -> 208 `i `uc ]
"9
[; ;RTC.c: 9:     I2C_WriteByte(address);
[e ( _I2C_WriteByte (1 _address ]
"10
[; ;RTC.c: 10:     I2C_ReStart();
[e ( _I2C_ReStart ..  ]
"11
[; ;RTC.c: 11:     I2C_WriteByte(0b11010001);
[e ( _I2C_WriteByte (1 -> -> 209 `i `uc ]
"13
[; ;RTC.c: 13: }
[e :UE 55 ]
}
"16
[; ;RTC.c: 16: unsigned char readDataRTC(void) {
[v _readDataRTC `(uc ~T0 @X0 1 ef ]
{
[e :U _readDataRTC ]
[f ]
"17
[; ;RTC.c: 17:     unsigned char data;
[v _data `uc ~T0 @X0 1 a ]
"18
[; ;RTC.c: 18:     data = I2C_ReadByte();
[e = _data ( _I2C_ReadByte ..  ]
"19
[; ;RTC.c: 19:     return data;
[e ) _data ]
[e $UE 56  ]
"20
[; ;RTC.c: 20: }
[e :UE 56 ]
}
"23
[; ;RTC.c: 23: void endReadRTC(void) {
[v _endReadRTC `(v ~T0 @X0 1 ef ]
{
[e :U _endReadRTC ]
[f ]
"24
[; ;RTC.c: 24:     I2C_SendNACK();
[e ( _I2C_SendNACK ..  ]
"25
[; ;RTC.c: 25:     I2C_Stop();
[e ( _I2C_Stop ..  ]
"26
[; ;RTC.c: 26: }
[e :UE 57 ]
}
"29
[; ;RTC.c: 29: unsigned char readByteRTC(unsigned char address) {
[v _readByteRTC `(uc ~T0 @X0 1 ef1`uc ]
{
[e :U _readByteRTC ]
[v _address `uc ~T0 @X0 1 r1 ]
[f ]
"30
[; ;RTC.c: 30:     unsigned char data = 0x00;
[v _data `uc ~T0 @X0 1 a ]
[e = _data -> -> 0 `i `uc ]
"31
[; ;RTC.c: 31:     reqReadRTC(address);
[e ( _reqReadRTC (1 _address ]
"32
[; ;RTC.c: 32:     data = I2C_ReadByte();
[e = _data ( _I2C_ReadByte ..  ]
"33
[; ;RTC.c: 33:     endReadRTC();
[e ( _endReadRTC ..  ]
"34
[; ;RTC.c: 34:     return data;
[e ) _data ]
[e $UE 58  ]
"35
[; ;RTC.c: 35: }
[e :UE 58 ]
}
"38
[; ;RTC.c: 38: void reqWriteRTC(unsigned char address) {
[v _reqWriteRTC `(v ~T0 @X0 1 ef1`uc ]
{
[e :U _reqWriteRTC ]
[v _address `uc ~T0 @X0 1 r1 ]
[f ]
"39
[; ;RTC.c: 39:     I2C_Start();
[e ( _I2C_Start ..  ]
"40
[; ;RTC.c: 40:     I2C_WriteByte(0b11010000);
[e ( _I2C_WriteByte (1 -> -> 208 `i `uc ]
"41
[; ;RTC.c: 41:     I2C_WriteByte(address);
[e ( _I2C_WriteByte (1 _address ]
"42
[; ;RTC.c: 42: }
[e :UE 59 ]
}
"45
[; ;RTC.c: 45: void writeDataRTC(unsigned char data) {
[v _writeDataRTC `(v ~T0 @X0 1 ef1`uc ]
{
[e :U _writeDataRTC ]
[v _data `uc ~T0 @X0 1 r1 ]
[f ]
"46
[; ;RTC.c: 46:     I2C_WriteByte(data);
[e ( _I2C_WriteByte (1 _data ]
"47
[; ;RTC.c: 47: }
[e :UE 60 ]
}
"50
[; ;RTC.c: 50: void endWriteRTC(void) {
[v _endWriteRTC `(v ~T0 @X0 1 ef ]
{
[e :U _endWriteRTC ]
[f ]
"51
[; ;RTC.c: 51:     I2C_Stop();
[e ( _I2C_Stop ..  ]
"52
[; ;RTC.c: 52: }
[e :UE 61 ]
}
"55
[; ;RTC.c: 55: void writeByteRTC(unsigned char address, unsigned char data) {
[v _writeByteRTC `(v ~T0 @X0 1 ef2`uc`uc ]
{
[e :U _writeByteRTC ]
[v _address `uc ~T0 @X0 1 r1 ]
[v _data `uc ~T0 @X0 1 r2 ]
[f ]
"56
[; ;RTC.c: 56:     reqWriteRTC(address);
[e ( _reqWriteRTC (1 _address ]
"57
[; ;RTC.c: 57:     writeDataRTC(data);
[e ( _writeDataRTC (1 _data ]
"58
[; ;RTC.c: 58:     endWriteRTC();
[e ( _endWriteRTC ..  ]
"59
[; ;RTC.c: 59: }
[e :UE 62 ]
}
"62
[; ;RTC.c: 62: __bit isRTCRunning(void) {
[v _isRTCRunning `(b ~T0 @X0 1 ef ]
{
[e :U _isRTCRunning ]
[f ]
"63
[; ;RTC.c: 63:     unsigned char data;
[v _data `uc ~T0 @X0 1 a ]
"64
[; ;RTC.c: 64:     data = readByteRTC(0x00);
[e = _data ( _readByteRTC (1 -> -> 0 `i `uc ]
"65
[; ;RTC.c: 65:     return ((data)>>(7) & 1);
[e ) -> & >> -> _data `i -> 7 `i -> 1 `i `b ]
[e $UE 63  ]
"66
[; ;RTC.c: 66: }
[e :UE 63 ]
}
"69
[; ;RTC.c: 69: void startRTC(void) {
[v _startRTC `(v ~T0 @X0 1 ef ]
{
[e :U _startRTC ]
[f ]
"70
[; ;RTC.c: 70:     unsigned char clockTest, RTCaddress;
[v _clockTest `uc ~T0 @X0 1 a ]
[v _RTCaddress `uc ~T0 @X0 1 a ]
"71
[; ;RTC.c: 71:     reqWriteRTC(0x00);
[e ( _reqWriteRTC (1 -> -> 0 `i `uc ]
"72
[; ;RTC.c: 72:     writeDataRTC(0x00);
[e ( _writeDataRTC (1 -> -> 0 `i `uc ]
"74
[; ;RTC.c: 74:     writeDataRTC(0x30);
[e ( _writeDataRTC (1 -> -> 48 `i `uc ]
"75
[; ;RTC.c: 75:     writeDataRTC(0x12);
[e ( _writeDataRTC (1 -> -> 18 `i `uc ]
"76
[; ;RTC.c: 76:     endWriteRTC();
[e ( _endWriteRTC ..  ]
"77
[; ;RTC.c: 77:     reqWriteRTC(0x04);
[e ( _reqWriteRTC (1 -> -> 4 `i `uc ]
"78
[; ;RTC.c: 78:     writeDataRTC(0x28);
[e ( _writeDataRTC (1 -> -> 40 `i `uc ]
"79
[; ;RTC.c: 79:     writeDataRTC(0x7);
[e ( _writeDataRTC (1 -> -> 7 `i `uc ]
"80
[; ;RTC.c: 80:     writeDataRTC(0x10);
[e ( _writeDataRTC (1 -> -> 16 `i `uc ]
"81
[; ;RTC.c: 81:     endWriteRTC();
[e ( _endWriteRTC ..  ]
"83
[; ;RTC.c: 83:     reqWriteRTC(0x14);
[e ( _reqWriteRTC (1 -> -> 20 `i `uc ]
"84
[; ;RTC.c: 84:     writeDataRTC(0x00);
[e ( _writeDataRTC (1 -> -> 0 `i `uc ]
"85
[; ;RTC.c: 85:     writeDataRTC(0x00);
[e ( _writeDataRTC (1 -> -> 0 `i `uc ]
"86
[; ;RTC.c: 86:     endWriteRTC();
[e ( _endWriteRTC ..  ]
"88
[; ;RTC.c: 88:     if(((Flag)>>(4) & 1)) {
[e $ ! != & >> -> _Flag `i -> 4 `i -> 1 `i -> 0 `i 65  ]
{
"89
[; ;RTC.c: 89:         RTCaddress = 0x00;
[e = _RTCaddress -> -> 0 `i `uc ]
"90
[; ;RTC.c: 90:     } else {
}
[e $U 66  ]
[e :U 65 ]
{
"91
[; ;RTC.c: 91:         RTCaddress = 0x0F;
[e = _RTCaddress -> -> 15 `i `uc ]
"92
[; ;RTC.c: 92:     }
}
[e :U 66 ]
"94
[; ;RTC.c: 94:     clockTest = readByteRTC(RTCaddress);
[e = _clockTest ( _readByteRTC (1 _RTCaddress ]
"95
[; ;RTC.c: 95:     if(!((clockTest)>>(7) & 1)) {
[e $ ! ! != & >> -> _clockTest `i -> 7 `i -> 1 `i -> 0 `i 67  ]
{
"96
[; ;RTC.c: 96:         ((ErrFlag) &= ~(1<<1));
[e =& _ErrFlag -> ~ << -> 1 `i -> 1 `i `uc ]
"97
[; ;RTC.c: 97:         ((ErrFlag) &= ~(1<<0));
[e =& _ErrFlag -> ~ << -> 1 `i -> 0 `i `uc ]
"98
[; ;RTC.c: 98:     } else {
}
[e $U 68  ]
[e :U 67 ]
{
"100
[; ;RTC.c: 100:         ((ErrFlag) |= (1<<1));
[e =| _ErrFlag -> << -> 1 `i -> 1 `i `uc ]
"101
[; ;RTC.c: 101:         displayError();
[e ( _displayError ..  ]
"102
[; ;RTC.c: 102:     }
}
[e :U 68 ]
"103
[; ;RTC.c: 103: }
[e :UE 64 ]
}
"106
[; ;RTC.c: 106: __bit checkRTCType(void) {
[v _checkRTCType `(b ~T0 @X0 1 ef ]
{
[e :U _checkRTCType ]
[f ]
"107
[; ;RTC.c: 107:     unsigned char data;
[v _data `uc ~T0 @X0 1 a ]
"108
[; ;RTC.c: 108:     data = readByteRTC(0x0F);
[e = _data ( _readByteRTC (1 -> -> 15 `i `uc ]
"109
[; ;RTC.c: 109:     if(((data)>>(7) & 1)) {
[e $ ! != & >> -> _data `i -> 7 `i -> 1 `i -> 0 `i 70  ]
{
"112
[; ;RTC.c: 112:         ((data) &= ~(1<<0));
[e =& _data -> ~ << -> 1 `i -> 0 `i `uc ]
"113
[; ;RTC.c: 113:         writeByteRTC(0x0F,data);
[e ( _writeByteRTC (2 , -> -> 15 `i `uc _data ]
"114
[; ;RTC.c: 114:         ((data) |= (1<<0));
[e =| _data -> << -> 1 `i -> 0 `i `uc ]
"115
[; ;RTC.c: 115:         writeByteRTC(0x0F,data);
[e ( _writeByteRTC (2 , -> -> 15 `i `uc _data ]
"116
[; ;RTC.c: 116:         _delay((unsigned long)((5)*(4000000/4000000.0)));
[e ( __delay (1 -> * -> -> 5 `i `d / -> -> 4000000 `l `d .4000000.0 `ul ]
"117
[; ;RTC.c: 117:         data = readByteRTC(0x0F);
[e = _data ( _readByteRTC (1 -> -> 15 `i `uc ]
"118
[; ;RTC.c: 118:         if(!((data)>>(0) & 1)) {
[e $ ! ! != & >> -> _data `i -> 0 `i -> 1 `i -> 0 `i 71  ]
{
"119
[; ;RTC.c: 119:             writeByteRTC(0x0F, 0x00);
[e ( _writeByteRTC (2 , -> -> 15 `i `uc -> -> 0 `i `uc ]
"120
[; ;RTC.c: 120:             ((Flag) &= ~(1<<4));
[e =& _Flag -> ~ << -> 1 `i -> 4 `i `uc ]
"121
[; ;RTC.c: 121:             return 1;
[e ) -> -> 1 `i `b ]
[e $UE 69  ]
"122
[; ;RTC.c: 122:         } else {
}
[e $U 72  ]
[e :U 71 ]
{
"123
[; ;RTC.c: 123:             ((Flag) |= (1<<4));
[e =| _Flag -> << -> 1 `i -> 4 `i `uc ]
"124
[; ;RTC.c: 124:         }
}
[e :U 72 ]
"125
[; ;RTC.c: 125:     }
}
[e :U 70 ]
"126
[; ;RTC.c: 126:     return 0;
[e ) -> -> 0 `i `b ]
[e $UE 69  ]
"127
[; ;RTC.c: 127: }
[e :UE 69 ]
}
"129
[; ;RTC.c: 129: void getTime(void) {
[v _getTime `(v ~T0 @X0 1 ef ]
{
[e :U _getTime ]
[f ]
"130
[; ;RTC.c: 130:     unsigned char seconds, minutes, hours;
[v _seconds `uc ~T0 @X0 1 a ]
[v _minutes `uc ~T0 @X0 1 a ]
[v _hours `uc ~T0 @X0 1 a ]
"131
[; ;RTC.c: 131:     unsigned char singleSeconds, singleMinutes, singleHours;
[v _singleSeconds `uc ~T0 @X0 1 a ]
[v _singleMinutes `uc ~T0 @X0 1 a ]
[v _singleHours `uc ~T0 @X0 1 a ]
"132
[; ;RTC.c: 132:     unsigned char tensSeconds, tensMinutes, tensHours;
[v _tensSeconds `uc ~T0 @X0 1 a ]
[v _tensMinutes `uc ~T0 @X0 1 a ]
[v _tensHours `uc ~T0 @X0 1 a ]
"133
[; ;RTC.c: 133:     unsigned char tmpLeft, tmpRight;
[v _tmpLeft `uc ~T0 @X0 1 a ]
[v _tmpRight `uc ~T0 @X0 1 a ]
"135
[; ;RTC.c: 135:     seconds = readByteRTC(0x00);
[e = _seconds ( _readByteRTC (1 -> -> 0 `i `uc ]
"137
[; ;RTC.c: 137:     if(((seconds)>>(7) & 1)) {
[e $ ! != & >> -> _seconds `i -> 7 `i -> 1 `i -> 0 `i 74  ]
{
"138
[; ;RTC.c: 138:         ((ErrFlag) |= (1<<1));
[e =| _ErrFlag -> << -> 1 `i -> 1 `i `uc ]
"139
[; ;RTC.c: 139:     } else {
}
[e $U 75  ]
[e :U 74 ]
{
"141
[; ;RTC.c: 141:         if(seconds != oldSeconds) {
[e $ ! != -> _seconds `i -> _oldSeconds `i 76  ]
{
"142
[; ;RTC.c: 142:             if(seconds == 0b00110000) {
[e $ ! == -> _seconds `i -> 48 `i 77  ]
{
"143
[; ;RTC.c: 143:                 getDate();
[e ( _getDate ..  ]
"144
[; ;RTC.c: 144:                 _delay((unsigned long)((4000)*(4000000/4000.0)));
[e ( __delay (1 -> * -> -> 4000 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
"145
[; ;RTC.c: 145:             } else if (seconds == 0b01011001) {
}
[e $U 78  ]
[e :U 77 ]
[e $ ! == -> _seconds `i -> 89 `i 79  ]
{
"147
[; ;RTC.c: 147:             } else {
}
[e $U 80  ]
[e :U 79 ]
{
"148
[; ;RTC.c: 148:                 reqReadRTC(0x00);
[e ( _reqReadRTC (1 -> -> 0 `i `uc ]
"149
[; ;RTC.c: 149:                 seconds = readDataRTC();
[e = _seconds ( _readDataRTC ..  ]
"150
[; ;RTC.c: 150:                 I2C_SendACK();
[e ( _I2C_SendACK ..  ]
"151
[; ;RTC.c: 151:                 minutes = readDataRTC();
[e = _minutes ( _readDataRTC ..  ]
"152
[; ;RTC.c: 152:                 I2C_SendACK();
[e ( _I2C_SendACK ..  ]
"153
[; ;RTC.c: 153:                 hours = readDataRTC();
[e = _hours ( _readDataRTC ..  ]
"154
[; ;RTC.c: 154:                 endReadRTC();
[e ( _endReadRTC ..  ]
"155
[; ;RTC.c: 155:                 singleSeconds = (seconds & 0x0F);
[e = _singleSeconds -> & -> _seconds `i -> 15 `i `uc ]
"156
[; ;RTC.c: 156:                 tensSeconds = (swapNibbles(seconds) & 0x0F);
[e = _tensSeconds -> & -> ( _swapNibbles (1 _seconds `i -> 15 `i `uc ]
"157
[; ;RTC.c: 157:                 singleMinutes = (minutes & 0x0F);
[e = _singleMinutes -> & -> _minutes `i -> 15 `i `uc ]
"158
[; ;RTC.c: 158:                 tensMinutes = (swapNibbles(minutes) & 0x0F);
[e = _tensMinutes -> & -> ( _swapNibbles (1 _minutes `i -> 15 `i `uc ]
"159
[; ;RTC.c: 159:                 singleHours = (hours & 0x0F);
[e = _singleHours -> & -> _hours `i -> 15 `i `uc ]
"160
[; ;RTC.c: 160:                 tensHours = (swapNibbles(hours) & 0x0F);
[e = _tensHours -> & -> ( _swapNibbles (1 _hours `i -> 15 `i `uc ]
"162
[; ;RTC.c: 162:                 if(((seconds)>>(0) & 1)) {
[e $ ! != & >> -> _seconds `i -> 0 `i -> 1 `i -> 0 `i 81  ]
{
"163
[; ;RTC.c: 163:                     tmpLeft = 0x00;
[e = _tmpLeft -> -> 0 `i `uc ]
"164
[; ;RTC.c: 164:                     tmpRight = 0x24;
[e = _tmpRight -> -> 36 `i `uc ]
"165
[; ;RTC.c: 165:                 } else {
}
[e $U 82  ]
[e :U 81 ]
{
"166
[; ;RTC.c: 166:                     tmpLeft = 0x24;
[e = _tmpLeft -> -> 36 `i `uc ]
"167
[; ;RTC.c: 167:                     tmpRight = 0x00;
[e = _tmpRight -> -> 0 `i `uc ]
"168
[; ;RTC.c: 168:                 }
}
[e :U 82 ]
"169
[; ;RTC.c: 169:                 passTubeNum(tensHours,singleHours,10,tensMinutes,singleMinutes,10,tensSeconds,singleSeconds,tmpLeft,tmpRight);
[e ( _passTubeNum (4 , , , , , , , , , _tensHours _singleHours -> -> 10 `i `uc _tensMinutes _singleMinutes -> -> 10 `i `uc _tensSeconds _singleSeconds _tmpLeft _tmpRight ]
"170
[; ;RTC.c: 170:                 oldSeconds = seconds;
[e = _oldSeconds _seconds ]
"171
[; ;RTC.c: 171:             }
}
[e :U 80 ]
[e :U 78 ]
"172
[; ;RTC.c: 172:         }
}
[e :U 76 ]
"173
[; ;RTC.c: 173:     }
}
[e :U 75 ]
"174
[; ;RTC.c: 174: }
[e :UE 73 ]
}
"176
[; ;RTC.c: 176: void getDate(void) {
[v _getDate `(v ~T0 @X0 1 ef ]
{
[e :U _getDate ]
[f ]
"177
[; ;RTC.c: 177:     unsigned char day, month, year;
[v _day `uc ~T0 @X0 1 a ]
[v _month `uc ~T0 @X0 1 a ]
[v _year `uc ~T0 @X0 1 a ]
"178
[; ;RTC.c: 178:     unsigned char singleDay, singleMonth, singleYear;
[v _singleDay `uc ~T0 @X0 1 a ]
[v _singleMonth `uc ~T0 @X0 1 a ]
[v _singleYear `uc ~T0 @X0 1 a ]
"179
[; ;RTC.c: 179:     unsigned char tensDay, tensMonth, tensYear;
[v _tensDay `uc ~T0 @X0 1 a ]
[v _tensMonth `uc ~T0 @X0 1 a ]
[v _tensYear `uc ~T0 @X0 1 a ]
"180
[; ;RTC.c: 180:     reqReadRTC(0x04);
[e ( _reqReadRTC (1 -> -> 4 `i `uc ]
"181
[; ;RTC.c: 181:     day = readDataRTC();
[e = _day ( _readDataRTC ..  ]
"182
[; ;RTC.c: 182:     I2C_SendACK();
[e ( _I2C_SendACK ..  ]
"183
[; ;RTC.c: 183:     month = readDataRTC();
[e = _month ( _readDataRTC ..  ]
"184
[; ;RTC.c: 184:     I2C_SendACK();
[e ( _I2C_SendACK ..  ]
"185
[; ;RTC.c: 185:     year = readDataRTC();
[e = _year ( _readDataRTC ..  ]
"186
[; ;RTC.c: 186:     endReadRTC();
[e ( _endReadRTC ..  ]
"187
[; ;RTC.c: 187:     singleDay = (day & 0x0F);
[e = _singleDay -> & -> _day `i -> 15 `i `uc ]
"188
[; ;RTC.c: 188:     tensDay = (swapNibbles(day) & 0x0F);
[e = _tensDay -> & -> ( _swapNibbles (1 _day `i -> 15 `i `uc ]
"189
[; ;RTC.c: 189:     singleMonth = (month & 0x0F);
[e = _singleMonth -> & -> _month `i -> 15 `i `uc ]
"190
[; ;RTC.c: 190:     tensMonth = (swapNibbles(month) & 0x0F);
[e = _tensMonth -> & -> ( _swapNibbles (1 _month `i -> 15 `i `uc ]
"191
[; ;RTC.c: 191:     singleYear = (year & 0x0F);
[e = _singleYear -> & -> _year `i -> 15 `i `uc ]
"192
[; ;RTC.c: 192:     tensYear = (swapNibbles(year) & 0x0F);
[e = _tensYear -> & -> ( _swapNibbles (1 _year `i -> 15 `i `uc ]
"193
[; ;RTC.c: 193:     passTubeNum(tensDay,singleDay,10,tensMonth,singleMonth,10,tensYear,singleYear,0x00,0x00);
[e ( _passTubeNum (4 , , , , , , , , , _tensDay _singleDay -> -> 10 `i `uc _tensMonth _singleMonth -> -> 10 `i `uc _tensYear _singleYear -> -> 0 `i `uc -> -> 0 `i `uc ]
"194
[; ;RTC.c: 194: }
[e :UE 83 ]
}
