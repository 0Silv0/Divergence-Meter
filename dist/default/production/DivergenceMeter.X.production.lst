

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Oct 30 04:07:22 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0h,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK0l,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0h,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    46                           	dabs	1,0x22,1,_T0
    47                           	dabs	1,0x28,1,_T6
    48                           	dabs	1,0x27,1,_T5
    49                           	dabs	1,0x26,1,_T4
    50                           	dabs	1,0x25,1,_T3
    51                           	dabs	1,0x24,1,_T2
    52                           	dabs	1,0x23,1,_T1
    53                           	dabs	1,0x29,1,_T7
    54                           	dabs	1,0x7E,2
    55     0000                     
    56                           ; Generated 12/10/2023 GMT
    57                           ; 
    58                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution. Publication is not required when
    72                           ;        this file is used in an embedded application.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F628A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90     0000                     	;# 
    91     0001                     	;# 
    92     0002                     	;# 
    93     0003                     	;# 
    94     0004                     	;# 
    95     0005                     	;# 
    96     0006                     	;# 
    97     000A                     	;# 
    98     000B                     	;# 
    99     000C                     	;# 
   100     000E                     	;# 
   101     000E                     	;# 
   102     000F                     	;# 
   103     0010                     	;# 
   104     0011                     	;# 
   105     0012                     	;# 
   106     0015                     	;# 
   107     0015                     	;# 
   108     0016                     	;# 
   109     0017                     	;# 
   110     0018                     	;# 
   111     0019                     	;# 
   112     001A                     	;# 
   113     001F                     	;# 
   114     0081                     	;# 
   115     0085                     	;# 
   116     0086                     	;# 
   117     008C                     	;# 
   118     008E                     	;# 
   119     0092                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009F                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     000A                     	;# 
   135     000B                     	;# 
   136     000C                     	;# 
   137     000E                     	;# 
   138     000E                     	;# 
   139     000F                     	;# 
   140     0010                     	;# 
   141     0011                     	;# 
   142     0012                     	;# 
   143     0015                     	;# 
   144     0015                     	;# 
   145     0016                     	;# 
   146     0017                     	;# 
   147     0018                     	;# 
   148     0019                     	;# 
   149     001A                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     008C                     	;# 
   155     008E                     	;# 
   156     0092                     	;# 
   157     0098                     	;# 
   158     0099                     	;# 
   159     009A                     	;# 
   160     009B                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009F                     	;# 
   164     0000                     	;# 
   165     0001                     	;# 
   166     0002                     	;# 
   167     0003                     	;# 
   168     0004                     	;# 
   169     0005                     	;# 
   170     0006                     	;# 
   171     000A                     	;# 
   172     000B                     	;# 
   173     000C                     	;# 
   174     000E                     	;# 
   175     000E                     	;# 
   176     000F                     	;# 
   177     0010                     	;# 
   178     0011                     	;# 
   179     0012                     	;# 
   180     0015                     	;# 
   181     0015                     	;# 
   182     0016                     	;# 
   183     0017                     	;# 
   184     0018                     	;# 
   185     0019                     	;# 
   186     001A                     	;# 
   187     001F                     	;# 
   188     0081                     	;# 
   189     0085                     	;# 
   190     0086                     	;# 
   191     008C                     	;# 
   192     008E                     	;# 
   193     0092                     	;# 
   194     0098                     	;# 
   195     0099                     	;# 
   196     009A                     	;# 
   197     009B                     	;# 
   198     009C                     	;# 
   199     009D                     	;# 
   200     009F                     	;# 
   201     0000                     	;# 
   202     0001                     	;# 
   203     0002                     	;# 
   204     0003                     	;# 
   205     0004                     	;# 
   206     0005                     	;# 
   207     0006                     	;# 
   208     000A                     	;# 
   209     000B                     	;# 
   210     000C                     	;# 
   211     000E                     	;# 
   212     000E                     	;# 
   213     000F                     	;# 
   214     0010                     	;# 
   215     0011                     	;# 
   216     0012                     	;# 
   217     0015                     	;# 
   218     0015                     	;# 
   219     0016                     	;# 
   220     0017                     	;# 
   221     0018                     	;# 
   222     0019                     	;# 
   223     001A                     	;# 
   224     001F                     	;# 
   225     0081                     	;# 
   226     0085                     	;# 
   227     0086                     	;# 
   228     008C                     	;# 
   229     008E                     	;# 
   230     0092                     	;# 
   231     0098                     	;# 
   232     0099                     	;# 
   233     009A                     	;# 
   234     009B                     	;# 
   235     009C                     	;# 
   236     009D                     	;# 
   237     009F                     	;# 
   238     0000                     	;# 
   239     0001                     	;# 
   240     0002                     	;# 
   241     0003                     	;# 
   242     0004                     	;# 
   243     0005                     	;# 
   244     0006                     	;# 
   245     000A                     	;# 
   246     000B                     	;# 
   247     000C                     	;# 
   248     000E                     	;# 
   249     000E                     	;# 
   250     000F                     	;# 
   251     0010                     	;# 
   252     0011                     	;# 
   253     0012                     	;# 
   254     0015                     	;# 
   255     0015                     	;# 
   256     0016                     	;# 
   257     0017                     	;# 
   258     0018                     	;# 
   259     0019                     	;# 
   260     001A                     	;# 
   261     001F                     	;# 
   262     0081                     	;# 
   263     0085                     	;# 
   264     0086                     	;# 
   265     008C                     	;# 
   266     008E                     	;# 
   267     0092                     	;# 
   268     0098                     	;# 
   269     0099                     	;# 
   270     009A                     	;# 
   271     009B                     	;# 
   272     009C                     	;# 
   273     009D                     	;# 
   274     009F                     	;# 
   275                           
   276                           	psect	text0
   277     0000                     __ptext0:
   278     0006                     _PORTB	set	6
   279     001F                     _CMCON	set	31
   280     0005                     _PORTAbits	set	5
   281     0085                     _TRISAbits	set	133
   282     0081                     _OPTION_REG	set	129
   283     0086                     _TRISB	set	134
   284     0085                     _TRISA	set	133
   285                           
   286                           	psect	cinit
   287     07F3                     start_initialization:	
   288                           ; #config settings
   289                           
   290     07F3                     __initialization:
   291                           
   292                           ; Clear objects allocated to BANK0h
   293     07F3  1283               	bcf	3,5	;RP0=0, select bank0
   294     07F4  1303               	bcf	3,6	;RP1=0, select bank0
   295     07F5  01BE               	clrf	__pbssBANK0h& (0+127)
   296     07F6  01BF               	clrf	(__pbssBANK0h+1)& (0+127)
   297     07F7  01C0               	clrf	(__pbssBANK0h+2)& (0+127)
   298     07F8  01C1               	clrf	(__pbssBANK0h+3)& (0+127)
   299                           
   300                           ; Clear objects allocated to BANK0l
   301     07F9  01C2               	clrf	__pbssBANK0l& (0+127)
   302     07FA  01C3               	clrf	(__pbssBANK0l+1)& (0+127)
   303                           
   304                           ; Clear objects allocated to BANK1
   305     07FB  1683               	bsf	3,5	;RP0=1, select bank1
   306     07FC  1303               	bcf	3,6	;RP1=0, select bank1
   307     07FD  01A0               	clrf	__pbssBANK1& (0+127)
   308     07FE                     end_of_initialization:	
   309                           ;End of C runtime variable initialization code
   310                           
   311     07FE                     __end_of__initialization:
   312     07FE  0183               	clrf	3
   313     07FF  2E87               	ljmp	_main	;jump to C main() function
   314                           
   315                           	psect	bssBANK0h
   316     003E                     __pbssBANK0h:
   317     003E                     _rightDP:
   318     003E                     	ds	1
   319     003F                     _leftDP:
   320     003F                     	ds	1
   321     0040                     _oldSeconds:
   322     0040                     	ds	1
   323     0041                     _ErrFlag:
   324     0041                     	ds	1
   325                           
   326                           	psect	bssBANK0l
   327     0042                     __pbssBANK0l:
   328     0042                     _PORTB_SHADOW:
   329     0042                     	ds	1
   330     0043                     _flag:
   331     0043                     	ds	1
   332                           
   333                           	psect	bssBANK1
   334     00A0                     __pbssBANK1:
   335     00A0                     _PORTA_SHADOW:
   336     00A0                     	ds	1
   337                           
   338                           	psect	cstackCOMMON
   339     0070                     __pcstackCOMMON:
   340     0070                     ?_isRTCRunning:
   341     0070                     ?_checkRTCType:	
   342                           ; 1 bit 
   343                           
   344     0070                     ?_Init:	
   345                           ; 1 bit 
   346                           
   347     0070                     ?_getTime:	
   348                           ; 1 bytes @ 0x0
   349                           
   350     0070                     ?_displayError666:	
   351                           ; 1 bytes @ 0x0
   352                           
   353     0070                     ?_preLoadWL:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0070                     ??_preLoadWL:	
   357                           ; 1 bytes @ 0x0
   358                           
   359     0070                     ?_loadDisplay:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0070                     ?_display:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0070                     ??_display:	
   366                           ; 1 bytes @ 0x0
   367                           
   368     0070                     ?_InitI2C:	
   369                           ; 1 bytes @ 0x0
   370                           
   371     0070                     ??_InitI2C:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0070                     ?_InitTubes:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0070                     ?_startRTC:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0070                     ?_readByteRTC:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0070                     ?_blankTubes:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0070                     ??_blankTubes:	
   387                           ; 1 bytes @ 0x0
   388                           
   389     0070                     ?_checkDP:	
   390                           ; 1 bytes @ 0x0
   391                           
   392     0070                     ??_checkDP:	
   393                           ; 1 bytes @ 0x0
   394                           
   395     0070                     ?_send1ToDrivers:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0070                     ??_send1ToDrivers:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ?_send0ToDrivers:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ??_send0ToDrivers:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_latch:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ??_latch:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ?_swapNibbles:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ??_swapNibbles:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ?_I2C_Start:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ??_I2C_Start:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ?_I2C_ReStart:	
   429                           ; 1 bytes @ 0x0
   430                           
   431     0070                     ??_I2C_ReStart:	
   432                           ; 1 bytes @ 0x0
   433                           
   434     0070                     ?_I2C_Stop:	
   435                           ; 1 bytes @ 0x0
   436                           
   437     0070                     ??_I2C_Stop:	
   438                           ; 1 bytes @ 0x0
   439                           
   440     0070                     ?_I2C_WriteByte:	
   441                           ; 1 bytes @ 0x0
   442                           
   443     0070                     ??_I2C_WriteByte:	
   444                           ; 1 bytes @ 0x0
   445                           
   446     0070                     ?_I2C_ReadByte:	
   447                           ; 1 bytes @ 0x0
   448                           
   449     0070                     ??_I2C_ReadByte:	
   450                           ; 1 bytes @ 0x0
   451                           
   452     0070                     ?_I2C_SendACK:	
   453                           ; 1 bytes @ 0x0
   454                           
   455     0070                     ??_I2C_SendACK:	
   456                           ; 1 bytes @ 0x0
   457                           
   458     0070                     ?_I2C_SendNACK:	
   459                           ; 1 bytes @ 0x0
   460                           
   461     0070                     ??_I2C_SendNACK:	
   462                           ; 1 bytes @ 0x0
   463                           
   464     0070                     ?_reqReadRTC:	
   465                           ; 1 bytes @ 0x0
   466                           
   467     0070                     ?_readDataRTC:	
   468                           ; 1 bytes @ 0x0
   469                           
   470     0070                     ?_endReadRTC:	
   471                           ; 1 bytes @ 0x0
   472                           
   473     0070                     ??_endReadRTC:	
   474                           ; 1 bytes @ 0x0
   475                           
   476     0070                     ?_reqWriteRTC:	
   477                           ; 1 bytes @ 0x0
   478                           
   479     0070                     ?_writeDataRTC:	
   480                           ; 1 bytes @ 0x0
   481                           
   482     0070                     ?_endWriteRTC:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     ??_endWriteRTC:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     blankTubes@ptr:	
   489                           ; 1 bytes @ 0x0
   490                           
   491                           
   492                           ; 1 bytes @ 0x0
   493     0070                     	ds	1
   494     0071                     I2C_ReadByte@Data:
   495     0071                     checkDP@DP:	
   496                           ; 1 bytes @ 0x1
   497                           
   498     0071                     blankTubes@i:	
   499                           ; 1 bytes @ 0x1
   500                           
   501                           
   502                           ; 1 bytes @ 0x1
   503     0071                     	ds	1
   504     0072                     ??_loadDisplay:
   505     0072                     ??_InitTubes:	
   506                           ; 1 bytes @ 0x2
   507                           
   508     0072                     I2C_WriteByte@Data:	
   509                           ; 1 bytes @ 0x2
   510                           
   511     0072                     I2C_ReadByte@i:	
   512                           ; 1 bytes @ 0x2
   513                           
   514     0072                     loadDisplay@dispNum:	
   515                           ; 1 bytes @ 0x2
   516                           
   517                           
   518                           ; 1 bytes @ 0x2
   519     0072                     	ds	1
   520     0073                     ??_readDataRTC:
   521     0073                     swapNibbles@data:	
   522                           ; 1 bytes @ 0x3
   523                           
   524     0073                     I2C_WriteByte@timer:	
   525                           ; 1 bytes @ 0x3
   526                           
   527     0073                     readDataRTC@data:	
   528                           ; 1 bytes @ 0x3
   529                           
   530     0073                     loadDisplay@tubePtr:	
   531                           ; 1 bytes @ 0x3
   532                           
   533                           
   534                           ; 1 bytes @ 0x3
   535     0073                     	ds	1
   536     0074                     I2C_WriteByte@i:
   537     0074                     loadDisplay@tubeIndex:	
   538                           ; 1 bytes @ 0x4
   539                           
   540                           
   541                           ; 1 bytes @ 0x4
   542     0074                     	ds	1
   543     0075                     ??_reqReadRTC:
   544     0075                     ??_reqWriteRTC:	
   545                           ; 1 bytes @ 0x5
   546                           
   547     0075                     ??_writeDataRTC:	
   548                           ; 1 bytes @ 0x5
   549                           
   550     0075                     reqReadRTC@address:	
   551                           ; 1 bytes @ 0x5
   552                           
   553     0075                     reqWriteRTC@address:	
   554                           ; 1 bytes @ 0x5
   555                           
   556     0075                     writeDataRTC@data:	
   557                           ; 1 bytes @ 0x5
   558                           
   559     0075                     loadDisplay@numIndex:	
   560                           ; 1 bytes @ 0x5
   561                           
   562                           
   563                           ; 1 bytes @ 0x5
   564     0075                     	ds	1
   565     0076                     ??_startRTC:
   566     0076                     ??_readByteRTC:	
   567                           ; 1 bytes @ 0x6
   568                           
   569     0076                     ?_writeByteRTC:	
   570                           ; 1 bytes @ 0x6
   571                           
   572     0076                     readByteRTC@address:	
   573                           ; 1 bytes @ 0x6
   574                           
   575     0076                     writeByteRTC@data:	
   576                           ; 1 bytes @ 0x6
   577                           
   578     0076                     loadDisplay@LDP:	
   579                           ; 1 bytes @ 0x6
   580                           
   581                           
   582                           ; 1 bytes @ 0x6
   583     0076                     	ds	1
   584     0077                     ??_writeByteRTC:
   585     0077                     readByteRTC@data:	
   586                           ; 1 bytes @ 0x7
   587                           
   588     0077                     writeByteRTC@address:	
   589                           ; 1 bytes @ 0x7
   590                           
   591     0077                     loadDisplay@RDP:	
   592                           ; 1 bytes @ 0x7
   593                           
   594                           
   595                           ; 1 bytes @ 0x7
   596     0077                     	ds	1
   597     0078                     ??_displayError666:
   598     0078                     ??_isRTCRunning:	
   599                           ; 1 bytes @ 0x8
   600                           
   601     0078                     ??_checkRTCType:	
   602                           ; 1 bytes @ 0x8
   603                           
   604     0078                     ??_passTubeNum:	
   605                           ; 1 bytes @ 0x8
   606                           
   607     0078                     passTubeNum@tmp7:	
   608                           ; 1 bytes @ 0x8
   609                           
   610                           
   611                           ; 1 bytes @ 0x8
   612     0078                     	ds	1
   613     0079                     ??_getTime:
   614     0079                     isRTCRunning@data:	
   615                           ; 1 bytes @ 0x9
   616                           
   617     0079                     checkRTCType@data:	
   618                           ; 1 bytes @ 0x9
   619                           
   620                           
   621                           ; 1 bytes @ 0x9
   622     0079                     	ds	1
   623     007A                     ??_Init:
   624                           
   625                           ; 1 bytes @ 0xA
   626     007A                     	ds	1
   627     007B                     Init@clockTest:
   628                           
   629                           ; 1 bytes @ 0xB
   630     007B                     	ds	1
   631     007C                     ??_main:
   632                           
   633                           ; 1 bytes @ 0xC
   634     007C                     	ds	1
   635     007D                     main@tmp:
   636                           
   637                           ; 1 bytes @ 0xD
   638     007D                     	ds	1
   639                           
   640                           	psect	cstackBANK0h
   641     002A                     __pcstackBANK0h:
   642     002A                     ?_passTubeNum:
   643     002A                     passTubeNum@tmp6:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 1 bytes @ 0x0
   648     002A                     	ds	1
   649     002B                     passTubeNum@tmp5:
   650                           
   651                           ; 1 bytes @ 0x1
   652     002B                     	ds	1
   653     002C                     passTubeNum@tmp4:
   654                           
   655                           ; 1 bytes @ 0x2
   656     002C                     	ds	1
   657     002D                     passTubeNum@tmp3:
   658                           
   659                           ; 1 bytes @ 0x3
   660     002D                     	ds	1
   661     002E                     passTubeNum@tmp2:
   662                           
   663                           ; 1 bytes @ 0x4
   664     002E                     	ds	1
   665     002F                     passTubeNum@tmp1:
   666                           
   667                           ; 1 bytes @ 0x5
   668     002F                     	ds	1
   669     0030                     passTubeNum@tmp0:
   670                           
   671                           ; 1 bytes @ 0x6
   672     0030                     	ds	1
   673     0031                     passTubeNum@tmpLDP:
   674                           
   675                           ; 1 bytes @ 0x7
   676     0031                     	ds	1
   677     0032                     passTubeNum@tmpRDP:
   678                           
   679                           ; 1 bytes @ 0x8
   680     0032                     	ds	1
   681     0033                     getTime@singleSeconds:
   682                           
   683                           ; 1 bytes @ 0x9
   684     0033                     	ds	1
   685     0034                     getTime@singleMinutes:
   686                           
   687                           ; 1 bytes @ 0xA
   688     0034                     	ds	1
   689     0035                     getTime@singleHours:
   690                           
   691                           ; 1 bytes @ 0xB
   692     0035                     	ds	1
   693     0036                     getTime@tensSeconds:
   694                           
   695                           ; 1 bytes @ 0xC
   696     0036                     	ds	1
   697     0037                     getTime@tensMinutes:
   698                           
   699                           ; 1 bytes @ 0xD
   700     0037                     	ds	1
   701     0038                     getTime@tensHours:
   702                           
   703                           ; 1 bytes @ 0xE
   704     0038                     	ds	1
   705     0039                     getTime@tmpLeft:
   706                           
   707                           ; 1 bytes @ 0xF
   708     0039                     	ds	1
   709     003A                     getTime@tmpRight:
   710                           
   711                           ; 1 bytes @ 0x10
   712     003A                     	ds	1
   713     003B                     getTime@minutes:
   714                           
   715                           ; 1 bytes @ 0x11
   716     003B                     	ds	1
   717     003C                     getTime@hours:
   718                           
   719                           ; 1 bytes @ 0x12
   720     003C                     	ds	1
   721     003D                     getTime@seconds:
   722                           
   723                           ; 1 bytes @ 0x13
   724     003D                     	ds	1
   725                           
   726                           	psect	maintext
   727     0687                     __pmaintext:	
   728 ;;
   729 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   730 ;;
   731 ;; *************** function _main *****************
   732 ;; Defined at:
   733 ;;		line 38 in file "main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;  tmp             1   13[COMMON] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : B00/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   747 ;;      Params:         0       0       0       0       0
   748 ;;      Locals:         1       0       0       0       0
   749 ;;      Temps:          1       0       0       0       0
   750 ;;      Totals:         2       0       0       0       0
   751 ;;Total ram usage:        2 bytes
   752 ;; Hardware stack levels required when called: 5
   753 ;; This function calls:
   754 ;;		_Init
   755 ;;		_display
   756 ;;		_displayError666
   757 ;;		_getTime
   758 ;;		_loadDisplay
   759 ;;		_preLoadWL
   760 ;; This function is called by:
   761 ;;		Startup code after reset
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765     0687                     _main:	
   766                           ;psect for function _main
   767                           
   768     0687                     l1544:	
   769                           ;incstack = 0
   770                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   771                           
   772                           
   773                           ;main.c: 39:     Init();
   774     0687  26FC               	fcall	_Init
   775     0688                     l1546:
   776                           
   777                           ;main.c: 40:     unsigned char tmp = 1;
   778     0688  01FD               	clrf	main@tmp
   779     0689  0AFD               	incf	main@tmp,f
   780     068A                     l1548:
   781                           
   782                           ;main.c: 42:         if(tmp) {
   783     068A  087D               	movf	main@tmp,w
   784     068B  1903               	btfsc	3,2
   785     068C  2E8E               	goto	u681
   786     068D  2E8F               	goto	u680
   787     068E                     u681:
   788     068E  2EA0               	goto	l1556
   789     068F                     u680:
   790     068F                     l1550:
   791                           
   792                           ;main.c: 43:             if(!((ErrFlag)>>(1) & 1)) {
   793     068F  1283               	bcf	3,5	;RP0=0, select bank0
   794     0690  1303               	bcf	3,6	;RP1=0, select bank0
   795     0691  0841               	movf	_ErrFlag,w
   796     0692  00FC               	movwf	??_main
   797     0693  3001               	movlw	1
   798     0694                     u695:
   799     0694  1003               	clrc
   800     0695  0CFC               	rrf	??_main,f
   801     0696  3EFF               	addlw	-1
   802     0697  1D03               	skipz
   803     0698  2E94               	goto	u695
   804     0699  187C               	btfsc	??_main,0
   805     069A  2E9C               	goto	u701
   806     069B  2E9D               	goto	u700
   807     069C                     u701:
   808     069C  2E9F               	goto	l1554
   809     069D                     u700:
   810     069D                     l1552:
   811                           
   812                           ;main.c: 44:                 getTime();
   813     069D  2796               	fcall	_getTime
   814                           
   815                           ;main.c: 45:             } else {
   816     069E  2EA0               	goto	l1556
   817     069F                     l1554:
   818                           
   819                           ;main.c: 46:                 displayError666();
   820     069F  252B               	fcall	_displayError666
   821     06A0                     l1556:
   822                           
   823                           ;main.c: 49:         if(PORTAbits.RA2) {
   824     06A0  1283               	bcf	3,5	;RP0=0, select bank0
   825     06A1  1303               	bcf	3,6	;RP1=0, select bank0
   826     06A2  1D05               	btfss	5,2	;volatile
   827     06A3  2EA5               	goto	u711
   828     06A4  2EA6               	goto	u710
   829     06A5                     u711:
   830     06A5  2EAF               	goto	l53
   831     06A6                     u710:
   832     06A6                     l54:
   833     06A6  1905               	btfsc	5,2	;volatile
   834     06A7  2EA9               	goto	u721
   835     06A8  2EAA               	goto	u720
   836     06A9                     u721:
   837     06A9  2EA6               	goto	l54
   838     06AA                     u720:
   839     06AA                     l1560:
   840                           
   841                           ;main.c: 51:             tmp = 0;
   842     06AA  01FD               	clrf	main@tmp
   843     06AB                     l1562:
   844                           
   845                           ;main.c: 52:             preLoadWL();
   846     06AB  2592               	fcall	_preLoadWL
   847     06AC                     l1564:
   848                           
   849                           ;main.c: 53:             loadDisplay();
   850     06AC  26B9               	fcall	_loadDisplay
   851     06AD                     l1566:
   852                           
   853                           ;main.c: 54:             display();
   854     06AD  24EC               	fcall	_display
   855                           
   856                           ;main.c: 55:         } else if (PORTAbits.RA3) {
   857     06AE  2E8A               	goto	l1548
   858     06AF                     l53:
   859     06AF  1D85               	btfss	5,3	;volatile
   860     06B0  2EB2               	goto	u731
   861     06B1  2EB3               	goto	u730
   862     06B2                     u731:
   863     06B2  2E8A               	goto	l1548
   864     06B3                     u730:
   865     06B3                     l59:
   866     06B3  1985               	btfsc	5,3	;volatile
   867     06B4  2EB6               	goto	u741
   868     06B5  2EB7               	goto	u740
   869     06B6                     u741:
   870     06B6  2EB3               	goto	l59
   871     06B7                     u740:
   872     06B7  2E88               	goto	l1546
   873     06B8  2800               	ljmp	start
   874     06B9                     __end_of_main:
   875                           
   876                           	psect	text1
   877     0592                     __ptext1:	
   878 ;; *************** function _preLoadWL *****************
   879 ;; Defined at:
   880 ;;		line 23 in file "tubes.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, status,2
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   894 ;;      Params:         0       0       0       0       0
   895 ;;      Locals:         0       0       0       0       0
   896 ;;      Temps:          0       0       0       0       0
   897 ;;      Totals:         0       0       0       0       0
   898 ;;Total ram usage:        0 bytes
   899 ;; Hardware stack levels used: 1
   900 ;; This function calls:
   901 ;;		Nothing
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907     0592                     _preLoadWL:	
   908                           ;psect for function _preLoadWL
   909                           
   910     0592                     l1526:	
   911                           ;incstack = 0
   912                           ; Regs used in _preLoadWL: [wreg+status,2]
   913                           
   914                           
   915                           ;tubes.c: 24:     T7 = 1;
   916     0592  1283               	bcf	3,5	;RP0=0, select bank0
   917     0593  1303               	bcf	3,6	;RP1=0, select bank0
   918     0594  01A9               	clrf	41
   919     0595  0AA9               	incf	41,f
   920     0596                     l1528:
   921                           
   922                           ;tubes.c: 25:     T6 = 10;
   923     0596  300A               	movlw	10
   924     0597  00A8               	movwf	40
   925     0598                     l1530:
   926                           
   927                           ;tubes.c: 26:     T5 = 0;
   928     0598  01A7               	clrf	39
   929     0599                     l1532:
   930                           
   931                           ;tubes.c: 27:     T4 = 4;
   932     0599  3004               	movlw	4
   933     059A  00A6               	movwf	38
   934     059B                     l1534:
   935                           
   936                           ;tubes.c: 28:     T3 = 8;
   937     059B  3008               	movlw	8
   938     059C  00A5               	movwf	37
   939     059D                     l1536:
   940                           
   941                           ;tubes.c: 29:     T2 = 5;
   942     059D  3005               	movlw	5
   943     059E  00A4               	movwf	36
   944     059F                     l1538:
   945                           
   946                           ;tubes.c: 30:     T1 = 9;
   947     059F  3009               	movlw	9
   948     05A0  00A3               	movwf	35
   949     05A1                     l1540:
   950                           
   951                           ;tubes.c: 31:     T0 = 6;
   952     05A1  3006               	movlw	6
   953     05A2  00A2               	movwf	34
   954                           
   955                           ;tubes.c: 32:     leftDP = 0x00;
   956     05A3  01BF               	clrf	_leftDP
   957                           
   958                           ;tubes.c: 33:     rightDP = 0x00;
   959     05A4  01BE               	clrf	_rightDP
   960     05A5                     l1542:
   961                           
   962                           ;tubes.c: 34:     (rightDP |= (1<<6));
   963     05A5  173E               	bsf	_rightDP,6
   964     05A6                     l220:
   965     05A6  0008               	return
   966     05A7                     __end_of_preLoadWL:
   967                           
   968                           	psect	text2
   969     0796                     __ptext2:	
   970 ;; *************** function _getTime *****************
   971 ;; Defined at:
   972 ;;		line 107 in file "RTC.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  seconds         1   19[BANK0h] unsigned char 
   977 ;;  hours           1   18[BANK0h] unsigned char 
   978 ;;  minutes         1   17[BANK0h] unsigned char 
   979 ;;  tmpRight        1   16[BANK0h] unsigned char 
   980 ;;  tmpLeft         1   15[BANK0h] unsigned char 
   981 ;;  tensHours       1   14[BANK0h] unsigned char 
   982 ;;  tensMinutes     1   13[BANK0h] unsigned char 
   983 ;;  tensSeconds     1   12[BANK0h] unsigned char 
   984 ;;  singleHours     1   11[BANK0h] unsigned char 
   985 ;;  singleMinute    1   10[BANK0h] unsigned char 
   986 ;;  singleSecond    1    9[BANK0h] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   996 ;;      Params:         0       0       0       0       0
   997 ;;      Locals:         0      11       0       0       0
   998 ;;      Temps:          0       0       0       0       0
   999 ;;      Totals:         0      11       0       0       0
  1000 ;;Total ram usage:       11 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; Hardware stack levels required when called: 4
  1003 ;; This function calls:
  1004 ;;		_I2C_SendACK
  1005 ;;		_endReadRTC
  1006 ;;		_passTubeNum
  1007 ;;		_readByteRTC
  1008 ;;		_readDataRTC
  1009 ;;		_reqReadRTC
  1010 ;;		_swapNibbles
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016     0796                     _getTime:	
  1017                           ;psect for function _getTime
  1018                           
  1019     0796                     l1476:	
  1020                           ;incstack = 0
  1021                           ; Regs used in _getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1022                           
  1023                           
  1024                           ;RTC.c: 108:     unsigned char seconds, minutes, hours;;RTC.c: 109:     unsigned char si
      +                          ngleSeconds, singleMinutes, singleHours;;RTC.c: 110:     unsigned char tensSeconds, tens
      +                          Minutes, tensHours;;RTC.c: 111:     unsigned char tmpLeft, tmpRight;;RTC.c: 113:     sec
      +                          onds = readByteRTC(0x00);
  1025     0796  3000               	movlw	0
  1026     0797  24F3               	fcall	_readByteRTC
  1027     0798  1283               	bcf	3,5	;RP0=0, select bank0
  1028     0799  1303               	bcf	3,6	;RP1=0, select bank0
  1029     079A  00BD               	movwf	getTime@seconds
  1030     079B                     l1478:
  1031                           
  1032                           ;RTC.c: 116:     if(seconds != oldSeconds) {
  1033     079B  083D               	movf	getTime@seconds,w
  1034     079C  0640               	xorwf	_oldSeconds,w
  1035     079D  1903               	skipnz
  1036     079E  2FA0               	goto	u661
  1037     079F  2FA1               	goto	u660
  1038     07A0                     u661:
  1039     07A0  2FF2               	goto	l180
  1040     07A1                     u660:
  1041     07A1                     l1480:
  1042                           
  1043                           ;RTC.c: 117:         reqReadRTC(0x00);
  1044     07A1  3000               	movlw	0
  1045     07A2  250D               	fcall	_reqReadRTC
  1046                           
  1047                           ;RTC.c: 118:         seconds = readDataRTC();
  1048     07A3  24DA               	fcall	_readDataRTC
  1049     07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1050     07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1051     07A6  00BD               	movwf	getTime@seconds
  1052     07A7                     l1482:
  1053                           
  1054                           ;RTC.c: 119:         I2C_SendACK();
  1055     07A7  2561               	fcall	_I2C_SendACK
  1056     07A8                     l1484:
  1057                           
  1058                           ;RTC.c: 120:         minutes = readDataRTC();
  1059     07A8  24DA               	fcall	_readDataRTC
  1060     07A9  1283               	bcf	3,5	;RP0=0, select bank0
  1061     07AA  1303               	bcf	3,6	;RP1=0, select bank0
  1062     07AB  00BB               	movwf	getTime@minutes
  1063                           
  1064                           ;RTC.c: 121:         I2C_SendACK();
  1065     07AC  2561               	fcall	_I2C_SendACK
  1066     07AD                     l1486:
  1067                           
  1068                           ;RTC.c: 122:         hours = readDataRTC();
  1069     07AD  24DA               	fcall	_readDataRTC
  1070     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1071     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1072     07B0  00BC               	movwf	getTime@hours
  1073     07B1                     l1488:
  1074                           
  1075                           ;RTC.c: 123:         endReadRTC();
  1076     07B1  24D3               	fcall	_endReadRTC
  1077     07B2                     l1490:
  1078                           
  1079                           ;RTC.c: 124:         singleSeconds = (seconds & 0x0F);
  1080     07B2  1283               	bcf	3,5	;RP0=0, select bank0
  1081     07B3  1303               	bcf	3,6	;RP1=0, select bank0
  1082     07B4  083D               	movf	getTime@seconds,w
  1083     07B5  390F               	andlw	15
  1084     07B6  00B3               	movwf	getTime@singleSeconds
  1085     07B7                     l1492:
  1086                           
  1087                           ;RTC.c: 125:         tensSeconds = (swapNibbles(seconds) & 0x0F);
  1088     07B7  083D               	movf	getTime@seconds,w
  1089     07B8  25BE               	fcall	_swapNibbles
  1090     07B9  390F               	andlw	15
  1091     07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1092     07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1093     07BC  00B6               	movwf	getTime@tensSeconds
  1094     07BD                     l1494:
  1095                           
  1096                           ;RTC.c: 126:         singleMinutes = (minutes & 0x0F);
  1097     07BD  083B               	movf	getTime@minutes,w
  1098     07BE  390F               	andlw	15
  1099     07BF  00B4               	movwf	getTime@singleMinutes
  1100     07C0                     l1496:
  1101                           
  1102                           ;RTC.c: 127:         tensMinutes = (swapNibbles(minutes) & 0x0F);
  1103     07C0  083B               	movf	getTime@minutes,w
  1104     07C1  25BE               	fcall	_swapNibbles
  1105     07C2  390F               	andlw	15
  1106     07C3  1283               	bcf	3,5	;RP0=0, select bank0
  1107     07C4  1303               	bcf	3,6	;RP1=0, select bank0
  1108     07C5  00B7               	movwf	getTime@tensMinutes
  1109     07C6                     l1498:
  1110                           
  1111                           ;RTC.c: 128:         singleHours = (hours & 0x0F);
  1112     07C6  083C               	movf	getTime@hours,w
  1113     07C7  390F               	andlw	15
  1114     07C8  00B5               	movwf	getTime@singleHours
  1115     07C9                     l1500:
  1116                           
  1117                           ;RTC.c: 129:         tensHours = (swapNibbles(hours) & 0x0F);
  1118     07C9  083C               	movf	getTime@hours,w
  1119     07CA  25BE               	fcall	_swapNibbles
  1120     07CB  390F               	andlw	15
  1121     07CC  1283               	bcf	3,5	;RP0=0, select bank0
  1122     07CD  1303               	bcf	3,6	;RP1=0, select bank0
  1123     07CE  00B8               	movwf	getTime@tensHours
  1124     07CF                     l1502:
  1125                           
  1126                           ;RTC.c: 131:         if(((seconds)>>(0) & 1)) {
  1127     07CF  1C3D               	btfss	getTime@seconds,0
  1128     07D0  2FD2               	goto	u671
  1129     07D1  2FD3               	goto	u670
  1130     07D2                     u671:
  1131     07D2  2FD7               	goto	l1508
  1132     07D3                     u670:
  1133     07D3                     l1504:
  1134                           
  1135                           ;RTC.c: 132:             tmpLeft = 0x00;
  1136     07D3  01B9               	clrf	getTime@tmpLeft
  1137     07D4                     l1506:
  1138                           
  1139                           ;RTC.c: 133:             tmpRight = 0x24;
  1140     07D4  3024               	movlw	36
  1141     07D5  00BA               	movwf	getTime@tmpRight
  1142                           
  1143                           ;RTC.c: 134:         } else {
  1144     07D6  2FDA               	goto	l1512
  1145     07D7                     l1508:
  1146                           
  1147                           ;RTC.c: 135:             tmpLeft = 0x24;
  1148     07D7  3024               	movlw	36
  1149     07D8  00B9               	movwf	getTime@tmpLeft
  1150     07D9                     l1510:
  1151                           
  1152                           ;RTC.c: 136:             tmpRight = 0x00;
  1153     07D9  01BA               	clrf	getTime@tmpRight
  1154     07DA                     l1512:
  1155                           
  1156                           ;RTC.c: 138:         passTubeNum(tensHours,singleHours,10,tensMinutes,singleMinutes,10,t
      +                          ensSeconds,singleSeconds,tmpLeft,tmpRight);
  1157     07DA  0835               	movf	getTime@singleHours,w
  1158     07DB  00AA               	movwf	passTubeNum@tmp6
  1159     07DC  300A               	movlw	10
  1160     07DD  00AB               	movwf	passTubeNum@tmp5
  1161     07DE  0837               	movf	getTime@tensMinutes,w
  1162     07DF  00AC               	movwf	passTubeNum@tmp4
  1163     07E0  0834               	movf	getTime@singleMinutes,w
  1164     07E1  00AD               	movwf	passTubeNum@tmp3
  1165     07E2  300A               	movlw	10
  1166     07E3  00AE               	movwf	passTubeNum@tmp2
  1167     07E4  0836               	movf	getTime@tensSeconds,w
  1168     07E5  00AF               	movwf	passTubeNum@tmp1
  1169     07E6  0833               	movf	getTime@singleSeconds,w
  1170     07E7  00B0               	movwf	passTubeNum@tmp0
  1171     07E8  0839               	movf	getTime@tmpLeft,w
  1172     07E9  00B1               	movwf	passTubeNum@tmpLDP
  1173     07EA  083A               	movf	getTime@tmpRight,w
  1174     07EB  00B2               	movwf	passTubeNum@tmpRDP
  1175     07EC  0838               	movf	getTime@tensHours,w
  1176     07ED  25D7               	fcall	_passTubeNum
  1177     07EE                     l1514:
  1178                           
  1179                           ;RTC.c: 139:         oldSeconds = seconds;
  1180     07EE  1283               	bcf	3,5	;RP0=0, select bank0
  1181     07EF  1303               	bcf	3,6	;RP1=0, select bank0
  1182     07F0  083D               	movf	getTime@seconds,w
  1183     07F1  00C0               	movwf	_oldSeconds
  1184     07F2                     l180:
  1185     07F2  0008               	return
  1186     07F3                     __end_of_getTime:
  1187                           
  1188                           	psect	text3
  1189     05BE                     __ptext3:	
  1190 ;; *************** function _swapNibbles *****************
  1191 ;; Defined at:
  1192 ;;		line 96 in file "main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  data            1    wreg     unsigned char 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  data            1    3[COMMON] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      unsigned char 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1206 ;;      Params:         0       0       0       0       0
  1207 ;;      Locals:         1       0       0       0       0
  1208 ;;      Temps:          3       0       0       0       0
  1209 ;;      Totals:         4       0       0       0       0
  1210 ;;Total ram usage:        4 bytes
  1211 ;; Hardware stack levels used: 1
  1212 ;; This function calls:
  1213 ;;		Nothing
  1214 ;; This function is called by:
  1215 ;;		_getTime
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219     05BE                     _swapNibbles:	
  1220                           ;psect for function _swapNibbles
  1221                           
  1222                           
  1223                           ;incstack = 0
  1224                           ; Regs used in _swapNibbles: [wreg+status,2+status,0]
  1225                           ;swapNibbles@data stored from wreg
  1226     05BE  00F3               	movwf	swapNibbles@data
  1227     05BF                     l1426:
  1228                           
  1229                           ;main.c: 97:     return ((data & 0x0F) << 4 | (data & 0xF0) >> 4);
  1230     05BF  0873               	movf	swapNibbles@data,w
  1231     05C0  00F0               	movwf	??_swapNibbles
  1232     05C1  3004               	movlw	4
  1233     05C2                     u585:
  1234     05C2  1003               	clrc
  1235     05C3  0CF0               	rrf	??_swapNibbles,f
  1236     05C4  3EFF               	addlw	-1
  1237     05C5  1D03               	skipz
  1238     05C6  2DC2               	goto	u585
  1239     05C7  300F               	movlw	15
  1240     05C8  0570               	andwf	??_swapNibbles,w
  1241     05C9  00F1               	movwf	??_swapNibbles+1
  1242     05CA  0873               	movf	swapNibbles@data,w
  1243     05CB  390F               	andlw	15
  1244     05CC  00F2               	movwf	??_swapNibbles+2
  1245     05CD  3003               	movlw	3
  1246     05CE                     u595:
  1247     05CE  1003               	clrc
  1248     05CF  0DF2               	rlf	??_swapNibbles+2,f
  1249     05D0  3EFF               	addlw	-1
  1250     05D1  1D03               	skipz
  1251     05D2  2DCE               	goto	u595
  1252     05D3  1003               	clrc
  1253     05D4  0D72               	rlf	??_swapNibbles+2,w
  1254     05D5  0471               	iorwf	??_swapNibbles+1,w
  1255     05D6                     l75:
  1256     05D6  0008               	return
  1257     05D7                     __end_of_swapNibbles:
  1258                           
  1259                           	psect	text4
  1260     04DA                     __ptext4:	
  1261 ;; *************** function _readDataRTC *****************
  1262 ;; Defined at:
  1263 ;;		line 16 in file "RTC.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  data            1    3[COMMON] unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      unsigned char 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1277 ;;      Params:         0       0       0       0       0
  1278 ;;      Locals:         1       0       0       0       0
  1279 ;;      Temps:          0       0       0       0       0
  1280 ;;      Totals:         1       0       0       0       0
  1281 ;;Total ram usage:        1 bytes
  1282 ;; Hardware stack levels used: 1
  1283 ;; Hardware stack levels required when called: 1
  1284 ;; This function calls:
  1285 ;;		_I2C_ReadByte
  1286 ;; This function is called by:
  1287 ;;		_getTime
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291     04DA                     _readDataRTC:	
  1292                           ;psect for function _readDataRTC
  1293                           
  1294     04DA                     l1432:	
  1295                           ;incstack = 0
  1296                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1297                           
  1298                           
  1299                           ;RTC.c: 17:     unsigned char data;;RTC.c: 18:     data = I2C_ReadByte();
  1300     04DA  265C               	fcall	_I2C_ReadByte
  1301     04DB  00F3               	movwf	readDataRTC@data
  1302     04DC                     l1434:
  1303                           
  1304                           ;RTC.c: 19:     return data;
  1305     04DC  0873               	movf	readDataRTC@data,w
  1306     04DD                     l145:
  1307     04DD  0008               	return
  1308     04DE                     __end_of_readDataRTC:
  1309                           
  1310                           	psect	text5
  1311     05D7                     __ptext5:	
  1312 ;; *************** function _passTubeNum *****************
  1313 ;; Defined at:
  1314 ;;		line 139 in file "tubes.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  tmp7            1    wreg     unsigned char 
  1317 ;;  tmp6            1    0[BANK0h] unsigned char 
  1318 ;;  tmp5            1    1[BANK0h] unsigned char 
  1319 ;;  tmp4            1    2[BANK0h] unsigned char 
  1320 ;;  tmp3            1    3[BANK0h] unsigned char 
  1321 ;;  tmp2            1    4[BANK0h] unsigned char 
  1322 ;;  tmp1            1    5[BANK0h] unsigned char 
  1323 ;;  tmp0            1    6[BANK0h] unsigned char 
  1324 ;;  tmpLDP          1    7[BANK0h] unsigned char 
  1325 ;;  tmpRDP          1    8[BANK0h] unsigned char 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  tmp7            1    8[COMMON] unsigned char 
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1337 ;;      Params:         0       9       0       0       0
  1338 ;;      Locals:         1       0       0       0       0
  1339 ;;      Temps:          0       0       0       0       0
  1340 ;;      Totals:         1       9       0       0       0
  1341 ;;Total ram usage:       10 bytes
  1342 ;; Hardware stack levels used: 1
  1343 ;; Hardware stack levels required when called: 3
  1344 ;; This function calls:
  1345 ;;		_display
  1346 ;;		_loadDisplay
  1347 ;; This function is called by:
  1348 ;;		_getTime
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352     05D7                     _passTubeNum:	
  1353                           ;psect for function _passTubeNum
  1354                           
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _passTubeNum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1358                           ;passTubeNum@tmp7 stored from wreg
  1359     05D7  00F8               	movwf	passTubeNum@tmp7
  1360     05D8                     l1438:
  1361                           
  1362                           ;tubes.c: 140:     T0 = tmp0;
  1363     05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1364     05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1365     05DA  0830               	movf	passTubeNum@tmp0,w
  1366     05DB  00A2               	movwf	34
  1367                           
  1368                           ;tubes.c: 141:     T1 = tmp1;
  1369     05DC  082F               	movf	passTubeNum@tmp1,w
  1370     05DD  00A3               	movwf	35
  1371                           
  1372                           ;tubes.c: 142:     T2 = tmp2;
  1373     05DE  082E               	movf	passTubeNum@tmp2,w
  1374     05DF  00A4               	movwf	36
  1375                           
  1376                           ;tubes.c: 143:     T3 = tmp3;
  1377     05E0  082D               	movf	passTubeNum@tmp3,w
  1378     05E1  00A5               	movwf	37
  1379                           
  1380                           ;tubes.c: 144:     T4 = tmp4;
  1381     05E2  082C               	movf	passTubeNum@tmp4,w
  1382     05E3  00A6               	movwf	38
  1383                           
  1384                           ;tubes.c: 145:     T5 = tmp5;
  1385     05E4  082B               	movf	passTubeNum@tmp5,w
  1386     05E5  00A7               	movwf	39
  1387                           
  1388                           ;tubes.c: 146:     T6 = tmp6;
  1389     05E6  082A               	movf	passTubeNum@tmp6,w
  1390     05E7  00A8               	movwf	40
  1391                           
  1392                           ;tubes.c: 147:     T7 = tmp7;
  1393     05E8  0878               	movf	passTubeNum@tmp7,w
  1394     05E9  00A9               	movwf	41
  1395                           
  1396                           ;tubes.c: 148:     leftDP = tmpLDP;
  1397     05EA  0831               	movf	passTubeNum@tmpLDP,w
  1398     05EB  00BF               	movwf	_leftDP
  1399                           
  1400                           ;tubes.c: 149:     rightDP = tmpRDP;
  1401     05EC  0832               	movf	passTubeNum@tmpRDP,w
  1402     05ED  00BE               	movwf	_rightDP
  1403     05EE                     l1440:
  1404                           
  1405                           ;tubes.c: 150:     loadDisplay();
  1406     05EE  26B9               	fcall	_loadDisplay
  1407     05EF                     l1442:
  1408                           
  1409                           ;tubes.c: 151:     display();
  1410     05EF  24EC               	fcall	_display
  1411     05F0                     l262:
  1412     05F0  0008               	return
  1413     05F1                     __end_of_passTubeNum:
  1414                           
  1415                           	psect	text6
  1416     0561                     __ptext6:	
  1417 ;; *************** function _I2C_SendACK *****************
  1418 ;; Defined at:
  1419 ;;		line 97 in file "IIC.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		None
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1433 ;;      Params:         0       0       0       0       0
  1434 ;;      Locals:         0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0
  1436 ;;      Totals:         0       0       0       0       0
  1437 ;;Total ram usage:        0 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_getTime
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446     0561                     _I2C_SendACK:	
  1447                           ;psect for function _I2C_SendACK
  1448                           
  1449     0561                     l1430:	
  1450                           ;incstack = 0
  1451                           ; Regs used in _I2C_SendACK: []
  1452                           
  1453                           
  1454                           ;IIC.c: 98:     TRISAbits.TRISA0 = 0;
  1455     0561  1683               	bsf	3,5	;RP0=1, select bank1
  1456     0562  1303               	bcf	3,6	;RP1=0, select bank1
  1457     0563  1005               	bcf	5,0	;volatile
  1458                           
  1459                           ;IIC.c: 99:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1460     0564  2D65               	nop2	;2 cycle nop
  1461                           
  1462                           ;IIC.c: 100:     TRISAbits.TRISA1 = 0;
  1463     0565  1683               	bsf	3,5	;RP0=1, select bank1
  1464     0566  1303               	bcf	3,6	;RP1=0, select bank1
  1465     0567  1085               	bcf	5,1	;volatile
  1466                           
  1467                           ;IIC.c: 101:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1468     0568  2D69               	nop2	;2 cycle nop
  1469                           
  1470                           ;IIC.c: 102:     TRISAbits.TRISA0 = 1;
  1471     0569  1683               	bsf	3,5	;RP0=1, select bank1
  1472     056A  1303               	bcf	3,6	;RP1=0, select bank1
  1473     056B  1405               	bsf	5,0	;volatile
  1474                           
  1475                           ;IIC.c: 103:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1476     056C  2D6D               	nop2	;2 cycle nop
  1477     056D  2D6E               	nop2	;2 cycle nop
  1478     056E  0000               	nop
  1479     056F                     l114:
  1480     056F  0008               	return
  1481     0570                     __end_of_I2C_SendACK:
  1482                           
  1483                           	psect	text7
  1484     052B                     __ptext7:	
  1485 ;; *************** function _displayError666 *****************
  1486 ;; Defined at:
  1487 ;;		line 113 in file "tubes.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;		None
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1501 ;;      Params:         0       0       0       0       0
  1502 ;;      Locals:         0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0
  1504 ;;      Totals:         0       0       0       0       0
  1505 ;;Total ram usage:        0 bytes
  1506 ;; Hardware stack levels used: 1
  1507 ;; Hardware stack levels required when called: 3
  1508 ;; This function calls:
  1509 ;;		_blankTubes
  1510 ;;		_display
  1511 ;;		_loadDisplay
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517     052B                     _displayError666:	
  1518                           ;psect for function _displayError666
  1519                           
  1520     052B                     l1516:	
  1521                           ;incstack = 0
  1522                           ; Regs used in _displayError666: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1523                           
  1524                           
  1525                           ;tubes.c: 114:     blankTubes();
  1526     052B  25F1               	fcall	_blankTubes
  1527     052C                     l1518:
  1528                           
  1529                           ;tubes.c: 115:     T0 = T1 = T2 = 6;
  1530     052C  3006               	movlw	6
  1531     052D  1283               	bcf	3,5	;RP0=0, select bank0
  1532     052E  1303               	bcf	3,6	;RP1=0, select bank0
  1533     052F  00A4               	movwf	36
  1534     0530  00A3               	movwf	35
  1535     0531  00A2               	movwf	34
  1536     0532                     l1520:
  1537                           
  1538                           ;tubes.c: 116:     leftDP = rightDP = 0x00;
  1539     0532  01BE               	clrf	_rightDP
  1540     0533  01BF               	clrf	_leftDP
  1541     0534                     l1522:
  1542                           
  1543                           ;tubes.c: 117:     loadDisplay();
  1544     0534  26B9               	fcall	_loadDisplay
  1545     0535                     l1524:
  1546                           
  1547                           ;tubes.c: 118:     display();
  1548     0535  24EC               	fcall	_display
  1549     0536                     l253:
  1550     0536  0008               	return
  1551     0537                     __end_of_displayError666:
  1552                           
  1553                           	psect	text8
  1554     06B9                     __ptext8:	
  1555 ;; *************** function _loadDisplay *****************
  1556 ;; Defined at:
  1557 ;;		line 37 in file "tubes.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  numIndex        1    5[COMMON] unsigned char 
  1562 ;;  tubeIndex       1    4[COMMON] unsigned char 
  1563 ;;  RDP             1    7[COMMON] unsigned char 
  1564 ;;  LDP             1    6[COMMON] unsigned char 
  1565 ;;  tubePtr         1    3[COMMON] PTR unsigned char 
  1566 ;;		 -> T7(1), 
  1567 ;;  dispNum         1    2[COMMON] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1577 ;;      Params:         0       0       0       0       0
  1578 ;;      Locals:         6       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0
  1580 ;;      Totals:         6       0       0       0       0
  1581 ;;Total ram usage:        6 bytes
  1582 ;; Hardware stack levels used: 1
  1583 ;; Hardware stack levels required when called: 2
  1584 ;; This function calls:
  1585 ;;		_checkDP
  1586 ;;		_latch
  1587 ;;		_send0ToDrivers
  1588 ;;		_send1ToDrivers
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;;		_displayError666
  1592 ;;		_passTubeNum
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596     06B9                     _loadDisplay:	
  1597                           ;psect for function _loadDisplay
  1598                           
  1599     06B9                     l1294:	
  1600                           ;incstack = 0
  1601                           ; Regs used in _loadDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1602                           
  1603                           
  1604                           ;tubes.c: 38:     unsigned char *tubePtr;;tubes.c: 39:     tubePtr = &T7;
  1605     06B9  3029               	movlw	41
  1606     06BA  00F3               	movwf	loadDisplay@tubePtr
  1607                           
  1608                           ;tubes.c: 40:     unsigned char dispNum;;tubes.c: 41:     unsigned char LDP = leftDP;
  1609     06BB  1283               	bcf	3,5	;RP0=0, select bank0
  1610     06BC  1303               	bcf	3,6	;RP1=0, select bank0
  1611     06BD  083F               	movf	_leftDP,w
  1612     06BE  00F6               	movwf	loadDisplay@LDP
  1613                           
  1614                           ;tubes.c: 42:     unsigned char RDP = rightDP;
  1615     06BF  083E               	movf	_rightDP,w
  1616     06C0  00F7               	movwf	loadDisplay@RDP
  1617     06C1                     l1296:
  1618                           
  1619                           ;tubes.c: 44:    for (unsigned char tubeIndex = 0; tubeIndex <= 7; tubeIndex++) {
  1620     06C1  01F4               	clrf	loadDisplay@tubeIndex
  1621     06C2                     l1302:
  1622                           
  1623                           ;tubes.c: 45:         checkDP(&LDP);
  1624     06C2  3076               	movlw	(low (loadDisplay@LDP| 0))& (0+255)
  1625     06C3  260C               	fcall	_checkDP
  1626     06C4                     l1304:
  1627                           
  1628                           ;tubes.c: 46:         dispNum = 1;
  1629     06C4  01F2               	clrf	loadDisplay@dispNum
  1630     06C5  0AF2               	incf	loadDisplay@dispNum,f
  1631     06C6                     l1306:
  1632                           
  1633                           ;tubes.c: 48:         for (unsigned char numIndex = 0; numIndex < 9; numIndex++) {
  1634     06C6  01F5               	clrf	loadDisplay@numIndex
  1635     06C7                     l1312:
  1636                           
  1637                           ;tubes.c: 49:             if(dispNum == *tubePtr) {
  1638     06C7  0873               	movf	loadDisplay@tubePtr,w
  1639     06C8  0084               	movwf	4
  1640     06C9  1383               	bcf	3,7	;select IRP bank0
  1641     06CA  0800               	movf	0,w
  1642     06CB  0672               	xorwf	loadDisplay@dispNum,w
  1643     06CC  1D03               	skipz
  1644     06CD  2ECF               	goto	u491
  1645     06CE  2ED0               	goto	u490
  1646     06CF                     u491:
  1647     06CF  2ED2               	goto	l1316
  1648     06D0                     u490:
  1649     06D0                     l1314:
  1650                           
  1651                           ;tubes.c: 50:                 send1ToDrivers();
  1652     06D0  2521               	fcall	_send1ToDrivers
  1653                           
  1654                           ;tubes.c: 51:             } else {
  1655     06D1  2ED3               	goto	l1318
  1656     06D2                     l1316:
  1657                           
  1658                           ;tubes.c: 52:                 send0ToDrivers();
  1659     06D2  2517               	fcall	_send0ToDrivers
  1660     06D3                     l1318:
  1661                           
  1662                           ;tubes.c: 54:             dispNum++;
  1663     06D3  3001               	movlw	1
  1664     06D4  00FF               	movwf	btemp+1
  1665     06D5  087F               	movf	btemp+1,w
  1666     06D6  07F2               	addwf	loadDisplay@dispNum,f
  1667     06D7                     l1320:
  1668                           
  1669                           ;tubes.c: 55:         }
  1670     06D7  3001               	movlw	1
  1671     06D8  00FF               	movwf	btemp+1
  1672     06D9  087F               	movf	btemp+1,w
  1673     06DA  07F5               	addwf	loadDisplay@numIndex,f
  1674     06DB                     l1322:
  1675     06DB  3009               	movlw	9
  1676     06DC  0275               	subwf	loadDisplay@numIndex,w
  1677     06DD  1C03               	skipc
  1678     06DE  2EE0               	goto	u501
  1679     06DF  2EE1               	goto	u500
  1680     06E0                     u501:
  1681     06E0  2EC7               	goto	l1312
  1682     06E1                     u500:
  1683     06E1                     l1324:
  1684                           
  1685                           ;tubes.c: 57:         if (*tubePtr == 0) {
  1686     06E1  0873               	movf	loadDisplay@tubePtr,w
  1687     06E2  0084               	movwf	4
  1688     06E3  1383               	bcf	3,7	;select IRP bank0
  1689     06E4  0800               	movf	0,w
  1690     06E5  1D03               	btfss	3,2
  1691     06E6  2EE8               	goto	u511
  1692     06E7  2EE9               	goto	u510
  1693     06E8                     u511:
  1694     06E8  2EEB               	goto	l1328
  1695     06E9                     u510:
  1696     06E9                     l1326:
  1697                           
  1698                           ;tubes.c: 58:             send1ToDrivers();
  1699     06E9  2521               	fcall	_send1ToDrivers
  1700                           
  1701                           ;tubes.c: 59:         } else {
  1702     06EA  2EEC               	goto	l1330
  1703     06EB                     l1328:
  1704                           
  1705                           ;tubes.c: 60:             send0ToDrivers();
  1706     06EB  2517               	fcall	_send0ToDrivers
  1707     06EC                     l1330:
  1708                           
  1709                           ;tubes.c: 62:         checkDP(&RDP);
  1710     06EC  3077               	movlw	(low (loadDisplay@RDP| 0))& (0+255)
  1711     06ED  260C               	fcall	_checkDP
  1712     06EE                     l1332:
  1713                           
  1714                           ;tubes.c: 63:         tubePtr--;
  1715     06EE  3001               	movlw	1
  1716     06EF  02F3               	subwf	loadDisplay@tubePtr,f
  1717     06F0                     l1334:
  1718                           
  1719                           ;tubes.c: 64:     }
  1720     06F0  3001               	movlw	1
  1721     06F1  00FF               	movwf	btemp+1
  1722     06F2  087F               	movf	btemp+1,w
  1723     06F3  07F4               	addwf	loadDisplay@tubeIndex,f
  1724     06F4                     l1336:
  1725     06F4  3008               	movlw	8
  1726     06F5  0274               	subwf	loadDisplay@tubeIndex,w
  1727     06F6  1C03               	skipc
  1728     06F7  2EF9               	goto	u521
  1729     06F8  2EFA               	goto	u520
  1730     06F9                     u521:
  1731     06F9  2EC2               	goto	l1302
  1732     06FA                     u520:
  1733     06FA                     l1338:
  1734                           
  1735                           ;tubes.c: 65:     latch();
  1736     06FA  2504               	fcall	_latch
  1737     06FB                     l231:
  1738     06FB  0008               	return
  1739     06FC                     __end_of_loadDisplay:
  1740                           
  1741                           	psect	text9
  1742     0504                     __ptext9:	
  1743 ;; *************** function _latch *****************
  1744 ;; Defined at:
  1745 ;;		line 82 in file "tubes.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1759 ;;      Params:         0       0       0       0       0
  1760 ;;      Locals:         0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0
  1762 ;;      Totals:         0       0       0       0       0
  1763 ;;Total ram usage:        0 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_loadDisplay
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772     0504                     _latch:	
  1773                           ;psect for function _latch
  1774                           
  1775     0504                     l1286:	
  1776                           ;incstack = 0
  1777                           ; Regs used in _latch: [wreg+status,2]
  1778                           
  1779                           
  1780                           ;tubes.c: 83:     (PORTB_SHADOW |= (1<<0x5));
  1781     0504  1283               	bcf	3,5	;RP0=0, select bank0
  1782     0505  1303               	bcf	3,6	;RP1=0, select bank0
  1783     0506  16C2               	bsf	_PORTB_SHADOW,5
  1784     0507                     l1288:
  1785                           
  1786                           ;tubes.c: 84:     PORTB = PORTB_SHADOW;
  1787     0507  0842               	movf	_PORTB_SHADOW,w
  1788     0508  0086               	movwf	6	;volatile
  1789     0509                     l1290:
  1790                           
  1791                           ;tubes.c: 85:     (PORTB_SHADOW &=(0<<0x5));
  1792     0509  01C2               	clrf	_PORTB_SHADOW
  1793     050A                     l1292:
  1794                           
  1795                           ;tubes.c: 86:     PORTB = PORTB_SHADOW;
  1796     050A  0842               	movf	_PORTB_SHADOW,w
  1797     050B  0086               	movwf	6	;volatile
  1798     050C                     l239:
  1799     050C  0008               	return
  1800     050D                     __end_of_latch:
  1801                           
  1802                           	psect	text10
  1803     060C                     __ptext10:	
  1804 ;; *************** function _checkDP *****************
  1805 ;; Defined at:
  1806 ;;		line 69 in file "tubes.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  DP              1    wreg     PTR unsigned char 
  1809 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  DP              1    1[COMMON] PTR unsigned char 
  1812 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1822 ;;      Params:         0       0       0       0       0
  1823 ;;      Locals:         1       0       0       0       0
  1824 ;;      Temps:          1       0       0       0       0
  1825 ;;      Totals:         2       0       0       0       0
  1826 ;;Total ram usage:        2 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 1
  1829 ;; This function calls:
  1830 ;;		_send0ToDrivers
  1831 ;;		_send1ToDrivers
  1832 ;; This function is called by:
  1833 ;;		_loadDisplay
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837     060C                     _checkDP:	
  1838                           ;psect for function _checkDP
  1839                           
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in _checkDP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1843                           ;checkDP@DP stored from wreg
  1844     060C  00F1               	movwf	checkDP@DP
  1845     060D                     l1276:
  1846                           
  1847                           ;tubes.c: 70:     if ((((*DP))>>(7) & 1)) {
  1848     060D  0871               	movf	checkDP@DP,w
  1849     060E  0084               	movwf	4
  1850     060F  0800               	movf	0,w
  1851     0610  00F0               	movwf	??_checkDP
  1852     0611  3007               	movlw	7
  1853     0612                     u475:
  1854     0612  1003               	clrc
  1855     0613  0CF0               	rrf	??_checkDP,f
  1856     0614  3EFF               	addlw	-1
  1857     0615  1D03               	skipz
  1858     0616  2E12               	goto	u475
  1859     0617  1C70               	btfss	??_checkDP,0
  1860     0618  2E1A               	goto	u481
  1861     0619  2E1B               	goto	u480
  1862     061A                     u481:
  1863     061A  2E27               	goto	l1282
  1864     061B                     u480:
  1865     061B                     l1278:
  1866                           
  1867                           ;tubes.c: 72:         *DP = (*DP) << 1;
  1868     061B  0871               	movf	checkDP@DP,w
  1869     061C  0084               	movwf	4
  1870     061D  0800               	movf	0,w
  1871     061E  00F0               	movwf	??_checkDP
  1872     061F  0770               	addwf	??_checkDP,w
  1873     0620  00FF               	movwf	btemp+1
  1874     0621  0871               	movf	checkDP@DP,w
  1875     0622  0084               	movwf	4
  1876     0623  087F               	movf	btemp+1,w
  1877     0624  0080               	movwf	0
  1878     0625                     l1280:
  1879                           
  1880                           ;tubes.c: 73:         send1ToDrivers();
  1881     0625  2521               	fcall	_send1ToDrivers
  1882                           
  1883                           ;tubes.c: 74:     } else {
  1884     0626  2E32               	goto	l236
  1885     0627                     l1282:
  1886                           
  1887                           ;tubes.c: 76:         *DP = (*DP) << 1;
  1888     0627  0871               	movf	checkDP@DP,w
  1889     0628  0084               	movwf	4
  1890     0629  0800               	movf	0,w
  1891     062A  00F0               	movwf	??_checkDP
  1892     062B  0770               	addwf	??_checkDP,w
  1893     062C  00FF               	movwf	btemp+1
  1894     062D  0871               	movf	checkDP@DP,w
  1895     062E  0084               	movwf	4
  1896     062F  087F               	movf	btemp+1,w
  1897     0630  0080               	movwf	0
  1898     0631                     l1284:
  1899                           
  1900                           ;tubes.c: 77:         send0ToDrivers();
  1901     0631  2517               	fcall	_send0ToDrivers
  1902     0632                     l236:
  1903     0632  0008               	return
  1904     0633                     __end_of_checkDP:
  1905                           
  1906                           	psect	text11
  1907     0521                     __ptext11:	
  1908 ;; *************** function _send1ToDrivers *****************
  1909 ;; Defined at:
  1910 ;;		line 122 in file "tubes.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1924 ;;      Params:         0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0
  1927 ;;      Totals:         0       0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_loadDisplay
  1934 ;;		_checkDP
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938     0521                     _send1ToDrivers:	
  1939                           ;psect for function _send1ToDrivers
  1940                           
  1941     0521                     l1222:	
  1942                           ;incstack = 0
  1943                           ; Regs used in _send1ToDrivers: [wreg+status,2]
  1944                           
  1945                           
  1946                           ;tubes.c: 123:     (PORTB_SHADOW |= (1<<0x4));
  1947     0521  1283               	bcf	3,5	;RP0=0, select bank0
  1948     0522  1303               	bcf	3,6	;RP1=0, select bank0
  1949     0523  1642               	bsf	_PORTB_SHADOW,4
  1950                           
  1951                           ;tubes.c: 124:     (PORTB_SHADOW |= (1<<0x2));
  1952     0524  1542               	bsf	_PORTB_SHADOW,2
  1953     0525                     l1224:
  1954                           
  1955                           ;tubes.c: 125:     PORTB = PORTB_SHADOW;
  1956     0525  0842               	movf	_PORTB_SHADOW,w
  1957     0526  0086               	movwf	6	;volatile
  1958     0527                     l1226:
  1959                           
  1960                           ;tubes.c: 126:     (PORTB_SHADOW &=(0<<0x2));
  1961     0527  01C2               	clrf	_PORTB_SHADOW
  1962     0528                     l1228:
  1963                           
  1964                           ;tubes.c: 127:     PORTB = PORTB_SHADOW;
  1965     0528  0842               	movf	_PORTB_SHADOW,w
  1966     0529  0086               	movwf	6	;volatile
  1967     052A                     l256:
  1968     052A  0008               	return
  1969     052B                     __end_of_send1ToDrivers:
  1970                           
  1971                           	psect	text12
  1972     0517                     __ptext12:	
  1973 ;; *************** function _send0ToDrivers *****************
  1974 ;; Defined at:
  1975 ;;		line 131 in file "tubes.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1989 ;;      Params:         0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0
  1992 ;;      Totals:         0       0       0       0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used: 1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_loadDisplay
  1999 ;;		_checkDP
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003     0517                     _send0ToDrivers:	
  2004                           ;psect for function _send0ToDrivers
  2005                           
  2006     0517                     l1230:	
  2007                           ;incstack = 0
  2008                           ; Regs used in _send0ToDrivers: [wreg+status,2]
  2009                           
  2010                           
  2011                           ;tubes.c: 132:     (PORTB_SHADOW &=(0<<0x4));
  2012     0517  1283               	bcf	3,5	;RP0=0, select bank0
  2013     0518  1303               	bcf	3,6	;RP1=0, select bank0
  2014     0519  01C2               	clrf	_PORTB_SHADOW
  2015     051A                     l1232:
  2016                           
  2017                           ;tubes.c: 133:     (PORTB_SHADOW |= (1<<0x2));
  2018     051A  1542               	bsf	_PORTB_SHADOW,2
  2019     051B                     l1234:
  2020                           
  2021                           ;tubes.c: 134:     PORTB = PORTB_SHADOW;
  2022     051B  0842               	movf	_PORTB_SHADOW,w
  2023     051C  0086               	movwf	6	;volatile
  2024     051D                     l1236:
  2025                           
  2026                           ;tubes.c: 135:     (PORTB_SHADOW &=(0<<0x2));
  2027     051D  01C2               	clrf	_PORTB_SHADOW
  2028                           
  2029                           ;tubes.c: 136:     PORTB = PORTB_SHADOW;
  2030     051E  0842               	movf	_PORTB_SHADOW,w
  2031     051F  0086               	movwf	6	;volatile
  2032     0520                     l259:
  2033     0520  0008               	return
  2034     0521                     __end_of_send0ToDrivers:
  2035                           
  2036                           	psect	text13
  2037     04EC                     __ptext13:	
  2038 ;; *************** function _display *****************
  2039 ;; Defined at:
  2040 ;;		line 90 in file "tubes.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;		None
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2054 ;;      Params:         0       0       0       0       0
  2055 ;;      Locals:         0       0       0       0       0
  2056 ;;      Temps:          0       0       0       0       0
  2057 ;;      Totals:         0       0       0       0       0
  2058 ;;Total ram usage:        0 bytes
  2059 ;; Hardware stack levels used: 1
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;;		_displayError666
  2065 ;;		_passTubeNum
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069     04EC                     _display:	
  2070                           ;psect for function _display
  2071                           
  2072     04EC                     l1340:	
  2073                           ;incstack = 0
  2074                           ; Regs used in _display: [wreg]
  2075                           
  2076                           
  2077                           ;tubes.c: 91:     (PORTB_SHADOW |= (1<<0x1));
  2078     04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2079     04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2080     04EE  14C2               	bsf	_PORTB_SHADOW,1
  2081                           
  2082                           ;tubes.c: 92:     (PORTB_SHADOW |= (1<<0x3));
  2083     04EF  15C2               	bsf	_PORTB_SHADOW,3
  2084     04F0                     l1342:
  2085                           
  2086                           ;tubes.c: 93:     PORTB = PORTB_SHADOW;
  2087     04F0  0842               	movf	_PORTB_SHADOW,w
  2088     04F1  0086               	movwf	6	;volatile
  2089     04F2                     l242:
  2090     04F2  0008               	return
  2091     04F3                     __end_of_display:
  2092                           
  2093                           	psect	text14
  2094     06FC                     __ptext14:	
  2095 ;; *************** function _Init *****************
  2096 ;; Defined at:
  2097 ;;		line 63 in file "main.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  clockTest       1   11[COMMON] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2111 ;;      Params:         0       0       0       0       0
  2112 ;;      Locals:         1       0       0       0       0
  2113 ;;      Temps:          1       0       0       0       0
  2114 ;;      Totals:         2       0       0       0       0
  2115 ;;Total ram usage:        2 bytes
  2116 ;; Hardware stack levels used: 1
  2117 ;; Hardware stack levels required when called: 4
  2118 ;; This function calls:
  2119 ;;		_InitI2C
  2120 ;;		_InitTubes
  2121 ;;		_checkRTCType
  2122 ;;		_isRTCRunning
  2123 ;;		_readByteRTC
  2124 ;;		_startRTC
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130     06FC                     _Init:	
  2131                           ;psect for function _Init
  2132                           
  2133     06FC                     l1444:	
  2134                           ;incstack = 0
  2135                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2136                           
  2137                           
  2138                           ;main.c: 64:     unsigned char clockTest;;main.c: 65:     CMCON = 0b111;
  2139     06FC  3007               	movlw	7
  2140     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2141     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  2142     06FF  009F               	movwf	31	;volatile
  2143                           
  2144                           ;main.c: 66:     TRISA = 0b00101111;
  2145     0700  302F               	movlw	47
  2146     0701  1683               	bsf	3,5	;RP0=1, select bank1
  2147     0702  1303               	bcf	3,6	;RP1=0, select bank1
  2148     0703  0085               	movwf	5	;volatile
  2149     0704                     l1446:
  2150                           
  2151                           ;main.c: 67:     TRISB = 0b00000000;
  2152     0704  0186               	clrf	6	;volatile
  2153     0705                     l1448:
  2154                           
  2155                           ;main.c: 68:     OPTION_REG = 0b11011111;
  2156     0705  30DF               	movlw	223
  2157     0706  0081               	movwf	1	;volatile
  2158                           
  2159                           ;main.c: 69:     PORTA_SHADOW = 0x00;
  2160     0707  01A0               	clrf	_PORTA_SHADOW^(0+128)
  2161                           
  2162                           ;main.c: 70:     PORTB_SHADOW = 0x00;
  2163     0708  1283               	bcf	3,5	;RP0=0, select bank0
  2164     0709  1303               	bcf	3,6	;RP1=0, select bank0
  2165     070A  01C2               	clrf	_PORTB_SHADOW
  2166     070B                     l1450:
  2167                           
  2168                           ;main.c: 71:     PORTB = PORTB_SHADOW;
  2169     070B  0842               	movf	_PORTB_SHADOW,w
  2170     070C  0086               	movwf	6	;volatile
  2171     070D                     l1452:
  2172                           
  2173                           ;main.c: 72:     flag = 0x00;
  2174     070D  01C3               	clrf	_flag
  2175     070E                     l1454:
  2176                           
  2177                           ;main.c: 73:     ErrFlag = 0x00;
  2178     070E  01C1               	clrf	_ErrFlag
  2179     070F                     l1456:
  2180                           
  2181                           ;main.c: 74:     InitI2C();
  2182     070F  24FB               	fcall	_InitI2C
  2183     0710                     l1458:
  2184                           
  2185                           ;main.c: 75:     InitTubes();
  2186     0710  24CF               	fcall	_InitTubes
  2187     0711                     l1460:
  2188                           
  2189                           ;main.c: 77:     if(isRTCRunning()) {
  2190     0711  2537               	fcall	_isRTCRunning
  2191     0712  1C03               	btfss	3,0
  2192     0713  2F15               	goto	u601
  2193     0714  2F16               	goto	u600
  2194     0715                     u601:
  2195     0715  2F2A               	goto	l1468
  2196     0716                     u600:
  2197     0716                     l1462:
  2198                           
  2199                           ;main.c: 78:         startRTC();
  2200     0716  25A7               	fcall	_startRTC
  2201                           
  2202                           ;main.c: 80:         clockTest = readByteRTC(0x00);
  2203     0717  3000               	movlw	0
  2204     0718  24F3               	fcall	_readByteRTC
  2205     0719  00FB               	movwf	Init@clockTest
  2206     071A                     l1464:
  2207                           
  2208                           ;main.c: 81:         if(((clockTest)>>(7) & 1)) {
  2209     071A  087B               	movf	Init@clockTest,w
  2210     071B  00FA               	movwf	??_Init
  2211     071C  3007               	movlw	7
  2212     071D                     u615:
  2213     071D  1003               	clrc
  2214     071E  0CFA               	rrf	??_Init,f
  2215     071F  3EFF               	addlw	-1
  2216     0720  1D03               	skipz
  2217     0721  2F1D               	goto	u615
  2218     0722  1C7A               	btfss	??_Init,0
  2219     0723  2F25               	goto	u621
  2220     0724  2F26               	goto	u620
  2221     0725                     u621:
  2222     0725  2F40               	goto	l72
  2223     0726                     u620:
  2224     0726                     l1466:
  2225                           
  2226                           ;main.c: 82:             (ErrFlag |= (1<<1));
  2227     0726  1283               	bcf	3,5	;RP0=0, select bank0
  2228     0727  1303               	bcf	3,6	;RP1=0, select bank0
  2229     0728  14C1               	bsf	_ErrFlag,1
  2230     0729  2F40               	goto	l72
  2231     072A                     l1468:
  2232                           
  2233                           ;main.c: 85:         if(checkRTCType()) {
  2234     072A  2633               	fcall	_checkRTCType
  2235     072B  1C03               	btfss	3,0
  2236     072C  2F2E               	goto	u631
  2237     072D  2F2F               	goto	u630
  2238     072E                     u631:
  2239     072E  2F40               	goto	l72
  2240     072F                     u630:
  2241     072F                     l1470:
  2242                           
  2243                           ;main.c: 86:             startRTC();
  2244     072F  25A7               	fcall	_startRTC
  2245                           
  2246                           ;main.c: 88:             clockTest = readByteRTC(0x0F);
  2247     0730  300F               	movlw	15
  2248     0731  24F3               	fcall	_readByteRTC
  2249     0732  00FB               	movwf	Init@clockTest
  2250     0733                     l1472:
  2251                           
  2252                           ;main.c: 89:             if(((clockTest)>>(7) & 1)) {
  2253     0733  087B               	movf	Init@clockTest,w
  2254     0734  00FA               	movwf	??_Init
  2255     0735  3007               	movlw	7
  2256     0736                     u645:
  2257     0736  1003               	clrc
  2258     0737  0CFA               	rrf	??_Init,f
  2259     0738  3EFF               	addlw	-1
  2260     0739  1D03               	skipz
  2261     073A  2F36               	goto	u645
  2262     073B  1C7A               	btfss	??_Init,0
  2263     073C  2F3E               	goto	u651
  2264     073D  2F3F               	goto	u650
  2265     073E                     u651:
  2266     073E  2F40               	goto	l72
  2267     073F                     u650:
  2268     073F  2F26               	goto	l1466
  2269     0740                     l72:
  2270     0740  0008               	return
  2271     0741                     __end_of_Init:
  2272                           
  2273                           	psect	text15
  2274     05A7                     __ptext15:	
  2275 ;; *************** function _startRTC *****************
  2276 ;; Defined at:
  2277 ;;		line 69 in file "RTC.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2291 ;;      Params:         0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0
  2294 ;;      Totals:         0       0       0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; Hardware stack levels required when called: 2
  2298 ;; This function calls:
  2299 ;;		_endWriteRTC
  2300 ;;		_reqWriteRTC
  2301 ;;		_writeDataRTC
  2302 ;; This function is called by:
  2303 ;;		_Init
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307     05A7                     _startRTC:	
  2308                           ;psect for function _startRTC
  2309                           
  2310     05A7                     l1388:	
  2311                           ;incstack = 0
  2312                           ; Regs used in _startRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2313                           
  2314                           
  2315                           ;RTC.c: 70:     reqWriteRTC(0x00);
  2316     05A7  3000               	movlw	0
  2317     05A8  24DE               	fcall	_reqWriteRTC
  2318                           
  2319                           ;RTC.c: 71:     writeDataRTC(0x00);
  2320     05A9  3000               	movlw	0
  2321     05AA  24D6               	fcall	_writeDataRTC
  2322                           
  2323                           ;RTC.c: 73:     writeDataRTC(0x30);
  2324     05AB  3030               	movlw	48
  2325     05AC  24D6               	fcall	_writeDataRTC
  2326                           
  2327                           ;RTC.c: 74:     writeDataRTC(0x12);
  2328     05AD  3012               	movlw	18
  2329     05AE  24D6               	fcall	_writeDataRTC
  2330                           
  2331                           ;RTC.c: 75:     writeDataRTC(0x28);
  2332     05AF  3028               	movlw	40
  2333     05B0  24D6               	fcall	_writeDataRTC
  2334                           
  2335                           ;RTC.c: 76:     writeDataRTC(0x7);
  2336     05B1  3007               	movlw	7
  2337     05B2  24D6               	fcall	_writeDataRTC
  2338                           
  2339                           ;RTC.c: 77:     writeDataRTC(0x10);
  2340     05B3  3010               	movlw	16
  2341     05B4  24D6               	fcall	_writeDataRTC
  2342     05B5                     l1390:
  2343                           
  2344                           ;RTC.c: 78:     endWriteRTC();
  2345     05B5  24D1               	fcall	_endWriteRTC
  2346     05B6                     l1392:
  2347                           
  2348                           ;RTC.c: 80:     reqWriteRTC(0x14);
  2349     05B6  3014               	movlw	20
  2350     05B7  24DE               	fcall	_reqWriteRTC
  2351     05B8                     l1394:
  2352                           
  2353                           ;RTC.c: 81:     writeDataRTC(0x00);
  2354     05B8  3000               	movlw	0
  2355     05B9  24D6               	fcall	_writeDataRTC
  2356     05BA                     l1396:
  2357                           
  2358                           ;RTC.c: 82:     writeDataRTC(0x00);
  2359     05BA  3000               	movlw	0
  2360     05BB  24D6               	fcall	_writeDataRTC
  2361                           
  2362                           ;RTC.c: 83:     endWriteRTC();
  2363     05BC  24D1               	fcall	_endWriteRTC
  2364     05BD                     l169:
  2365     05BD  0008               	return
  2366     05BE                     __end_of_startRTC:
  2367                           
  2368                           	psect	text16
  2369     0537                     __ptext16:	
  2370 ;; *************** function _isRTCRunning *****************
  2371 ;; Defined at:
  2372 ;;		line 62 in file "RTC.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  data            1    9[COMMON] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;		None               void
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2386 ;;      Params:         0       0       0       0       0
  2387 ;;      Locals:         1       0       0       0       0
  2388 ;;      Temps:          1       0       0       0       0
  2389 ;;      Totals:         2       0       0       0       0
  2390 ;;Total ram usage:        2 bytes
  2391 ;; Hardware stack levels used: 1
  2392 ;; Hardware stack levels required when called: 3
  2393 ;; This function calls:
  2394 ;;		_readByteRTC
  2395 ;; This function is called by:
  2396 ;;		_Init
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400     0537                     _isRTCRunning:	
  2401                           ;psect for function _isRTCRunning
  2402                           
  2403     0537                     l1382:	
  2404                           ;incstack = 0
  2405                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2406                           
  2407                           
  2408                           ;RTC.c: 63:     unsigned char data;;RTC.c: 64:     data = readByteRTC(0x00);
  2409     0537  3000               	movlw	0
  2410     0538  24F3               	fcall	_readByteRTC
  2411     0539  00F9               	movwf	isRTCRunning@data
  2412     053A                     l1384:
  2413                           
  2414                           ;RTC.c: 65:     return ((data)>>(7) & 1);
  2415     053A  0879               	movf	isRTCRunning@data,w
  2416     053B  00F8               	movwf	??_isRTCRunning
  2417     053C  3007               	movlw	7
  2418     053D                     u545:
  2419     053D  1003               	clrc
  2420     053E  0CF8               	rrf	??_isRTCRunning,f
  2421     053F  3EFF               	addlw	-1
  2422     0540  1D03               	skipz
  2423     0541  2D3D               	goto	u545
  2424     0542  0C78               	rrf	??_isRTCRunning,w
  2425     0543                     l166:
  2426     0543  0008               	return
  2427     0544                     __end_of_isRTCRunning:
  2428                           
  2429                           	psect	text17
  2430     0633                     __ptext17:	
  2431 ;; *************** function _checkRTCType *****************
  2432 ;; Defined at:
  2433 ;;		line 87 in file "RTC.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  data            1    9[COMMON] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;		None               void
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2447 ;;      Params:         0       0       0       0       0
  2448 ;;      Locals:         1       0       0       0       0
  2449 ;;      Temps:          1       0       0       0       0
  2450 ;;      Totals:         2       0       0       0       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used: 1
  2453 ;; Hardware stack levels required when called: 3
  2454 ;; This function calls:
  2455 ;;		_readByteRTC
  2456 ;;		_writeByteRTC
  2457 ;; This function is called by:
  2458 ;;		_Init
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462     0633                     _checkRTCType:	
  2463                           ;psect for function _checkRTCType
  2464                           
  2465     0633                     l1398:	
  2466                           ;incstack = 0
  2467                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2468                           
  2469                           
  2470                           ;RTC.c: 88:     unsigned char data;;RTC.c: 89:     data = readByteRTC(0x0F);
  2471     0633  300F               	movlw	15
  2472     0634  24F3               	fcall	_readByteRTC
  2473     0635  00F9               	movwf	checkRTCType@data
  2474     0636                     l1400:
  2475                           
  2476                           ;RTC.c: 90:     if(((data)>>(7) & 1)) {
  2477     0636  0879               	movf	checkRTCType@data,w
  2478     0637  00F8               	movwf	??_checkRTCType
  2479     0638  3007               	movlw	7
  2480     0639                     u555:
  2481     0639  1003               	clrc
  2482     063A  0CF8               	rrf	??_checkRTCType,f
  2483     063B  3EFF               	addlw	-1
  2484     063C  1D03               	skipz
  2485     063D  2E39               	goto	u555
  2486     063E  1C78               	btfss	??_checkRTCType,0
  2487     063F  2E41               	goto	u561
  2488     0640  2E42               	goto	u560
  2489     0641                     u561:
  2490     0641  2E5A               	goto	l1422
  2491     0642                     u560:
  2492     0642                     l1402:
  2493                           
  2494                           ;RTC.c: 93:         (data &=(0<<0));
  2495     0642  01F9               	clrf	checkRTCType@data
  2496     0643                     l1404:
  2497                           
  2498                           ;RTC.c: 94:         writeByteRTC(0x0F,data);
  2499     0643  01F6               	clrf	writeByteRTC@data
  2500     0644  300F               	movlw	15
  2501     0645  24E5               	fcall	_writeByteRTC
  2502     0646                     l1406:
  2503                           
  2504                           ;RTC.c: 95:         (data |= (1<<0));
  2505     0646  1479               	bsf	checkRTCType@data,0
  2506     0647                     l1408:
  2507                           
  2508                           ;RTC.c: 96:         writeByteRTC(0x0F,data);
  2509     0647  0879               	movf	checkRTCType@data,w
  2510     0648  00F6               	movwf	writeByteRTC@data
  2511     0649  300F               	movlw	15
  2512     064A  24E5               	fcall	_writeByteRTC
  2513     064B                     l1410:
  2514                           
  2515                           ;RTC.c: 97:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  2516     064B  2E4C               	nop2	;2 cycle nop
  2517     064C  2E4D               	nop2	;2 cycle nop
  2518     064D  0000               	nop
  2519     064E                     l1412:
  2520                           
  2521                           ;RTC.c: 98:         data = readByteRTC(0x0F);
  2522     064E  300F               	movlw	15
  2523     064F  24F3               	fcall	_readByteRTC
  2524     0650  00F9               	movwf	checkRTCType@data
  2525     0651                     l1414:
  2526                           
  2527                           ;RTC.c: 99:         if(!((data)>>(0) & 1)) {
  2528     0651  1879               	btfsc	checkRTCType@data,0
  2529     0652  2E54               	goto	u571
  2530     0653  2E55               	goto	u570
  2531     0654                     u571:
  2532     0654  2E5A               	goto	l1422
  2533     0655                     u570:
  2534     0655                     l1416:
  2535                           
  2536                           ;RTC.c: 100:             writeByteRTC(0x0F, 0x00);
  2537     0655  01F6               	clrf	writeByteRTC@data
  2538     0656  300F               	movlw	15
  2539     0657  24E5               	fcall	_writeByteRTC
  2540     0658                     l1418:
  2541                           
  2542                           ;RTC.c: 101:             return 1;
  2543     0658  1403               	setc
  2544     0659  2E5B               	goto	l174
  2545     065A                     l1422:
  2546                           
  2547                           ;RTC.c: 104:     return 0;
  2548     065A  1003               	clrc
  2549     065B                     l174:
  2550     065B  0008               	return
  2551     065C                     __end_of_checkRTCType:
  2552                           
  2553                           	psect	text18
  2554     04E5                     __ptext18:	
  2555 ;; *************** function _writeByteRTC *****************
  2556 ;; Defined at:
  2557 ;;		line 55 in file "RTC.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  address         1    wreg     unsigned char 
  2560 ;;  data            1    6[COMMON] unsigned char 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  address         1    7[COMMON] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2572 ;;      Params:         1       0       0       0       0
  2573 ;;      Locals:         1       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0
  2575 ;;      Totals:         2       0       0       0       0
  2576 ;;Total ram usage:        2 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 2
  2579 ;; This function calls:
  2580 ;;		_endWriteRTC
  2581 ;;		_reqWriteRTC
  2582 ;;		_writeDataRTC
  2583 ;; This function is called by:
  2584 ;;		_checkRTCType
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588     04E5                     _writeByteRTC:	
  2589                           ;psect for function _writeByteRTC
  2590                           
  2591                           
  2592                           ;incstack = 0
  2593                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2594                           ;writeByteRTC@address stored from wreg
  2595     04E5  00F7               	movwf	writeByteRTC@address
  2596     04E6                     l1356:
  2597                           
  2598                           ;RTC.c: 56:     reqWriteRTC(address);
  2599     04E6  0877               	movf	writeByteRTC@address,w
  2600     04E7  24DE               	fcall	_reqWriteRTC
  2601                           
  2602                           ;RTC.c: 57:     writeDataRTC(data);
  2603     04E8  0876               	movf	writeByteRTC@data,w
  2604     04E9  24D6               	fcall	_writeDataRTC
  2605     04EA                     l1358:
  2606                           
  2607                           ;RTC.c: 58:     endWriteRTC();
  2608     04EA  24D1               	fcall	_endWriteRTC
  2609     04EB                     l163:
  2610     04EB  0008               	return
  2611     04EC                     __end_of_writeByteRTC:
  2612                           
  2613                           	psect	text19
  2614     04D6                     __ptext19:	
  2615 ;; *************** function _writeDataRTC *****************
  2616 ;; Defined at:
  2617 ;;		line 45 in file "RTC.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  data            1    wreg     unsigned char 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  data            1    5[COMMON] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0       0
  2632 ;;      Locals:         1       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0
  2634 ;;      Totals:         1       0       0       0       0
  2635 ;;Total ram usage:        1 bytes
  2636 ;; Hardware stack levels used: 1
  2637 ;; Hardware stack levels required when called: 1
  2638 ;; This function calls:
  2639 ;;		_I2C_WriteByte
  2640 ;; This function is called by:
  2641 ;;		_writeByteRTC
  2642 ;;		_startRTC
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646     04D6                     _writeDataRTC:	
  2647                           ;psect for function _writeDataRTC
  2648                           
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2652                           ;writeDataRTC@data stored from wreg
  2653     04D6  00F5               	movwf	writeDataRTC@data
  2654     04D7                     l1272:
  2655                           
  2656                           ;RTC.c: 46:     I2C_WriteByte(data);
  2657     04D7  0875               	movf	writeDataRTC@data,w
  2658     04D8  2741               	fcall	_I2C_WriteByte
  2659     04D9                     l157:
  2660     04D9  0008               	return
  2661     04DA                     __end_of_writeDataRTC:
  2662                           
  2663                           	psect	text20
  2664     04DE                     __ptext20:	
  2665 ;; *************** function _reqWriteRTC *****************
  2666 ;; Defined at:
  2667 ;;		line 38 in file "RTC.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  address         1    wreg     unsigned char 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  address         1    5[COMMON] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         1       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0
  2684 ;;      Totals:         1       0       0       0       0
  2685 ;;Total ram usage:        1 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 1
  2688 ;; This function calls:
  2689 ;;		_I2C_Start
  2690 ;;		_I2C_WriteByte
  2691 ;; This function is called by:
  2692 ;;		_writeByteRTC
  2693 ;;		_startRTC
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697     04DE                     _reqWriteRTC:	
  2698                           ;psect for function _reqWriteRTC
  2699                           
  2700                           
  2701                           ;incstack = 0
  2702                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2703                           ;reqWriteRTC@address stored from wreg
  2704     04DE  00F5               	movwf	reqWriteRTC@address
  2705     04DF                     l1266:
  2706                           
  2707                           ;RTC.c: 39:     I2C_Start();
  2708     04DF  2544               	fcall	_I2C_Start
  2709     04E0                     l1268:
  2710                           
  2711                           ;RTC.c: 40:     I2C_WriteByte(0b11010000);
  2712     04E0  30D0               	movlw	208
  2713     04E1  2741               	fcall	_I2C_WriteByte
  2714     04E2                     l1270:
  2715                           
  2716                           ;RTC.c: 41:     I2C_WriteByte(address);
  2717     04E2  0875               	movf	reqWriteRTC@address,w
  2718     04E3  2741               	fcall	_I2C_WriteByte
  2719     04E4                     l154:
  2720     04E4  0008               	return
  2721     04E5                     __end_of_reqWriteRTC:
  2722                           
  2723                           	psect	text21
  2724     04D1                     __ptext21:	
  2725 ;; *************** function _endWriteRTC *****************
  2726 ;; Defined at:
  2727 ;;		line 50 in file "RTC.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2741 ;;      Params:         0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0
  2743 ;;      Temps:          0       0       0       0       0
  2744 ;;      Totals:         0       0       0       0       0
  2745 ;;Total ram usage:        0 bytes
  2746 ;; Hardware stack levels used: 1
  2747 ;; Hardware stack levels required when called: 1
  2748 ;; This function calls:
  2749 ;;		_I2C_Stop
  2750 ;; This function is called by:
  2751 ;;		_writeByteRTC
  2752 ;;		_startRTC
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756     04D1                     _endWriteRTC:	
  2757                           ;psect for function _endWriteRTC
  2758                           
  2759     04D1                     l1274:	
  2760                           ;incstack = 0
  2761                           ; Regs used in _endWriteRTC: [status,2+status,0+pclath+cstack]
  2762                           
  2763                           
  2764                           ;RTC.c: 51:     I2C_Stop();
  2765     04D1  2570               	fcall	_I2C_Stop
  2766     04D2                     l160:
  2767     04D2  0008               	return
  2768     04D3                     __end_of_endWriteRTC:
  2769                           
  2770                           	psect	text22
  2771     04F3                     __ptext22:	
  2772 ;; *************** function _readByteRTC *****************
  2773 ;; Defined at:
  2774 ;;		line 29 in file "RTC.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  address         1    wreg     unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  address         1    6[COMMON] unsigned char 
  2779 ;;  data            1    7[COMMON] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2789 ;;      Params:         0       0       0       0       0
  2790 ;;      Locals:         2       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0
  2792 ;;      Totals:         2       0       0       0       0
  2793 ;;Total ram usage:        2 bytes
  2794 ;; Hardware stack levels used: 1
  2795 ;; Hardware stack levels required when called: 2
  2796 ;; This function calls:
  2797 ;;		_I2C_ReadByte
  2798 ;;		_endReadRTC
  2799 ;;		_reqReadRTC
  2800 ;; This function is called by:
  2801 ;;		_Init
  2802 ;;		_isRTCRunning
  2803 ;;		_checkRTCType
  2804 ;;		_getTime
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808     04F3                     _readByteRTC:	
  2809                           ;psect for function _readByteRTC
  2810                           
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2814                           ;readByteRTC@address stored from wreg
  2815     04F3  00F6               	movwf	readByteRTC@address
  2816     04F4                     l1344:
  2817     04F4                     l1346:
  2818                           
  2819                           ;RTC.c: 31:     reqReadRTC(address);
  2820     04F4  0876               	movf	readByteRTC@address,w
  2821     04F5  250D               	fcall	_reqReadRTC
  2822     04F6                     l1348:
  2823                           
  2824                           ;RTC.c: 32:     data = I2C_ReadByte();
  2825     04F6  265C               	fcall	_I2C_ReadByte
  2826     04F7  00F7               	movwf	readByteRTC@data
  2827     04F8                     l1350:
  2828                           
  2829                           ;RTC.c: 33:     endReadRTC();
  2830     04F8  24D3               	fcall	_endReadRTC
  2831     04F9                     l1352:
  2832                           
  2833                           ;RTC.c: 34:     return data;
  2834     04F9  0877               	movf	readByteRTC@data,w
  2835     04FA                     l151:
  2836     04FA  0008               	return
  2837     04FB                     __end_of_readByteRTC:
  2838                           
  2839                           	psect	text23
  2840     050D                     __ptext23:	
  2841 ;; *************** function _reqReadRTC *****************
  2842 ;; Defined at:
  2843 ;;		line 6 in file "RTC.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  address         1    wreg     unsigned char 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  address         1    5[COMMON] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2857 ;;      Params:         0       0       0       0       0
  2858 ;;      Locals:         1       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0
  2860 ;;      Totals:         1       0       0       0       0
  2861 ;;Total ram usage:        1 bytes
  2862 ;; Hardware stack levels used: 1
  2863 ;; Hardware stack levels required when called: 1
  2864 ;; This function calls:
  2865 ;;		_I2C_ReStart
  2866 ;;		_I2C_Start
  2867 ;;		_I2C_WriteByte
  2868 ;; This function is called by:
  2869 ;;		_readByteRTC
  2870 ;;		_getTime
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874     050D                     _reqReadRTC:	
  2875                           ;psect for function _reqReadRTC
  2876                           
  2877                           
  2878                           ;incstack = 0
  2879                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2880                           ;reqReadRTC@address stored from wreg
  2881     050D  00F5               	movwf	reqReadRTC@address
  2882     050E                     l1256:
  2883                           
  2884                           ;RTC.c: 7:     I2C_Start();
  2885     050E  2544               	fcall	_I2C_Start
  2886     050F                     l1258:
  2887                           
  2888                           ;RTC.c: 8:     I2C_WriteByte(0b11010000);
  2889     050F  30D0               	movlw	208
  2890     0510  2741               	fcall	_I2C_WriteByte
  2891     0511                     l1260:
  2892                           
  2893                           ;RTC.c: 9:     I2C_WriteByte(address);
  2894     0511  0875               	movf	reqReadRTC@address,w
  2895     0512  2741               	fcall	_I2C_WriteByte
  2896                           
  2897                           ;RTC.c: 10:     I2C_ReStart();
  2898     0513  2581               	fcall	_I2C_ReStart
  2899     0514                     l1262:
  2900                           
  2901                           ;RTC.c: 11:     I2C_WriteByte(0b11010001);
  2902     0514  30D1               	movlw	209
  2903     0515  2741               	fcall	_I2C_WriteByte
  2904     0516                     l142:
  2905     0516  0008               	return
  2906     0517                     __end_of_reqReadRTC:
  2907                           
  2908                           	psect	text24
  2909     0741                     __ptext24:	
  2910 ;; *************** function _I2C_WriteByte *****************
  2911 ;; Defined at:
  2912 ;;		line 45 in file "IIC.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  Data            1    wreg     unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  Data            1    2[COMMON] unsigned char 
  2917 ;;  i               1    4[COMMON] unsigned char 
  2918 ;;  timer           1    3[COMMON] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0, btemp+1
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2928 ;;      Params:         0       0       0       0       0
  2929 ;;      Locals:         3       0       0       0       0
  2930 ;;      Temps:          2       0       0       0       0
  2931 ;;      Totals:         5       0       0       0       0
  2932 ;;Total ram usage:        5 bytes
  2933 ;; Hardware stack levels used: 1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_reqReadRTC
  2938 ;;		_reqWriteRTC
  2939 ;;		_writeDataRTC
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943     0741                     _I2C_WriteByte:	
  2944                           ;psect for function _I2C_WriteByte
  2945                           
  2946                           
  2947                           ;incstack = 0
  2948                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  2949                           ;I2C_WriteByte@Data stored from wreg
  2950     0741  00F2               	movwf	I2C_WriteByte@Data
  2951     0742                     l1194:
  2952                           
  2953                           ;IIC.c: 46:     unsigned char i;;IIC.c: 47:     for(i = 0; i<8; i++) {
  2954     0742  01F4               	clrf	I2C_WriteByte@i
  2955     0743                     l98:
  2956                           
  2957                           ;IIC.c: 48:         TRISAbits.TRISA0 = 0;
  2958     0743  1683               	bsf	3,5	;RP0=1, select bank1
  2959     0744  1303               	bcf	3,6	;RP1=0, select bank1
  2960     0745  1005               	bcf	5,0	;volatile
  2961                           
  2962                           ;IIC.c: 49:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2963     0746  2F47               	nop2	;2 cycle nop
  2964     0747                     l1200:
  2965                           
  2966                           ;IIC.c: 50:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  2967     0747  0A74               	incf	I2C_WriteByte@i,w
  2968     0748  00FF               	movwf	btemp+1
  2969     0749  0872               	movf	I2C_WriteByte@Data,w
  2970     074A  00F0               	movwf	??_I2C_WriteByte
  2971     074B  01F1               	clrf	??_I2C_WriteByte+1
  2972     074C  2F50               	goto	u384
  2973     074D                     u385:
  2974     074D  1003               	clrc
  2975     074E  0DF0               	rlf	??_I2C_WriteByte,f
  2976     074F  0DF1               	rlf	??_I2C_WriteByte+1,f
  2977     0750                     u384:
  2978     0750  0BFF               	decfsz	btemp+1,f
  2979     0751  2F4D               	goto	u385
  2980     0752  1BF0               	btfsc	??_I2C_WriteByte,7
  2981     0753  2F55               	goto	u391
  2982     0754  2F59               	goto	u390
  2983     0755                     u391:
  2984     0755  1683               	bsf	3,5	;RP0=1, select bank1
  2985     0756  1303               	bcf	3,6	;RP1=0, select bank1
  2986     0757  1485               	bsf	5,1	;volatile
  2987     0758  2F5C               	goto	u404
  2988     0759                     u390:
  2989     0759  1683               	bsf	3,5	;RP0=1, select bank1
  2990     075A  1303               	bcf	3,6	;RP1=0, select bank1
  2991     075B  1085               	bcf	5,1	;volatile
  2992     075C                     u404:
  2993     075C                     l1202:
  2994                           
  2995                           ;IIC.c: 51:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2996     075C  2F5D               	nop2	;2 cycle nop
  2997     075D                     l1204:
  2998                           
  2999                           ;IIC.c: 52:         TRISAbits.TRISA0 = 1;
  3000     075D  1683               	bsf	3,5	;RP0=1, select bank1
  3001     075E  1303               	bcf	3,6	;RP1=0, select bank1
  3002     075F  1405               	bsf	5,0	;volatile
  3003     0760                     l1206:
  3004                           
  3005                           ;IIC.c: 53:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3006     0760  2F61               	nop2	;2 cycle nop
  3007     0761  2F62               	nop2	;2 cycle nop
  3008     0762  0000               	nop
  3009                           
  3010                           ;IIC.c: 54:     }
  3011     0763  3001               	movlw	1
  3012     0764  00FF               	movwf	btemp+1
  3013     0765  087F               	movf	btemp+1,w
  3014     0766  07F4               	addwf	I2C_WriteByte@i,f
  3015     0767                     l1208:
  3016     0767  3008               	movlw	8
  3017     0768  0274               	subwf	I2C_WriteByte@i,w
  3018     0769  1C03               	skipc
  3019     076A  2F6C               	goto	u411
  3020     076B  2F6D               	goto	u410
  3021     076C                     u411:
  3022     076C  2F43               	goto	l98
  3023     076D                     u410:
  3024     076D                     l99:
  3025                           
  3026                           ;IIC.c: 57:     TRISAbits.TRISA0 = 0;
  3027     076D  1683               	bsf	3,5	;RP0=1, select bank1
  3028     076E  1303               	bcf	3,6	;RP1=0, select bank1
  3029     076F  1005               	bcf	5,0	;volatile
  3030                           
  3031                           ;IIC.c: 58:     TRISAbits.TRISA1 = 1;
  3032     0770  1485               	bsf	5,1	;volatile
  3033                           
  3034                           ;IIC.c: 59:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3035     0771  2F72               	nop2	;2 cycle nop
  3036     0772  2F73               	nop2	;2 cycle nop
  3037     0773  0000               	nop
  3038                           
  3039                           ;IIC.c: 60:     TRISAbits.TRISA0 = 1;
  3040     0774  1683               	bsf	3,5	;RP0=1, select bank1
  3041     0775  1303               	bcf	3,6	;RP1=0, select bank1
  3042     0776  1405               	bsf	5,0	;volatile
  3043                           
  3044                           ;IIC.c: 61:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3045     0777  2F78               	nop2	;2 cycle nop
  3046     0778  2F79               	nop2	;2 cycle nop
  3047     0779  0000               	nop
  3048     077A                     l1210:
  3049                           
  3050                           ;IIC.c: 64:     unsigned char timer = 255;
  3051     077A  30FF               	movlw	255
  3052     077B  00F3               	movwf	I2C_WriteByte@timer
  3053                           
  3054                           ;IIC.c: 65:     while(timer != 0) {
  3055     077C  2F88               	goto	l100
  3056     077D                     l101:
  3057                           
  3058                           ;IIC.c: 66:         if(!PORTAbits.RA1) {
  3059     077D  1283               	bcf	3,5	;RP0=0, select bank0
  3060     077E  1303               	bcf	3,6	;RP1=0, select bank0
  3061     077F  1885               	btfsc	5,1	;volatile
  3062     0780  2F82               	goto	u421
  3063     0781  2F83               	goto	u420
  3064     0782                     u421:
  3065     0782  2F85               	goto	l102
  3066     0783                     u420:
  3067     0783                     l1212:
  3068                           
  3069                           ;IIC.c: 68:             timer = 0;
  3070     0783  01F3               	clrf	I2C_WriteByte@timer
  3071                           
  3072                           ;IIC.c: 69:         } else {
  3073     0784  2F88               	goto	l100
  3074     0785                     l102:
  3075                           
  3076                           ;IIC.c: 70:             _delay((unsigned long)((1)*(4000000/4000000.0)));
  3077     0785  0000               	nop
  3078     0786                     l1214:
  3079                           
  3080                           ;IIC.c: 71:             timer--;
  3081     0786  3001               	movlw	1
  3082     0787  02F3               	subwf	I2C_WriteByte@timer,f
  3083     0788                     l100:	
  3084                           ;IIC.c: 73:     }
  3085                           
  3086                           
  3087                           ;IIC.c: 65:     while(timer != 0) {
  3088     0788  0873               	movf	I2C_WriteByte@timer,w
  3089     0789  1D03               	btfss	3,2
  3090     078A  2F8C               	goto	u431
  3091     078B  2F8D               	goto	u430
  3092     078C                     u431:
  3093     078C  2F7D               	goto	l101
  3094     078D                     u430:
  3095     078D                     l1216:
  3096                           
  3097                           ;IIC.c: 75:     if(timer == 0) {
  3098     078D  0873               	movf	I2C_WriteByte@timer,w
  3099     078E  1D03               	btfss	3,2
  3100     078F  2F91               	goto	u441
  3101     0790  2F92               	goto	u440
  3102     0791                     u441:
  3103     0791  2F95               	goto	l106
  3104     0792                     u440:
  3105     0792                     l1218:
  3106                           
  3107                           ;IIC.c: 76:         (ErrFlag |= (1<<0));
  3108     0792  1283               	bcf	3,5	;RP0=0, select bank0
  3109     0793  1303               	bcf	3,6	;RP1=0, select bank0
  3110     0794  1441               	bsf	_ErrFlag,0
  3111     0795                     l106:
  3112     0795  0008               	return
  3113     0796                     __end_of_I2C_WriteByte:
  3114                           
  3115                           	psect	text25
  3116     0544                     __ptext25:	
  3117 ;; *************** function _I2C_Start *****************
  3118 ;; Defined at:
  3119 ;;		line 13 in file "IIC.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		None
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3133 ;;      Params:         0       0       0       0       0
  3134 ;;      Locals:         0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0
  3136 ;;      Totals:         0       0       0       0       0
  3137 ;;Total ram usage:        0 bytes
  3138 ;; Hardware stack levels used: 1
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_reqReadRTC
  3143 ;;		_reqWriteRTC
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147     0544                     _I2C_Start:	
  3148                           ;psect for function _I2C_Start
  3149                           
  3150     0544                     l1188:	
  3151                           ;incstack = 0
  3152                           ; Regs used in _I2C_Start: []
  3153                           
  3154                           
  3155                           ;IIC.c: 14:     TRISAbits.TRISA0 = 1;
  3156     0544  1683               	bsf	3,5	;RP0=1, select bank1
  3157     0545  1303               	bcf	3,6	;RP1=0, select bank1
  3158     0546  1405               	bsf	5,0	;volatile
  3159                           
  3160                           ;IIC.c: 15:     TRISAbits.TRISA1 = 1;
  3161     0547  1485               	bsf	5,1	;volatile
  3162                           
  3163                           ;IIC.c: 16:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3164     0548  2D49               	nop2	;2 cycle nop
  3165     0549  2D4A               	nop2	;2 cycle nop
  3166     054A  0000               	nop
  3167                           
  3168                           ;IIC.c: 17:     TRISAbits.TRISA1 = 0;
  3169     054B  1683               	bsf	3,5	;RP0=1, select bank1
  3170     054C  1303               	bcf	3,6	;RP1=0, select bank1
  3171     054D  1085               	bcf	5,1	;volatile
  3172                           
  3173                           ;IIC.c: 18:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3174     054E  2D4F               	nop2	;2 cycle nop
  3175     054F  2D50               	nop2	;2 cycle nop
  3176     0550  0000               	nop
  3177     0551                     l89:
  3178     0551  0008               	return
  3179     0552                     __end_of_I2C_Start:
  3180                           
  3181                           	psect	text26
  3182     0581                     __ptext26:	
  3183 ;; *************** function _I2C_ReStart *****************
  3184 ;; Defined at:
  3185 ;;		line 22 in file "IIC.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		None
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3199 ;;      Params:         0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0
  3202 ;;      Totals:         0       0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_reqReadRTC
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212     0581                     _I2C_ReStart:	
  3213                           ;psect for function _I2C_ReStart
  3214                           
  3215     0581                     l1190:	
  3216                           ;incstack = 0
  3217                           ; Regs used in _I2C_ReStart: []
  3218                           
  3219                           
  3220                           ;IIC.c: 23:     TRISAbits.TRISA0 = 0;
  3221     0581  1683               	bsf	3,5	;RP0=1, select bank1
  3222     0582  1303               	bcf	3,6	;RP1=0, select bank1
  3223     0583  1005               	bcf	5,0	;volatile
  3224                           
  3225                           ;IIC.c: 24:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3226     0584  2D85               	nop2	;2 cycle nop
  3227                           
  3228                           ;IIC.c: 25:     TRISAbits.TRISA1 = 1;
  3229     0585  1683               	bsf	3,5	;RP0=1, select bank1
  3230     0586  1303               	bcf	3,6	;RP1=0, select bank1
  3231     0587  1485               	bsf	5,1	;volatile
  3232                           
  3233                           ;IIC.c: 26:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3234     0588  2D89               	nop2	;2 cycle nop
  3235                           
  3236                           ;IIC.c: 27:     TRISAbits.TRISA0 = 1;
  3237     0589  1683               	bsf	3,5	;RP0=1, select bank1
  3238     058A  1303               	bcf	3,6	;RP1=0, select bank1
  3239     058B  1405               	bsf	5,0	;volatile
  3240                           
  3241                           ;IIC.c: 28:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3242     058C  2D8D               	nop2	;2 cycle nop
  3243                           
  3244                           ;IIC.c: 29:     TRISAbits.TRISA1 = 0;
  3245     058D  1683               	bsf	3,5	;RP0=1, select bank1
  3246     058E  1303               	bcf	3,6	;RP1=0, select bank1
  3247     058F  1085               	bcf	5,1	;volatile
  3248                           
  3249                           ;IIC.c: 30:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3250     0590  2D91               	nop2	;2 cycle nop
  3251     0591                     l92:
  3252     0591  0008               	return
  3253     0592                     __end_of_I2C_ReStart:
  3254                           
  3255                           	psect	text27
  3256     04D3                     __ptext27:	
  3257 ;; *************** function _endReadRTC *****************
  3258 ;; Defined at:
  3259 ;;		line 23 in file "RTC.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		status,2, status,0, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3273 ;;      Params:         0       0       0       0       0
  3274 ;;      Locals:         0       0       0       0       0
  3275 ;;      Temps:          0       0       0       0       0
  3276 ;;      Totals:         0       0       0       0       0
  3277 ;;Total ram usage:        0 bytes
  3278 ;; Hardware stack levels used: 1
  3279 ;; Hardware stack levels required when called: 1
  3280 ;; This function calls:
  3281 ;;		_I2C_SendNACK
  3282 ;;		_I2C_Stop
  3283 ;; This function is called by:
  3284 ;;		_readByteRTC
  3285 ;;		_getTime
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289     04D3                     _endReadRTC:	
  3290                           ;psect for function _endReadRTC
  3291                           
  3292     04D3                     l1264:	
  3293                           ;incstack = 0
  3294                           ; Regs used in _endReadRTC: [status,2+status,0+pclath+cstack]
  3295                           
  3296                           
  3297                           ;RTC.c: 24:     I2C_SendNACK();
  3298     04D3  2552               	fcall	_I2C_SendNACK
  3299                           
  3300                           ;RTC.c: 25:     I2C_Stop();
  3301     04D4  2570               	fcall	_I2C_Stop
  3302     04D5                     l148:
  3303     04D5  0008               	return
  3304     04D6                     __end_of_endReadRTC:
  3305                           
  3306                           	psect	text28
  3307     0570                     __ptext28:	
  3308 ;; *************** function _I2C_Stop *****************
  3309 ;; Defined at:
  3310 ;;		line 34 in file "IIC.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		None
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3324 ;;      Params:         0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0
  3327 ;;      Totals:         0       0       0       0       0
  3328 ;;Total ram usage:        0 bytes
  3329 ;; Hardware stack levels used: 1
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		_endReadRTC
  3334 ;;		_endWriteRTC
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338     0570                     _I2C_Stop:	
  3339                           ;psect for function _I2C_Stop
  3340                           
  3341     0570                     l1192:	
  3342                           ;incstack = 0
  3343                           ; Regs used in _I2C_Stop: []
  3344                           
  3345                           
  3346                           ;IIC.c: 35:     TRISAbits.TRISA0 = 0;
  3347     0570  1683               	bsf	3,5	;RP0=1, select bank1
  3348     0571  1303               	bcf	3,6	;RP1=0, select bank1
  3349     0572  1005               	bcf	5,0	;volatile
  3350                           
  3351                           ;IIC.c: 36:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3352     0573  2D74               	nop2	;2 cycle nop
  3353                           
  3354                           ;IIC.c: 37:     TRISAbits.TRISA1 = 0;
  3355     0574  1683               	bsf	3,5	;RP0=1, select bank1
  3356     0575  1303               	bcf	3,6	;RP1=0, select bank1
  3357     0576  1085               	bcf	5,1	;volatile
  3358                           
  3359                           ;IIC.c: 38:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3360     0577  2D78               	nop2	;2 cycle nop
  3361                           
  3362                           ;IIC.c: 39:     TRISAbits.TRISA0 = 1;
  3363     0578  1683               	bsf	3,5	;RP0=1, select bank1
  3364     0579  1303               	bcf	3,6	;RP1=0, select bank1
  3365     057A  1405               	bsf	5,0	;volatile
  3366                           
  3367                           ;IIC.c: 40:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3368     057B  2D7C               	nop2	;2 cycle nop
  3369                           
  3370                           ;IIC.c: 41:     TRISAbits.TRISA1 = 1;
  3371     057C  1683               	bsf	3,5	;RP0=1, select bank1
  3372     057D  1303               	bcf	3,6	;RP1=0, select bank1
  3373     057E  1485               	bsf	5,1	;volatile
  3374                           
  3375                           ;IIC.c: 42:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3376     057F  2D80               	nop2	;2 cycle nop
  3377     0580                     l95:
  3378     0580  0008               	return
  3379     0581                     __end_of_I2C_Stop:
  3380                           
  3381                           	psect	text29
  3382     0552                     __ptext29:	
  3383 ;; *************** function _I2C_SendNACK *****************
  3384 ;; Defined at:
  3385 ;;		line 107 in file "IIC.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		None
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3399 ;;      Params:         0       0       0       0       0
  3400 ;;      Locals:         0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0
  3402 ;;      Totals:         0       0       0       0       0
  3403 ;;Total ram usage:        0 bytes
  3404 ;; Hardware stack levels used: 1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_endReadRTC
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412     0552                     _I2C_SendNACK:	
  3413                           ;psect for function _I2C_SendNACK
  3414                           
  3415     0552                     l1220:	
  3416                           ;incstack = 0
  3417                           ; Regs used in _I2C_SendNACK: []
  3418                           
  3419                           
  3420                           ;IIC.c: 108:     TRISAbits.TRISA0 = 0;
  3421     0552  1683               	bsf	3,5	;RP0=1, select bank1
  3422     0553  1303               	bcf	3,6	;RP1=0, select bank1
  3423     0554  1005               	bcf	5,0	;volatile
  3424                           
  3425                           ;IIC.c: 109:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3426     0555  2D56               	nop2	;2 cycle nop
  3427                           
  3428                           ;IIC.c: 110:     TRISAbits.TRISA1 = 1;
  3429     0556  1683               	bsf	3,5	;RP0=1, select bank1
  3430     0557  1303               	bcf	3,6	;RP1=0, select bank1
  3431     0558  1485               	bsf	5,1	;volatile
  3432                           
  3433                           ;IIC.c: 111:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3434     0559  2D5A               	nop2	;2 cycle nop
  3435                           
  3436                           ;IIC.c: 112:     TRISAbits.TRISA0 = 1;
  3437     055A  1683               	bsf	3,5	;RP0=1, select bank1
  3438     055B  1303               	bcf	3,6	;RP1=0, select bank1
  3439     055C  1405               	bsf	5,0	;volatile
  3440                           
  3441                           ;IIC.c: 113:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3442     055D  2D5E               	nop2	;2 cycle nop
  3443     055E  2D5F               	nop2	;2 cycle nop
  3444     055F  0000               	nop
  3445     0560                     l117:
  3446     0560  0008               	return
  3447     0561                     __end_of_I2C_SendNACK:
  3448                           
  3449                           	psect	text30
  3450     065C                     __ptext30:	
  3451 ;; *************** function _I2C_ReadByte *****************
  3452 ;; Defined at:
  3453 ;;		line 82 in file "IIC.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  i               1    2[COMMON] unsigned char 
  3458 ;;  Data            1    1[COMMON] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      unsigned char 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0, btemp+1
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3468 ;;      Params:         0       0       0       0       0
  3469 ;;      Locals:         2       0       0       0       0
  3470 ;;      Temps:          1       0       0       0       0
  3471 ;;      Totals:         3       0       0       0       0
  3472 ;;Total ram usage:        3 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; This function calls:
  3475 ;;		Nothing
  3476 ;; This function is called by:
  3477 ;;		_readDataRTC
  3478 ;;		_readByteRTC
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482     065C                     _I2C_ReadByte:	
  3483                           ;psect for function _I2C_ReadByte
  3484                           
  3485     065C                     l1238:	
  3486                           ;incstack = 0
  3487                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  3488                           
  3489                           
  3490                           ;IIC.c: 83:     unsigned char i, Data = 0;
  3491     065C  01F1               	clrf	I2C_ReadByte@Data
  3492                           
  3493                           ;IIC.c: 84:     for(i=0; i<8; i++) {
  3494     065D  01F2               	clrf	I2C_ReadByte@i
  3495     065E                     l109:
  3496                           
  3497                           ;IIC.c: 85:         TRISAbits.TRISA0 = 0;
  3498     065E  1683               	bsf	3,5	;RP0=1, select bank1
  3499     065F  1303               	bcf	3,6	;RP1=0, select bank1
  3500     0660  1005               	bcf	5,0	;volatile
  3501                           
  3502                           ;IIC.c: 86:         TRISAbits.TRISA1 = 1;
  3503     0661  1485               	bsf	5,1	;volatile
  3504                           
  3505                           ;IIC.c: 87:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3506     0662  2E63               	nop2	;2 cycle nop
  3507     0663  2E64               	nop2	;2 cycle nop
  3508     0664  0000               	nop
  3509                           
  3510                           ;IIC.c: 88:         TRISAbits.TRISA0 = 1;
  3511     0665  1683               	bsf	3,5	;RP0=1, select bank1
  3512     0666  1303               	bcf	3,6	;RP1=0, select bank1
  3513     0667  1405               	bsf	5,0	;volatile
  3514                           
  3515                           ;IIC.c: 89:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3516     0668  2E69               	nop2	;2 cycle nop
  3517     0669                     l1244:
  3518                           
  3519                           ;IIC.c: 90:         Data = Data|(PORTAbits.RA1<<(7-i));
  3520     0669  1283               	bcf	3,5	;RP0=0, select bank0
  3521     066A  1303               	bcf	3,6	;RP1=0, select bank0
  3522     066B  0C05               	rrf	5,w	;volatile
  3523     066C  3901               	andlw	1
  3524     066D  00F0               	movwf	??_I2C_ReadByte
  3525     066E  0872               	movf	I2C_ReadByte@i,w
  3526     066F  3C07               	sublw	7
  3527     0670  3E01               	addlw	1
  3528     0671  2E74               	goto	u454
  3529     0672                     u455:
  3530     0672  1003               	clrc
  3531     0673  0DF0               	rlf	??_I2C_ReadByte,f
  3532     0674                     u454:
  3533     0674  3EFF               	addlw	-1
  3534     0675  1D03               	skipz
  3535     0676  2E72               	goto	u455
  3536     0677  0870               	movf	??_I2C_ReadByte,w
  3537     0678  0471               	iorwf	I2C_ReadByte@Data,w
  3538     0679  00F1               	movwf	I2C_ReadByte@Data
  3539     067A                     l1246:
  3540                           
  3541                           ;IIC.c: 91:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3542     067A  2E7B               	nop2	;2 cycle nop
  3543     067B                     l1248:
  3544                           
  3545                           ;IIC.c: 92:     }
  3546     067B  3001               	movlw	1
  3547     067C  00FF               	movwf	btemp+1
  3548     067D  087F               	movf	btemp+1,w
  3549     067E  07F2               	addwf	I2C_ReadByte@i,f
  3550     067F                     l1250:
  3551     067F  3008               	movlw	8
  3552     0680  0272               	subwf	I2C_ReadByte@i,w
  3553     0681  1C03               	skipc
  3554     0682  2E84               	goto	u461
  3555     0683  2E85               	goto	u460
  3556     0684                     u461:
  3557     0684  2E5E               	goto	l109
  3558     0685                     u460:
  3559     0685                     l1252:
  3560                           
  3561                           ;IIC.c: 93:     return Data;
  3562     0685  0871               	movf	I2C_ReadByte@Data,w
  3563     0686                     l111:
  3564     0686  0008               	return
  3565     0687                     __end_of_I2C_ReadByte:
  3566                           
  3567                           	psect	text31
  3568     04CF                     __ptext31:	
  3569 ;; *************** function _InitTubes *****************
  3570 ;; Defined at:
  3571 ;;		line 18 in file "tubes.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3585 ;;      Params:         0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0
  3588 ;;      Totals:         0       0       0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used: 1
  3591 ;; Hardware stack levels required when called: 1
  3592 ;; This function calls:
  3593 ;;		_blankTubes
  3594 ;; This function is called by:
  3595 ;;		_Init
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599     04CF                     _InitTubes:	
  3600                           ;psect for function _InitTubes
  3601                           
  3602     04CF                     l1380:	
  3603                           ;incstack = 0
  3604                           ; Regs used in _InitTubes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3605                           
  3606                           
  3607                           ;tubes.c: 19:     blankTubes();
  3608     04CF  25F1               	fcall	_blankTubes
  3609     04D0                     l217:
  3610     04D0  0008               	return
  3611     04D1                     __end_of_InitTubes:
  3612                           
  3613                           	psect	text32
  3614     05F1                     __ptext32:	
  3615 ;; *************** function _blankTubes *****************
  3616 ;; Defined at:
  3617 ;;		line 101 in file "tubes.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;		None
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  i               1    1[COMMON] unsigned char 
  3622 ;;  ptr             1    0[COMMON] PTR unsigned char 
  3623 ;;		 -> T0(1), 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  1    wreg      void 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3633 ;;      Params:         0       0       0       0       0
  3634 ;;      Locals:         2       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0
  3636 ;;      Totals:         2       0       0       0       0
  3637 ;;Total ram usage:        2 bytes
  3638 ;; Hardware stack levels used: 1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_InitTubes
  3643 ;;		_displayError666
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647     05F1                     _blankTubes:	
  3648                           ;psect for function _blankTubes
  3649                           
  3650     05F1                     l1360:	
  3651                           ;incstack = 0
  3652                           ; Regs used in _blankTubes: [wreg-fsr0h+status,2+status,0+btemp+1]
  3653                           
  3654                           
  3655                           ;tubes.c: 102:     unsigned char *ptr;;tubes.c: 103:     ptr = &T0;
  3656     05F1  3022               	movlw	34
  3657     05F2  00F0               	movwf	blankTubes@ptr
  3658     05F3                     l1362:
  3659                           
  3660                           ;tubes.c: 105:     for(unsigned char i = 0; i < 8; i++) {
  3661     05F3  01F1               	clrf	blankTubes@i
  3662     05F4                     l1368:
  3663                           
  3664                           ;tubes.c: 106:         *ptr = 10;
  3665     05F4  0870               	movf	blankTubes@ptr,w
  3666     05F5  0084               	movwf	4
  3667     05F6  300A               	movlw	10
  3668     05F7  1383               	bcf	3,7	;select IRP bank0
  3669     05F8  0080               	movwf	0
  3670     05F9                     l1370:
  3671                           
  3672                           ;tubes.c: 107:         ptr++;
  3673     05F9  3001               	movlw	1
  3674     05FA  00FF               	movwf	btemp+1
  3675     05FB  087F               	movf	btemp+1,w
  3676     05FC  07F0               	addwf	blankTubes@ptr,f
  3677     05FD                     l1372:
  3678                           
  3679                           ;tubes.c: 108:     }
  3680     05FD  3001               	movlw	1
  3681     05FE  00FF               	movwf	btemp+1
  3682     05FF  087F               	movf	btemp+1,w
  3683     0600  07F1               	addwf	blankTubes@i,f
  3684     0601                     l1374:
  3685     0601  3008               	movlw	8
  3686     0602  0271               	subwf	blankTubes@i,w
  3687     0603  1C03               	skipc
  3688     0604  2E06               	goto	u531
  3689     0605  2E07               	goto	u530
  3690     0606                     u531:
  3691     0606  2DF4               	goto	l1368
  3692     0607                     u530:
  3693     0607                     l1376:
  3694                           
  3695                           ;tubes.c: 109:     leftDP = rightDP = 0x00;
  3696     0607  1283               	bcf	3,5	;RP0=0, select bank0
  3697     0608  1303               	bcf	3,6	;RP1=0, select bank0
  3698     0609  01BE               	clrf	_rightDP
  3699     060A  01BF               	clrf	_leftDP
  3700     060B                     l250:
  3701     060B  0008               	return
  3702     060C                     __end_of_blankTubes:
  3703                           
  3704                           	psect	text33
  3705     04FB                     __ptext33:	
  3706 ;; *************** function _InitI2C *****************
  3707 ;; Defined at:
  3708 ;;		line 4 in file "IIC.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		None
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3722 ;;      Params:         0       0       0       0       0
  3723 ;;      Locals:         0       0       0       0       0
  3724 ;;      Temps:          0       0       0       0       0
  3725 ;;      Totals:         0       0       0       0       0
  3726 ;;Total ram usage:        0 bytes
  3727 ;; Hardware stack levels used: 1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_Init
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735     04FB                     _InitI2C:	
  3736                           ;psect for function _InitI2C
  3737                           
  3738     04FB                     l1378:	
  3739                           ;incstack = 0
  3740                           ; Regs used in _InitI2C: []
  3741                           
  3742                           
  3743                           ;IIC.c: 5:     TRISAbits.TRISA0 = 0;
  3744     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3745     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  3746     04FD  1005               	bcf	5,0	;volatile
  3747                           
  3748                           ;IIC.c: 6:     TRISAbits.TRISA1 = 0;
  3749     04FE  1085               	bcf	5,1	;volatile
  3750                           
  3751                           ;IIC.c: 8:     PORTAbits.RA1 = 0;
  3752     04FF  1283               	bcf	3,5	;RP0=0, select bank0
  3753     0500  1303               	bcf	3,6	;RP1=0, select bank0
  3754     0501  1085               	bcf	5,1	;volatile
  3755                           
  3756                           ;IIC.c: 9:     PORTAbits.RA0 = 0;
  3757     0502  1005               	bcf	5,0	;volatile
  3758     0503                     l86:
  3759     0503  0008               	return
  3760     0504                     __end_of_InitI2C:
  3761     007E                     btemp	set	126	;btemp
  3762     007E                     wtemp0	set	126
  3763                           
  3764                           	psect	config
  3765                           
  3766                           ;Config register CONFIG @ 0x2007
  3767                           ;	Oscillator Selection bits
  3768                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  3769                           ;	Watchdog Timer Enable bit
  3770                           ;	WDTE = OFF, WDT disabled
  3771                           ;	Power-up Timer Enable bit
  3772                           ;	PWRTE = OFF, PWRT disabled
  3773                           ;	RA5/MCLR/VPP Pin Function Select bit
  3774                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  3775                           ;	Brown-out Detect Enable bit
  3776                           ;	BOREN = OFF, BOD disabled
  3777                           ;	Low-Voltage Programming Enable bit
  3778                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3779                           ;	Data EE Memory Code Protection bit
  3780                           ;	CPD = OFF, Data memory code protection off
  3781                           ;	Flash Program Memory Code Protection bit
  3782                           ;	CP = OFF, Code protection off
  3783     2007                     	org	8199
  3784     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0h           70     20      24
    BANK0l            2      0       2
    BANK1            80      0       1
    BANK2            48      0       0

Pointer List with Targets:

    blankTubes@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> T0(BITBANK0l[1]), 

    checkDP@DP	PTR unsigned char  size(1) Largest target is 1
		 -> loadDisplay@LDP(COMMON[1]), loadDisplay@RDP(COMMON[1]), 

    loadDisplay@tubePtr	PTR unsigned char  size(1) Largest target is 1
		 -> T7(BITBANK0h[1]), 


Critical Paths under _main in COMMON

    _main->_Init
    _getTime->_passTubeNum
    _readDataRTC->_I2C_ReadByte
    _passTubeNum->_loadDisplay
    _displayError666->_loadDisplay
    _loadDisplay->_checkDP
    _Init->_checkRTCType
    _Init->_isRTCRunning
    _startRTC->_reqWriteRTC
    _startRTC->_writeDataRTC
    _isRTCRunning->_readByteRTC
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte
    _InitTubes->_blankTubes

Critical Paths under _main in BANK0h

    _main->_getTime
    _getTime->_passTubeNum

Critical Paths under _main in BANK0l

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5336
                                             12 COMMON     2     2      0
                               _Init
                            _display
                    _displayError666
                            _getTime
                        _loadDisplay
                          _preLoadWL
 ---------------------------------------------------------------------------------
 (1) _preLoadWL                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTime                                             11    11      0    2349
                                              9 BANK0h    11    11      0
                        _I2C_SendACK
                         _endReadRTC
                        _passTubeNum
                        _readByteRTC
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (2) _swapNibbles                                          4     4      0      44
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0     137
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
 ---------------------------------------------------------------------------------
 (2) _passTubeNum                                         10     1      9    1302
                                              8 COMMON     1     1      0
                                              0 BANK0h     9     0      9
                            _display
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (2) _I2C_SendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displayError666                                      0     0      0     468
                         _blankTubes
                            _display
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (1) _loadDisplay                                          6     6      0     398
                                              2 COMMON     6     6      0
                            _checkDP
                              _latch
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (2) _latch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkDP                                              2     2      0     176
                                              0 COMMON     2     2      0
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (2) _send1ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _send0ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0    2096
                                             10 COMMON     2     2      0
                            _InitI2C
                          _InitTubes
                       _checkRTCType
                       _isRTCRunning
                        _readByteRTC
                           _startRTC
 ---------------------------------------------------------------------------------
 (2) _startRTC                                             0     0      0     318
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _isRTCRunning                                         2     2      0     342
                                              8 COMMON     2     2      0
                        _readByteRTC
 ---------------------------------------------------------------------------------
 (2) _checkRTCType                                         2     2      0    1001
                                              8 COMMON     2     2      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (3) _writeByteRTC                                         2     1      1     590
                                              6 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (3) _writeDataRTC                                         1     1      0     159
                                              5 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _reqWriteRTC                                          1     1      0     159
                                              5 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _readByteRTC                                          2     2      0     319
                                              6 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _reqReadRTC                                           1     1      0     159
                                              5 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteByte                                        5     5      0     137
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_SendNACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadByte                                         3     3      0     114
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitTubes                                            0     0      0      70
                         _blankTubes
 ---------------------------------------------------------------------------------
 (2) _blankTubes                                           2     2      0      70
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
     _InitI2C
     _InitTubes
       _blankTubes
     _checkRTCType
       _readByteRTC
         _I2C_ReadByte
         _endReadRTC
           _I2C_SendNACK
           _I2C_Stop
         _reqReadRTC
           _I2C_ReStart
           _I2C_Start
           _I2C_WriteByte
       _writeByteRTC
         _endWriteRTC
           _I2C_Stop
         _reqWriteRTC
           _I2C_Start
           _I2C_WriteByte
         _writeDataRTC
           _I2C_WriteByte
     _isRTCRunning
       _readByteRTC
     _readByteRTC
     _startRTC
       _endWriteRTC
       _reqWriteRTC
       _writeDataRTC
   _display
   _displayError666
     _blankTubes
     _display
     _loadDisplay
       _checkDP
         _send0ToDrivers
         _send1ToDrivers
       _latch
       _send0ToDrivers
       _send1ToDrivers
   _getTime
     _I2C_SendACK
     _endReadRTC
     _passTubeNum
       _display
       _loadDisplay
     _readByteRTC
     _readDataRTC
       _I2C_ReadByte
     _reqReadRTC
     _swapNibbles
   _loadDisplay
   _preLoadWL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0h              46     14      18       3       34.3%
BANK0l               2      0       2       4      100.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            30      0       0       6        0.0%
BANK2               30      0       0       7        0.0%
ABS                  0      0      29       8        0.0%
BITBANK0h           46      0       0       9        0.0%
BITBANK0l            2      0       0      10        0.0%
BITBANK1            50      0       0      11        0.0%
DATA                 0      0      29      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Oct 30 04:07:22 2023

            _swapNibbles 05BE                       l53 06AF                       l54 06A6  
                     l72 0740                       l75 05D6                       l59 06B3  
                     l92 0591                       _T0 0022                       _T1 0023  
                     l86 0503                       _T2 0024                       l95 0580  
                     _T3 0025                       _T4 0026                       l89 0551  
                     _T5 0027                       l98 0743                       _T6 0028  
                     l99 076D                       _T7 0029                      l100 0788  
                    l101 077D                      l102 0785                      l111 0686  
                    l106 0795                      l114 056F                      l220 05A6  
                    l109 065E                      l117 0560                      l142 0516  
                    l151 04FA                      l231 06FB                      l160 04D2  
                    l217 04D0                      l145 04DD                      l250 060B  
                    l154 04E4                      l242 04F2                      l163 04EB  
                    l148 04D5                      l236 0632                      l180 07F2  
                    l157 04D9                      l253 0536                      l174 065B  
                    l166 0543                      l262 05F0                      l239 050C  
                    l256 052A                      l169 05BD                      l259 0520  
                    u410 076D                      u411 076C                      u420 0783  
                    u404 075C                      u500 06E1                      u421 0782  
                    u501 06E0                      u430 078D                      u510 06E9  
                    u431 078C                      u511 06E8                      u440 0792  
                    u600 0716                      u520 06FA                      u441 0791  
                    u601 0715                      u521 06F9                      u530 0607  
                    u531 0606                      u460 0685                      u620 0726  
                    u700 069D                      u461 0684                      u621 0725  
                    u701 069C                      u454 0674                      u390 0759  
                    u630 072F                      u710 06A6                      u455 0672  
                    u391 0755                      u631 072E                      u615 071D  
                    u711 06A5                      u384 0750                      u560 0642  
                    u480 061B                      u720 06AA                      u385 074D  
                    u561 0641                      u545 053D                      u481 061A  
                    u721 06A9                      u570 0655                      u650 073F  
                    u490 06D0                      u730 06B3                      u571 0654  
                    u555 0639                      u651 073E                      u475 0612  
                    u491 06CF                      u731 06B2                      u660 07A1  
                    u740 06B7                      u645 0736                      u661 07A0  
                    u741 06B6                      u670 07D3                      u671 07D2  
                    u680 068F                      u585 05C2                      u681 068E  
                    u595 05CE                      u695 0694                      fsr0 0004  
                    indf 0000      loadDisplay@numIndex 0075                     l1200 0747  
                   l1210 077A                     l1202 075C                     l1220 0552  
                   l1212 0783                     l1204 075D                     l1214 0786  
                   l1206 0760                     l1230 0517                     l1222 0521  
                   l1302 06C2                     l1216 078D                     l1208 0767  
                   l1400 0636                     l1232 051A                     l1224 0525  
                   l1320 06D7                     l1312 06C7                     l1304 06C4  
                   l1250 067F                     l1218 0792                     l1410 064B  
                   l1402 0642                     l1234 051B                     l1226 0527  
                   l1330 06EC                     l1322 06DB                     l1314 06D0  
                   l1306 06C6                     l1252 0685                     l1244 0669  
                   l1260 0511                     l1412 064E                     l1404 0643  
                   l1340 04EC                     l1236 051D                     l1228 0528  
                   l1332 06EE                     l1324 06E1                     l1316 06D2  
                   l1500 07C9                     l1246 067A                     l1238 065C  
                   l1190 0581                     l1262 0514                     l1350 04F8  
                   l1270 04E2                     l1414 0651                     l1406 0646  
                   l1422 065A                     l1342 04F0                     l1334 06F0  
                   l1326 06E9                     l1318 06D3                     l1430 0561  
                   l1510 07D9                     l1502 07CF                     l1360 05F1  
                   l1248 067B                     l1192 0570                     l1264 04D3  
                   l1256 050E                     l1352 04F9                     l1344 04F4  
                   l1272 04D7                     l1416 0655                     l1408 0647  
                   l1280 0625                     l1336 06F4                     l1328 06EB  
                   l1520 0532                     l1440 05EE                     l1432 04DA  
                   l1512 07DA                     l1504 07D3                     l1370 05F9  
                   l1362 05F3                     l1194 0742                     l1258 050F  
                   l1346 04F4                     l1274 04D1                     l1266 04DF  
                   l1418 0658                     l1450 070B                     l1282 0627  
                   l1290 0509                     l1338 06FA                     l1522 0534  
                   l1442 05EF                     l1434 04DC                     l1426 05BF  
                   l1514 07EE                     l1506 07D4                     l1530 0598  
                   l1372 05FD                     l1380 04CF                     l1188 0544  
                   l1348 04F6                     l1268 04E0                     l1356 04E6  
                   l1460 0711                     l1452 070D                     l1444 06FC  
                   l1284 0631                     l1276 060D                     l1292 050A  
                   l1524 0535                     l1516 052B                     l1508 07D7  
                   l1540 05A1                     l1532 0599                     l1374 0601  
                   l1358 04EA                     l1382 0537                     l1390 05B5  
                   l1470 072F                     l1462 0716                     l1454 070E  
                   l1446 0704                     l1278 061B                     l1286 0504  
                   l1294 06B9                     l1518 052C                     l1438 05D8  
                   l1542 05A5                     l1534 059B                     l1526 0592  
                   l1550 068F                     l1376 0607                     l1368 05F4  
                   l1384 053A                     l1392 05B6                     l1472 0733  
                   l1464 071A                     l1456 070F                     l1448 0705  
                   l1288 0507                     l1296 06C1                     l1480 07A1  
                   l1536 059D                     l1528 0596                     l1560 06AA  
                   l1552 069D                     l1544 0687                     l1378 04FB  
                   l1394 05B8                     l1466 0726                     l1458 0710  
                   l1490 07B2                     l1482 07A7                     l1538 059F  
                   l1562 06AB                     l1554 069F                     l1546 0688  
                   l1396 05BA                     l1388 05A7                     l1468 072A  
                   l1492 07B7                     l1484 07A8                     l1476 0796  
                   l1564 06AC                     l1556 06A0                     l1548 068A  
                   l1398 0633                     l1494 07BD                     l1486 07AD  
                   l1478 079B                     l1566 06AD                     l1496 07C0  
                   l1488 07B1                     l1498 07C6          readByteRTC@data 0077  
                   _Init 06FC                     _flag 0043                     _main 0687  
                   btemp 007E         __end_of_I2C_Stop 0581             ?_loadDisplay 0070  
                   start 0000             ?_readDataRTC 0070          __end_of_InitI2C 0504  
       getTime@tensHours 0038             ?_readByteRTC 0070                    ?_Init 0070  
                  ?_main 0070                    _CMCON 001F     loadDisplay@tubeIndex 0074  
                  _PORTB 0006          __end_of_checkDP 0633                    _TRISA 0085  
                  _TRISB 0086        passTubeNum@tmpLDP 0031        passTubeNum@tmpRDP 0032  
   __end_of_isRTCRunning 0544          __end_of_getTime 07F3             _I2C_ReadByte 065C  
        __end_of_display 04F3                    _latch 0504             _I2C_SendNACK 0552  
      __end_of_I2C_Start 0552                    status 0003                    wtemp0 007E  
       ??_send0ToDrivers 0070             ?_passTubeNum 002A         ??_send1ToDrivers 0070  
        __initialization 07F3         ?_displayError666 0070             __end_of_Init 0741  
           __end_of_main 06B9                   ??_Init 007A                   ??_main 007C  
           ?_reqWriteRTC 0070             _writeDataRTC 04D6                   ?_latch 0070  
           _writeByteRTC 04E5         checkRTCType@data 0079                ??_InitI2C 0070  
   getTime@singleMinutes 0034     getTime@singleSeconds 0033        reqReadRTC@address 0075  
                 _leftDP 003F                ??_checkDP 0070           loadDisplay@LDP 0076  
         loadDisplay@RDP 0077                ??_getTime 0079             _checkRTCType 0633  
              ??_display 0070                ?_I2C_Stop 0070         __end_of_startRTC 05BE  
__end_of__initialization 07FE           __pcstackBANK0h 002A            Init@clockTest 007B  
         __pcstackCOMMON 0070            _I2C_WriteByte 0741             ?_swapNibbles 0070  
          __end_of_latch 050D       getTime@tensMinutes 0037       getTime@tensSeconds 0036  
      __end_of_InitTubes 04D1               ??_I2C_Stop 0070       getTime@singleHours 0035  
                ??_latch 0070               __pbssBANK1 00A0               _blankTubes 05F1  
             _endReadRTC 04D3             _isRTCRunning 0537               __pmaintext 0687  
         ?_I2C_WriteByte 0070         writeDataRTC@data 0075          swapNibbles@data 0073  
          ??_I2C_ReStart 0070            ??_I2C_SendACK 0070       readByteRTC@address 0076  
                _ErrFlag 0041                  _InitI2C 04FB                _I2C_Start 0544  
       I2C_ReadByte@Data 0071                ?_startRTC 0070               _oldSeconds 0040  
                _checkDP 060C                  __ptext0 0000                  __ptext1 0592  
                __ptext2 0796                  __ptext3 05BE                  _getTime 0796  
                __ptext4 04DA                  __ptext5 05D7                  __ptext6 0561  
                __ptext7 052B                  __ptext8 06B9                  __ptext9 0504  
                _display 04EC               _reqReadRTC 050D                  _rightDP 003E  
    __end_of_I2C_ReStart 0592      __end_of_I2C_SendACK 0570                  main@tmp 007D  
      __end_of_preLoadWL 05A7     end_of_initialization 07FE            blankTubes@ptr 0070  
            ?_blankTubes 0070               ?_I2C_Start 0070          ??_I2C_WriteByte 0070  
            ?_endReadRTC 0070               ??_startRTC 0076                _PORTAbits 0005  
          ??_endWriteRTC 0070                _TRISAbits 0085       reqWriteRTC@address 0075  
     loadDisplay@dispNum 0072       loadDisplay@tubePtr 0073      writeByteRTC@address 0077  
        getTime@tmpRight 003A              _I2C_ReStart 0581              _I2C_SendACK 0561  
            ?_reqReadRTC 0070      start_initialization 07F3                _InitTubes 04CF  
    __end_of_endWriteRTC 04D3            ??_loadDisplay 0072              ??_I2C_Start 0070  
          ??_readDataRTC 0073            ??_readByteRTC 0076           I2C_WriteByte@i 0074  
            __pbssBANK0h 003E              __pbssBANK0l 0042                ___latbits 0000  
          ?_I2C_ReadByte 0070               ?_InitTubes 0070            ?_I2C_SendNACK 0070  
      ??_displayError666 0078                 ?_InitI2C 0070            ??_passTubeNum 0078  
          I2C_ReadByte@i 0072      __end_of_loadDisplay 06FC                 ?_checkDP 0070  
    __end_of_readDataRTC 04DE                 ?_getTime 0070                 ?_display 0070  
              checkDP@DP 0071         writeByteRTC@data 0076          readDataRTC@data 0073  
          ??_reqWriteRTC 0075            ?_writeDataRTC 0070      __end_of_readByteRTC 04FB  
            _endWriteRTC 04D1                 _I2C_Stop 0570           ??_I2C_ReadByte 0070  
         ??_I2C_SendNACK 0070            ?_writeByteRTC 0076                _preLoadWL 0592  
           ??_blankTubes 0070             ??_endReadRTC 0070           _send0ToDrivers 0517  
    __end_of_passTubeNum 05F1            ?_checkRTCType 0070           _send1ToDrivers 0521  
         ??_writeDataRTC 0075         isRTCRunning@data 0079       __end_of_blankTubes 060C  
         getTime@minutes 003B           getTime@seconds 003D           ??_writeByteRTC 0077  
            ??_InitTubes 0072           getTime@tmpLeft 0039       __end_of_endReadRTC 04D6  
        passTubeNum@tmp0 0030          passTubeNum@tmp1 002F          passTubeNum@tmp2 002E  
        passTubeNum@tmp3 002D          passTubeNum@tmp4 002C          passTubeNum@tmp5 002B  
        passTubeNum@tmp6 002A          passTubeNum@tmp7 0078      __end_of_reqWriteRTC 04E5  
             ?_preLoadWL 0070              _loadDisplay 06B9    __end_of_I2C_WriteByte 0796  
            _readDataRTC 04DA   __end_of_send0ToDrivers 0521            ??_swapNibbles 0070  
            _readByteRTC 04F3   __end_of_send1ToDrivers 052B           ??_checkRTCType 0078  
           ?_I2C_ReStart 0070             ?_I2C_SendACK 0070             ??_reqReadRTC 0075  
               __ptext10 060C                 __ptext11 0521                 __ptext20 04DE  
               __ptext12 0517                 __ptext21 04D1                 __ptext13 04EC  
               __ptext30 065C                 __ptext22 04F3                 __ptext14 06FC  
               __ptext31 04CF                 __ptext23 050D                 __ptext15 05A7  
               __ptext32 05F1                 __ptext24 0741                 __ptext16 0537  
               __ptext33 04FB                 __ptext25 0544                 __ptext17 0633  
               __ptext26 0581                 __ptext18 04E5                 __ptext27 04D3  
               __ptext19 04D6                 __ptext28 0570                 __ptext29 0552  
           _PORTA_SHADOW 00A0             _PORTB_SHADOW 0042              blankTubes@i 0071  
          ?_isRTCRunning 0070              _passTubeNum 05D7     __end_of_I2C_ReadByte 0687  
     __end_of_reqReadRTC 0517     __end_of_I2C_SendNACK 0561          ?_send0ToDrivers 0070  
               _startRTC 05A7          ?_send1ToDrivers 0070          _displayError666 052B  
    __end_of_swapNibbles 05D7              _reqWriteRTC 04DE              ??_preLoadWL 0070  
         ??_isRTCRunning 0078     __end_of_writeDataRTC 04DA     __end_of_writeByteRTC 04EC  
           getTime@hours 003C               _OPTION_REG 0081             ?_endWriteRTC 0070  
   __end_of_checkRTCType 065C        I2C_WriteByte@Data 0072       I2C_WriteByte@timer 0073  
__end_of_displayError666 0537  
