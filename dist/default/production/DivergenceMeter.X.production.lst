

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Nov 01 04:43:34 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0h,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK0l,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0h,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    46                           	dabs	1,0x22,1,_T0
    47                           	dabs	1,0x28,1,_T6
    48                           	dabs	1,0x27,1,_T5
    49                           	dabs	1,0x26,1,_T4
    50                           	dabs	1,0x25,1,_T3
    51                           	dabs	1,0x24,1,_T2
    52                           	dabs	1,0x23,1,_T1
    53                           	dabs	1,0x29,1,_T7
    54                           	dabs	1,0x7E,2
    55     0000                     
    56                           ; Generated 12/10/2023 GMT
    57                           ; 
    58                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution. Publication is not required when
    72                           ;        this file is used in an embedded application.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F628A Definitions
    88                           ; 
    89                           ; SFR Addresses
    90     0000                     	;# 
    91     0001                     	;# 
    92     0002                     	;# 
    93     0003                     	;# 
    94     0004                     	;# 
    95     0005                     	;# 
    96     0006                     	;# 
    97     000A                     	;# 
    98     000B                     	;# 
    99     000C                     	;# 
   100     000E                     	;# 
   101     000E                     	;# 
   102     000F                     	;# 
   103     0010                     	;# 
   104     0011                     	;# 
   105     0012                     	;# 
   106     0015                     	;# 
   107     0015                     	;# 
   108     0016                     	;# 
   109     0017                     	;# 
   110     0018                     	;# 
   111     0019                     	;# 
   112     001A                     	;# 
   113     001F                     	;# 
   114     0081                     	;# 
   115     0085                     	;# 
   116     0086                     	;# 
   117     008C                     	;# 
   118     008E                     	;# 
   119     0092                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009F                     	;# 
   127     0000                     	;# 
   128     0001                     	;# 
   129     0002                     	;# 
   130     0003                     	;# 
   131     0004                     	;# 
   132     0005                     	;# 
   133     0006                     	;# 
   134     000A                     	;# 
   135     000B                     	;# 
   136     000C                     	;# 
   137     000E                     	;# 
   138     000E                     	;# 
   139     000F                     	;# 
   140     0010                     	;# 
   141     0011                     	;# 
   142     0012                     	;# 
   143     0015                     	;# 
   144     0015                     	;# 
   145     0016                     	;# 
   146     0017                     	;# 
   147     0018                     	;# 
   148     0019                     	;# 
   149     001A                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     008C                     	;# 
   155     008E                     	;# 
   156     0092                     	;# 
   157     0098                     	;# 
   158     0099                     	;# 
   159     009A                     	;# 
   160     009B                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009F                     	;# 
   164     0000                     	;# 
   165     0001                     	;# 
   166     0002                     	;# 
   167     0003                     	;# 
   168     0004                     	;# 
   169     0005                     	;# 
   170     0006                     	;# 
   171     000A                     	;# 
   172     000B                     	;# 
   173     000C                     	;# 
   174     000E                     	;# 
   175     000E                     	;# 
   176     000F                     	;# 
   177     0010                     	;# 
   178     0011                     	;# 
   179     0012                     	;# 
   180     0015                     	;# 
   181     0015                     	;# 
   182     0016                     	;# 
   183     0017                     	;# 
   184     0018                     	;# 
   185     0019                     	;# 
   186     001A                     	;# 
   187     001F                     	;# 
   188     0081                     	;# 
   189     0085                     	;# 
   190     0086                     	;# 
   191     008C                     	;# 
   192     008E                     	;# 
   193     0092                     	;# 
   194     0098                     	;# 
   195     0099                     	;# 
   196     009A                     	;# 
   197     009B                     	;# 
   198     009C                     	;# 
   199     009D                     	;# 
   200     009F                     	;# 
   201     0000                     	;# 
   202     0001                     	;# 
   203     0002                     	;# 
   204     0003                     	;# 
   205     0004                     	;# 
   206     0005                     	;# 
   207     0006                     	;# 
   208     000A                     	;# 
   209     000B                     	;# 
   210     000C                     	;# 
   211     000E                     	;# 
   212     000E                     	;# 
   213     000F                     	;# 
   214     0010                     	;# 
   215     0011                     	;# 
   216     0012                     	;# 
   217     0015                     	;# 
   218     0015                     	;# 
   219     0016                     	;# 
   220     0017                     	;# 
   221     0018                     	;# 
   222     0019                     	;# 
   223     001A                     	;# 
   224     001F                     	;# 
   225     0081                     	;# 
   226     0085                     	;# 
   227     0086                     	;# 
   228     008C                     	;# 
   229     008E                     	;# 
   230     0092                     	;# 
   231     0098                     	;# 
   232     0099                     	;# 
   233     009A                     	;# 
   234     009B                     	;# 
   235     009C                     	;# 
   236     009D                     	;# 
   237     009F                     	;# 
   238     0000                     	;# 
   239     0001                     	;# 
   240     0002                     	;# 
   241     0003                     	;# 
   242     0004                     	;# 
   243     0005                     	;# 
   244     0006                     	;# 
   245     000A                     	;# 
   246     000B                     	;# 
   247     000C                     	;# 
   248     000E                     	;# 
   249     000E                     	;# 
   250     000F                     	;# 
   251     0010                     	;# 
   252     0011                     	;# 
   253     0012                     	;# 
   254     0015                     	;# 
   255     0015                     	;# 
   256     0016                     	;# 
   257     0017                     	;# 
   258     0018                     	;# 
   259     0019                     	;# 
   260     001A                     	;# 
   261     001F                     	;# 
   262     0081                     	;# 
   263     0085                     	;# 
   264     0086                     	;# 
   265     008C                     	;# 
   266     008E                     	;# 
   267     0092                     	;# 
   268     0098                     	;# 
   269     0099                     	;# 
   270     009A                     	;# 
   271     009B                     	;# 
   272     009C                     	;# 
   273     009D                     	;# 
   274     009F                     	;# 
   275                           
   276                           	psect	text0
   277     0000                     __ptext0:
   278                           
   279                           	psect	nvBANK1
   280     00A0                     __pnvBANK1:
   281     00A0                     _Flag:
   282     00A0                     	ds	1
   283     0006                     _PORTB	set	6
   284     001F                     _CMCON	set	31
   285     0005                     _PORTAbits	set	5
   286     0085                     _TRISAbits	set	133
   287     0081                     _OPTION_REG	set	129
   288     0086                     _TRISB	set	134
   289     0085                     _TRISA	set	133
   290                           
   291                           	psect	cinit
   292     07F6                     start_initialization:	
   293                           ; #config settings
   294                           
   295     07F6                     __initialization:
   296                           
   297                           ; Clear objects allocated to BANK0h
   298     07F6  1283               	bcf	3,5	;RP0=0, select bank0
   299     07F7  1303               	bcf	3,6	;RP1=0, select bank0
   300     07F8  01C7               	clrf	__pbssBANK0h& (0+127)
   301     07F9  01C8               	clrf	(__pbssBANK0h+1)& (0+127)
   302     07FA  01C9               	clrf	(__pbssBANK0h+2)& (0+127)
   303     07FB  01CA               	clrf	(__pbssBANK0h+3)& (0+127)
   304                           
   305                           ; Clear objects allocated to BANK0l
   306     07FC  01CB               	clrf	__pbssBANK0l& (0+127)
   307     07FD  01CC               	clrf	(__pbssBANK0l+1)& (0+127)
   308     07FE                     end_of_initialization:	
   309                           ;End of C runtime variable initialization code
   310                           
   311     07FE                     __end_of__initialization:
   312     07FE  0183               	clrf	3
   313     07FF  2E89               	ljmp	_main	;jump to C main() function
   314                           
   315                           	psect	bssBANK0h
   316     0047                     __pbssBANK0h:
   317     0047                     _rightDP:
   318     0047                     	ds	1
   319     0048                     _leftDP:
   320     0048                     	ds	1
   321     0049                     _oldSeconds:
   322     0049                     	ds	1
   323     004A                     _ErrFlag:
   324     004A                     	ds	1
   325                           
   326                           	psect	bssBANK0l
   327     004B                     __pbssBANK0l:
   328     004B                     _PORTB_SHADOW:
   329     004B                     	ds	1
   330     004C                     _PORTA_SHADOW:
   331     004C                     	ds	1
   332                           
   333                           	psect	cstackCOMMON
   334     0070                     __pcstackCOMMON:
   335     0070                     ?_isRTCRunning:
   336     0070                     ?_checkRTCType:	
   337                           ; 1 bit 
   338                           
   339     0070                     ?_Init:	
   340                           ; 1 bit 
   341                           
   342     0070                     ?_getTime:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ?_displayError:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_startRTC:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_InitI2C:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ??_InitI2C:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?_InitTubes:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ?_getDate:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ?_blankTubes:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ??_blankTubes:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?_loadDisplay:	
   370                           ; 1 bytes @ 0x0
   371                           
   372     0070                     ?_display:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ??_display:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ?_checkDP:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ??_checkDP:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ?_send1ToDrivers:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ??_send1ToDrivers:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ?_send0ToDrivers:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ??_send0ToDrivers:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0070                     ?_latch:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0070                     ??_latch:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_main:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?_swapNibbles:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ??_swapNibbles:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_I2C_Start:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ??_I2C_Start:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_I2C_ReStart:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ??_I2C_ReStart:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_I2C_Stop:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ??_I2C_Stop:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ?_I2C_WriteByte:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ??_I2C_WriteByte:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_I2C_ReadByte:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ??_I2C_ReadByte:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?_I2C_SendACK:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     ??_I2C_SendACK:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     ?_I2C_SendNACK:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ??_I2C_SendNACK:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ?_reqReadRTC:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0070                     ?_readDataRTC:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0070                     ?_endReadRTC:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0070                     ??_endReadRTC:	
   463                           ; 1 bytes @ 0x0
   464                           
   465     0070                     ?_readByteRTC:	
   466                           ; 1 bytes @ 0x0
   467                           
   468     0070                     ?_reqWriteRTC:	
   469                           ; 1 bytes @ 0x0
   470                           
   471     0070                     ?_writeDataRTC:	
   472                           ; 1 bytes @ 0x0
   473                           
   474     0070                     ?_endWriteRTC:	
   475                           ; 1 bytes @ 0x0
   476                           
   477     0070                     ??_endWriteRTC:	
   478                           ; 1 bytes @ 0x0
   479                           
   480     0070                     blankTubes@ptr:	
   481                           ; 1 bytes @ 0x0
   482                           
   483                           
   484                           ; 1 bytes @ 0x0
   485     0070                     	ds	1
   486     0071                     I2C_ReadByte@Data:
   487     0071                     checkDP@DP:	
   488                           ; 1 bytes @ 0x1
   489                           
   490     0071                     blankTubes@i:	
   491                           ; 1 bytes @ 0x1
   492                           
   493                           
   494                           ; 1 bytes @ 0x1
   495     0071                     	ds	1
   496     0072                     ??_loadDisplay:
   497     0072                     I2C_WriteByte@Data:	
   498                           ; 1 bytes @ 0x2
   499                           
   500     0072                     I2C_ReadByte@i:	
   501                           ; 1 bytes @ 0x2
   502                           
   503     0072                     loadDisplay@dispNum:	
   504                           ; 1 bytes @ 0x2
   505                           
   506                           
   507                           ; 1 bytes @ 0x2
   508     0072                     	ds	1
   509     0073                     ??_readDataRTC:
   510     0073                     swapNibbles@data:	
   511                           ; 1 bytes @ 0x3
   512                           
   513     0073                     I2C_WriteByte@timer:	
   514                           ; 1 bytes @ 0x3
   515                           
   516     0073                     readDataRTC@data:	
   517                           ; 1 bytes @ 0x3
   518                           
   519     0073                     loadDisplay@tubePtr:	
   520                           ; 1 bytes @ 0x3
   521                           
   522                           
   523                           ; 1 bytes @ 0x3
   524     0073                     	ds	1
   525     0074                     I2C_WriteByte@i:
   526     0074                     loadDisplay@tubeIndex:	
   527                           ; 1 bytes @ 0x4
   528                           
   529                           
   530                           ; 1 bytes @ 0x4
   531     0074                     	ds	1
   532     0075                     ??_reqReadRTC:
   533     0075                     ??_reqWriteRTC:	
   534                           ; 1 bytes @ 0x5
   535                           
   536     0075                     ??_writeDataRTC:	
   537                           ; 1 bytes @ 0x5
   538                           
   539     0075                     reqReadRTC@address:	
   540                           ; 1 bytes @ 0x5
   541                           
   542     0075                     reqWriteRTC@address:	
   543                           ; 1 bytes @ 0x5
   544                           
   545     0075                     writeDataRTC@data:	
   546                           ; 1 bytes @ 0x5
   547                           
   548     0075                     loadDisplay@numIndex:	
   549                           ; 1 bytes @ 0x5
   550                           
   551                           
   552                           ; 1 bytes @ 0x5
   553     0075                     	ds	1
   554     0076                     ??_readByteRTC:
   555     0076                     ?_writeByteRTC:	
   556                           ; 1 bytes @ 0x6
   557                           
   558     0076                     readByteRTC@address:	
   559                           ; 1 bytes @ 0x6
   560                           
   561     0076                     writeByteRTC@data:	
   562                           ; 1 bytes @ 0x6
   563                           
   564     0076                     loadDisplay@LDP:	
   565                           ; 1 bytes @ 0x6
   566                           
   567                           
   568                           ; 1 bytes @ 0x6
   569     0076                     	ds	1
   570     0077                     ??_writeByteRTC:
   571     0077                     readByteRTC@data:	
   572                           ; 1 bytes @ 0x7
   573                           
   574     0077                     writeByteRTC@address:	
   575                           ; 1 bytes @ 0x7
   576                           
   577     0077                     loadDisplay@RDP:	
   578                           ; 1 bytes @ 0x7
   579                           
   580                           
   581                           ; 1 bytes @ 0x7
   582     0077                     	ds	1
   583     0078                     ??_displayError:
   584     0078                     ??_passTubeNum:	
   585                           ; 1 bytes @ 0x8
   586                           
   587     0078                     ??_InitTubes:	
   588                           ; 1 bytes @ 0x8
   589                           
   590     0078                     ??_isRTCRunning:	
   591                           ; 1 bytes @ 0x8
   592                           
   593     0078                     ??_checkRTCType:	
   594                           ; 1 bytes @ 0x8
   595                           
   596     0078                     passTubeNum@tmp7:	
   597                           ; 1 bytes @ 0x8
   598                           
   599                           
   600                           ; 1 bytes @ 0x8
   601     0078                     	ds	1
   602     0079                     ??_getTime:
   603     0079                     ??_startRTC:	
   604                           ; 1 bytes @ 0x9
   605                           
   606     0079                     ??_getDate:	
   607                           ; 1 bytes @ 0x9
   608                           
   609     0079                     isRTCRunning@data:	
   610                           ; 1 bytes @ 0x9
   611                           
   612     0079                     checkRTCType@data:	
   613                           ; 1 bytes @ 0x9
   614                           
   615                           
   616                           ; 1 bytes @ 0x9
   617     0079                     	ds	1
   618     007A                     startRTC@clockTest:
   619                           
   620                           ; 1 bytes @ 0xA
   621     007A                     	ds	1
   622     007B                     startRTC@RTCaddress:
   623                           
   624                           ; 1 bytes @ 0xB
   625     007B                     	ds	1
   626     007C                     ??_Init:
   627     007C                     ??_main:	
   628                           ; 1 bytes @ 0xC
   629                           
   630                           
   631                           ; 1 bytes @ 0xC
   632     007C                     	ds	1
   633     007D                     main@menu:
   634                           
   635                           ; 1 bytes @ 0xD
   636     007D                     	ds	1
   637                           
   638                           	psect	cstackBANK0h
   639     002A                     __pcstackBANK0h:
   640     002A                     ?_passTubeNum:
   641     002A                     passTubeNum@tmp6:	
   642                           ; 1 bytes @ 0x0
   643                           
   644                           
   645                           ; 1 bytes @ 0x0
   646     002A                     	ds	1
   647     002B                     passTubeNum@tmp5:
   648                           
   649                           ; 1 bytes @ 0x1
   650     002B                     	ds	1
   651     002C                     passTubeNum@tmp4:
   652                           
   653                           ; 1 bytes @ 0x2
   654     002C                     	ds	1
   655     002D                     passTubeNum@tmp3:
   656                           
   657                           ; 1 bytes @ 0x3
   658     002D                     	ds	1
   659     002E                     passTubeNum@tmp2:
   660                           
   661                           ; 1 bytes @ 0x4
   662     002E                     	ds	1
   663     002F                     passTubeNum@tmp1:
   664                           
   665                           ; 1 bytes @ 0x5
   666     002F                     	ds	1
   667     0030                     passTubeNum@tmp0:
   668                           
   669                           ; 1 bytes @ 0x6
   670     0030                     	ds	1
   671     0031                     passTubeNum@tmpLDP:
   672                           
   673                           ; 1 bytes @ 0x7
   674     0031                     	ds	1
   675     0032                     passTubeNum@tmpRDP:
   676                           
   677                           ; 1 bytes @ 0x8
   678     0032                     	ds	1
   679     0033                     getDate@singleDay:
   680                           
   681                           ; 1 bytes @ 0x9
   682     0033                     	ds	1
   683     0034                     getDate@singleMonth:
   684                           
   685                           ; 1 bytes @ 0xA
   686     0034                     	ds	1
   687     0035                     getDate@singleYear:
   688                           
   689                           ; 1 bytes @ 0xB
   690     0035                     	ds	1
   691     0036                     getDate@tensDay:
   692                           
   693                           ; 1 bytes @ 0xC
   694     0036                     	ds	1
   695     0037                     getDate@tensMonth:
   696                           
   697                           ; 1 bytes @ 0xD
   698     0037                     	ds	1
   699     0038                     getDate@tensYear:
   700                           
   701                           ; 1 bytes @ 0xE
   702     0038                     	ds	1
   703     0039                     getDate@day:
   704                           
   705                           ; 1 bytes @ 0xF
   706     0039                     	ds	1
   707     003A                     getDate@month:
   708                           
   709                           ; 1 bytes @ 0x10
   710     003A                     	ds	1
   711     003B                     getDate@year:
   712                           
   713                           ; 1 bytes @ 0x11
   714     003B                     	ds	1
   715     003C                     getTime@singleSeconds:
   716                           
   717                           ; 1 bytes @ 0x12
   718     003C                     	ds	1
   719     003D                     getTime@singleMinutes:
   720                           
   721                           ; 1 bytes @ 0x13
   722     003D                     	ds	1
   723     003E                     getTime@singleHours:
   724                           
   725                           ; 1 bytes @ 0x14
   726     003E                     	ds	1
   727     003F                     getTime@tensSeconds:
   728                           
   729                           ; 1 bytes @ 0x15
   730     003F                     	ds	1
   731     0040                     getTime@tensMinutes:
   732                           
   733                           ; 1 bytes @ 0x16
   734     0040                     	ds	1
   735     0041                     getTime@tensHours:
   736                           
   737                           ; 1 bytes @ 0x17
   738     0041                     	ds	1
   739     0042                     getTime@tmpLeft:
   740                           
   741                           ; 1 bytes @ 0x18
   742     0042                     	ds	1
   743     0043                     getTime@tmpRight:
   744                           
   745                           ; 1 bytes @ 0x19
   746     0043                     	ds	1
   747     0044                     getTime@minutes:
   748                           
   749                           ; 1 bytes @ 0x1A
   750     0044                     	ds	1
   751     0045                     getTime@hours:
   752                           
   753                           ; 1 bytes @ 0x1B
   754     0045                     	ds	1
   755     0046                     getTime@seconds:
   756                           
   757                           ; 1 bytes @ 0x1C
   758     0046                     	ds	1
   759                           
   760                           	psect	maintext
   761     0689                     __pmaintext:	
   762 ;;
   763 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   764 ;;
   765 ;; *************** function _main *****************
   766 ;; Defined at:
   767 ;;		line 40 in file "main.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  menu            1   13[COMMON] unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : B00/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   781 ;;      Params:         0       0       0       0       0
   782 ;;      Locals:         1       0       0       0       0
   783 ;;      Temps:          1       0       0       0       0
   784 ;;      Totals:         2       0       0       0       0
   785 ;;Total ram usage:        2 bytes
   786 ;; Hardware stack levels required when called: 6
   787 ;; This function calls:
   788 ;;		_Init
   789 ;;		_displayError
   790 ;;		_getTime
   791 ;;		_passTubeNum
   792 ;;		_startRTC
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798     0689                     _main:	
   799                           ;psect for function _main
   800                           
   801     0689                     l1671:	
   802                           ;incstack = 0
   803                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   804                           
   805                           
   806                           ;main.c: 41:     Init();
   807     0689  25A4               	fcall	_Init
   808     068A                     l1673:
   809                           
   810                           ;main.c: 42:     unsigned char menu = 1;
   811     068A  01FD               	clrf	main@menu
   812     068B  0AFD               	incf	main@menu,f
   813     068C                     l1675:
   814                           
   815                           ;main.c: 44:         if(menu) {
   816     068C  087D               	movf	main@menu,w
   817     068D  1903               	btfsc	3,2
   818     068E  2E90               	goto	u841
   819     068F  2E91               	goto	u840
   820     0690                     u841:
   821     0690  2EA2               	goto	l1683
   822     0691                     u840:
   823     0691                     l1677:
   824                           
   825                           ;main.c: 45:             if(!(((ErrFlag)>>(1) & 1))) {
   826     0691  1283               	bcf	3,5	;RP0=0, select bank0
   827     0692  1303               	bcf	3,6	;RP1=0, select bank0
   828     0693  084A               	movf	_ErrFlag,w
   829     0694  00FC               	movwf	??_main
   830     0695  3001               	movlw	1
   831     0696                     u855:
   832     0696  1003               	clrc
   833     0697  0CFC               	rrf	??_main,f
   834     0698  3EFF               	addlw	-1
   835     0699  1D03               	skipz
   836     069A  2E96               	goto	u855
   837     069B  187C               	btfsc	??_main,0
   838     069C  2E9E               	goto	u861
   839     069D  2E9F               	goto	u860
   840     069E                     u861:
   841     069E  2EA1               	goto	l1681
   842     069F                     u860:
   843     069F                     l1679:
   844                           
   845                           ;main.c: 46:                 getTime();
   846     069F  276F               	fcall	_getTime
   847                           
   848                           ;main.c: 47:             } else {
   849     06A0  2EA2               	goto	l1683
   850     06A1                     l1681:
   851                           
   852                           ;main.c: 48:                 displayError();
   853     06A1  2531               	fcall	_displayError
   854     06A2                     l1683:
   855                           
   856                           ;main.c: 51:         if(PORTAbits.RA2) {
   857     06A2  1283               	bcf	3,5	;RP0=0, select bank0
   858     06A3  1303               	bcf	3,6	;RP1=0, select bank0
   859     06A4  1D05               	btfss	5,2	;volatile
   860     06A5  2EA7               	goto	u871
   861     06A6  2EA8               	goto	u870
   862     06A7                     u871:
   863     06A7  2EC2               	goto	l47
   864     06A8                     u870:
   865     06A8                     l48:
   866     06A8  1905               	btfsc	5,2	;volatile
   867     06A9  2EAB               	goto	u881
   868     06AA  2EAC               	goto	u880
   869     06AB                     u881:
   870     06AB  2EA8               	goto	l48
   871     06AC                     u880:
   872     06AC                     l1687:
   873                           
   874                           ;main.c: 53:             menu = 0;
   875     06AC  01FD               	clrf	main@menu
   876     06AD                     l1689:
   877                           
   878                           ;main.c: 54:             passTubeNum(((ErrFlag)>>(0) & 1),10,1,2,3,4,5,6,0x00,0x00);
   879     06AD  300A               	movlw	10
   880     06AE  00AA               	movwf	passTubeNum@tmp6
   881     06AF  01AB               	clrf	passTubeNum@tmp5
   882     06B0  0AAB               	incf	passTubeNum@tmp5,f
   883     06B1  3002               	movlw	2
   884     06B2  00AC               	movwf	passTubeNum@tmp4
   885     06B3  3003               	movlw	3
   886     06B4  00AD               	movwf	passTubeNum@tmp3
   887     06B5  3004               	movlw	4
   888     06B6  00AE               	movwf	passTubeNum@tmp2
   889     06B7  3005               	movlw	5
   890     06B8  00AF               	movwf	passTubeNum@tmp1
   891     06B9  3006               	movlw	6
   892     06BA  00B0               	movwf	passTubeNum@tmp0
   893     06BB  01B1               	clrf	passTubeNum@tmpLDP
   894     06BC  01B2               	clrf	passTubeNum@tmpRDP
   895     06BD  084A               	movf	_ErrFlag,w
   896     06BE  3901               	andlw	1
   897     06BF  24E4               	fcall	_passTubeNum
   898     06C0                     l1691:
   899                           
   900                           ;main.c: 55:             startRTC();
   901     06C0  26CC               	fcall	_startRTC
   902                           
   903                           ;main.c: 56:         } else if (PORTAbits.RA3) {
   904     06C1  2E8C               	goto	l1675
   905     06C2                     l47:
   906     06C2  1D85               	btfss	5,3	;volatile
   907     06C3  2EC5               	goto	u891
   908     06C4  2EC6               	goto	u890
   909     06C5                     u891:
   910     06C5  2E8C               	goto	l1675
   911     06C6                     u890:
   912     06C6                     l53:
   913     06C6  1985               	btfsc	5,3	;volatile
   914     06C7  2EC9               	goto	u901
   915     06C8  2ECA               	goto	u900
   916     06C9                     u901:
   917     06C9  2EC6               	goto	l53
   918     06CA                     u900:
   919     06CA  2E8A               	goto	l1673
   920     06CB  2800               	ljmp	start
   921     06CC                     __end_of_main:
   922                           
   923                           	psect	text1
   924     076F                     __ptext1:	
   925 ;; *************** function _getTime *****************
   926 ;; Defined at:
   927 ;;		line 129 in file "RTC.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  seconds         1   28[BANK0h] unsigned char 
   932 ;;  hours           1   27[BANK0h] unsigned char 
   933 ;;  minutes         1   26[BANK0h] unsigned char 
   934 ;;  tmpRight        1   25[BANK0h] unsigned char 
   935 ;;  tmpLeft         1   24[BANK0h] unsigned char 
   936 ;;  tensHours       1   23[BANK0h] unsigned char 
   937 ;;  tensMinutes     1   22[BANK0h] unsigned char 
   938 ;;  tensSeconds     1   21[BANK0h] unsigned char 
   939 ;;  singleHours     1   20[BANK0h] unsigned char 
   940 ;;  singleMinute    1   19[BANK0h] unsigned char 
   941 ;;  singleSecond    1   18[BANK0h] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   951 ;;      Params:         0       0       0       0       0
   952 ;;      Locals:         0      11       0       0       0
   953 ;;      Temps:          3       0       0       0       0
   954 ;;      Totals:         3      11       0       0       0
   955 ;;Total ram usage:       14 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; Hardware stack levels required when called: 5
   958 ;; This function calls:
   959 ;;		_I2C_SendACK
   960 ;;		_endReadRTC
   961 ;;		_getDate
   962 ;;		_passTubeNum
   963 ;;		_readByteRTC
   964 ;;		_readDataRTC
   965 ;;		_reqReadRTC
   966 ;;		_swapNibbles
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972     076F                     _getTime:	
   973                           ;psect for function _getTime
   974                           
   975     076F                     l1617:	
   976                           ;incstack = 0
   977                           ; Regs used in _getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   978                           
   979                           
   980                           ;RTC.c: 130:     unsigned char seconds, minutes, hours;;RTC.c: 131:     unsigned char si
      +                          ngleSeconds, singleMinutes, singleHours;;RTC.c: 132:     unsigned char tensSeconds, tens
      +                          Minutes, tensHours;;RTC.c: 133:     unsigned char tmpLeft, tmpRight;;RTC.c: 135:     sec
      +                          onds = readByteRTC(0x00);
   981     076F  3000               	movlw	0
   982     0770  2445               	fcall	_readByteRTC
   983     0771  1283               	bcf	3,5	;RP0=0, select bank0
   984     0772  1303               	bcf	3,6	;RP1=0, select bank0
   985     0773  00C6               	movwf	getTime@seconds
   986     0774                     l1619:
   987                           
   988                           ;RTC.c: 137:     if(((seconds)>>(7) & 1)) {
   989     0774  0846               	movf	getTime@seconds,w
   990     0775  00F9               	movwf	??_getTime
   991     0776  3007               	movlw	7
   992     0777                     u785:
   993     0777  1003               	clrc
   994     0778  0CF9               	rrf	??_getTime,f
   995     0779  3EFF               	addlw	-1
   996     077A  1D03               	skipz
   997     077B  2F77               	goto	u785
   998     077C  1C79               	btfss	??_getTime,0
   999     077D  2F7F               	goto	u791
  1000     077E  2F80               	goto	u790
  1001     077F                     u791:
  1002     077F  2F82               	goto	l1623
  1003     0780                     u790:
  1004     0780                     l1621:
  1005                           
  1006                           ;RTC.c: 138:         ((ErrFlag) |= (1<<1));
  1007     0780  14CA               	bsf	_ErrFlag,1
  1008                           
  1009                           ;RTC.c: 139:     } else {
  1010     0781  2FF5               	goto	l191
  1011     0782                     l1623:
  1012                           
  1013                           ;RTC.c: 141:         if(seconds != oldSeconds) {
  1014     0782  0846               	movf	getTime@seconds,w
  1015     0783  0649               	xorwf	_oldSeconds,w
  1016     0784  1903               	skipnz
  1017     0785  2F87               	goto	u801
  1018     0786  2F88               	goto	u800
  1019     0787                     u801:
  1020     0787  2FF5               	goto	l191
  1021     0788                     u800:
  1022     0788                     l1625:
  1023                           
  1024                           ;RTC.c: 142:             if(seconds == 0b00110000) {
  1025     0788  3030               	movlw	48
  1026     0789  0646               	xorwf	getTime@seconds,w
  1027     078A  1D03               	btfss	3,2
  1028     078B  2F8D               	goto	u811
  1029     078C  2F8E               	goto	u810
  1030     078D                     u811:
  1031     078D  2F9D               	goto	l1631
  1032     078E                     u810:
  1033     078E                     l1627:
  1034                           
  1035                           ;RTC.c: 143:                 getDate();
  1036     078E  2605               	fcall	_getDate
  1037     078F                     l1629:
  1038                           
  1039                           ;RTC.c: 144:                 _delay((unsigned long)((4000)*(4000000/4000.0)));
  1040     078F  3015               	movlw	21
  1041     0790  00FB               	movwf	??_getTime+2
  1042     0791  304B               	movlw	75
  1043     0792  00FA               	movwf	??_getTime+1
  1044     0793  30BE               	movlw	190
  1045     0794  00F9               	movwf	??_getTime
  1046     0795                     u917:
  1047     0795  0BF9               	decfsz	??_getTime,f
  1048     0796  2F95               	goto	u917
  1049     0797  0BFA               	decfsz	??_getTime+1,f
  1050     0798  2F95               	goto	u917
  1051     0799  0BFB               	decfsz	??_getTime+2,f
  1052     079A  2F95               	goto	u917
  1053     079B  0000               	nop
  1054                           
  1055                           ;RTC.c: 145:             } else if (seconds == 0b01011001) {
  1056     079C  2FF5               	goto	l191
  1057     079D                     l1631:
  1058     079D  3059               	movlw	89
  1059     079E  0646               	xorwf	getTime@seconds,w
  1060     079F  1D03               	btfss	3,2
  1061     07A0  2FA2               	goto	u821
  1062     07A1  2FA3               	goto	u820
  1063     07A2                     u821:
  1064     07A2  2FA4               	goto	l1635
  1065     07A3                     u820:
  1066     07A3  2FF5               	goto	l191
  1067     07A4                     l1635:
  1068                           
  1069                           ;RTC.c: 148:                 reqReadRTC(0x00);
  1070     07A4  3000               	movlw	0
  1071     07A5  2456               	fcall	_reqReadRTC
  1072                           
  1073                           ;RTC.c: 149:                 seconds = readDataRTC();
  1074     07A6  242C               	fcall	_readDataRTC
  1075     07A7  1283               	bcf	3,5	;RP0=0, select bank0
  1076     07A8  1303               	bcf	3,6	;RP1=0, select bank0
  1077     07A9  00C6               	movwf	getTime@seconds
  1078     07AA                     l1637:
  1079                           
  1080                           ;RTC.c: 150:                 I2C_SendACK();
  1081     07AA  24A3               	fcall	_I2C_SendACK
  1082     07AB                     l1639:
  1083                           
  1084                           ;RTC.c: 151:                 minutes = readDataRTC();
  1085     07AB  242C               	fcall	_readDataRTC
  1086     07AC  1283               	bcf	3,5	;RP0=0, select bank0
  1087     07AD  1303               	bcf	3,6	;RP1=0, select bank0
  1088     07AE  00C4               	movwf	getTime@minutes
  1089                           
  1090                           ;RTC.c: 152:                 I2C_SendACK();
  1091     07AF  24A3               	fcall	_I2C_SendACK
  1092     07B0                     l1641:
  1093                           
  1094                           ;RTC.c: 153:                 hours = readDataRTC();
  1095     07B0  242C               	fcall	_readDataRTC
  1096     07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1097     07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1098     07B3  00C5               	movwf	getTime@hours
  1099     07B4                     l1643:
  1100                           
  1101                           ;RTC.c: 154:                 endReadRTC();
  1102     07B4  2421               	fcall	_endReadRTC
  1103     07B5                     l1645:
  1104                           
  1105                           ;RTC.c: 155:                 singleSeconds = (seconds & 0x0F);
  1106     07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1107     07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1108     07B7  0846               	movf	getTime@seconds,w
  1109     07B8  390F               	andlw	15
  1110     07B9  00BC               	movwf	getTime@singleSeconds
  1111     07BA                     l1647:
  1112                           
  1113                           ;RTC.c: 156:                 tensSeconds = (swapNibbles(seconds) & 0x0F);
  1114     07BA  0846               	movf	getTime@seconds,w
  1115     07BB  24FD               	fcall	_swapNibbles
  1116     07BC  390F               	andlw	15
  1117     07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1118     07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1119     07BF  00BF               	movwf	getTime@tensSeconds
  1120     07C0                     l1649:
  1121                           
  1122                           ;RTC.c: 157:                 singleMinutes = (minutes & 0x0F);
  1123     07C0  0844               	movf	getTime@minutes,w
  1124     07C1  390F               	andlw	15
  1125     07C2  00BD               	movwf	getTime@singleMinutes
  1126     07C3                     l1651:
  1127                           
  1128                           ;RTC.c: 158:                 tensMinutes = (swapNibbles(minutes) & 0x0F);
  1129     07C3  0844               	movf	getTime@minutes,w
  1130     07C4  24FD               	fcall	_swapNibbles
  1131     07C5  390F               	andlw	15
  1132     07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1133     07C7  1303               	bcf	3,6	;RP1=0, select bank0
  1134     07C8  00C0               	movwf	getTime@tensMinutes
  1135     07C9                     l1653:
  1136                           
  1137                           ;RTC.c: 159:                 singleHours = (hours & 0x0F);
  1138     07C9  0845               	movf	getTime@hours,w
  1139     07CA  390F               	andlw	15
  1140     07CB  00BE               	movwf	getTime@singleHours
  1141     07CC                     l1655:
  1142                           
  1143                           ;RTC.c: 160:                 tensHours = (swapNibbles(hours) & 0x0F);
  1144     07CC  0845               	movf	getTime@hours,w
  1145     07CD  24FD               	fcall	_swapNibbles
  1146     07CE  390F               	andlw	15
  1147     07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1148     07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1149     07D1  00C1               	movwf	getTime@tensHours
  1150     07D2                     l1657:
  1151                           
  1152                           ;RTC.c: 162:                 if(((seconds)>>(0) & 1)) {
  1153     07D2  1C46               	btfss	getTime@seconds,0
  1154     07D3  2FD5               	goto	u831
  1155     07D4  2FD6               	goto	u830
  1156     07D5                     u831:
  1157     07D5  2FDA               	goto	l1663
  1158     07D6                     u830:
  1159     07D6                     l1659:
  1160                           
  1161                           ;RTC.c: 163:                     tmpLeft = 0x00;
  1162     07D6  01C2               	clrf	getTime@tmpLeft
  1163     07D7                     l1661:
  1164                           
  1165                           ;RTC.c: 164:                     tmpRight = 0x24;
  1166     07D7  3024               	movlw	36
  1167     07D8  00C3               	movwf	getTime@tmpRight
  1168                           
  1169                           ;RTC.c: 165:                 } else {
  1170     07D9  2FDD               	goto	l1667
  1171     07DA                     l1663:
  1172                           
  1173                           ;RTC.c: 166:                     tmpLeft = 0x24;
  1174     07DA  3024               	movlw	36
  1175     07DB  00C2               	movwf	getTime@tmpLeft
  1176     07DC                     l1665:
  1177                           
  1178                           ;RTC.c: 167:                     tmpRight = 0x00;
  1179     07DC  01C3               	clrf	getTime@tmpRight
  1180     07DD                     l1667:
  1181                           
  1182                           ;RTC.c: 169:                 passTubeNum(tensHours,singleHours,10,tensMinutes,singleMinu
      +                          tes,10,tensSeconds,singleSeconds,tmpLeft,tmpRight);
  1183     07DD  083E               	movf	getTime@singleHours,w
  1184     07DE  00AA               	movwf	passTubeNum@tmp6
  1185     07DF  300A               	movlw	10
  1186     07E0  00AB               	movwf	passTubeNum@tmp5
  1187     07E1  0840               	movf	getTime@tensMinutes,w
  1188     07E2  00AC               	movwf	passTubeNum@tmp4
  1189     07E3  083D               	movf	getTime@singleMinutes,w
  1190     07E4  00AD               	movwf	passTubeNum@tmp3
  1191     07E5  300A               	movlw	10
  1192     07E6  00AE               	movwf	passTubeNum@tmp2
  1193     07E7  083F               	movf	getTime@tensSeconds,w
  1194     07E8  00AF               	movwf	passTubeNum@tmp1
  1195     07E9  083C               	movf	getTime@singleSeconds,w
  1196     07EA  00B0               	movwf	passTubeNum@tmp0
  1197     07EB  0842               	movf	getTime@tmpLeft,w
  1198     07EC  00B1               	movwf	passTubeNum@tmpLDP
  1199     07ED  0843               	movf	getTime@tmpRight,w
  1200     07EE  00B2               	movwf	passTubeNum@tmpRDP
  1201     07EF  0841               	movf	getTime@tensHours,w
  1202     07F0  24E4               	fcall	_passTubeNum
  1203     07F1                     l1669:
  1204                           
  1205                           ;RTC.c: 170:                 oldSeconds = seconds;
  1206     07F1  1283               	bcf	3,5	;RP0=0, select bank0
  1207     07F2  1303               	bcf	3,6	;RP1=0, select bank0
  1208     07F3  0846               	movf	getTime@seconds,w
  1209     07F4  00C9               	movwf	_oldSeconds
  1210     07F5                     l191:
  1211     07F5  0008               	return
  1212     07F6                     __end_of_getTime:
  1213                           
  1214                           	psect	text2
  1215     0605                     __ptext2:	
  1216 ;; *************** function _getDate *****************
  1217 ;; Defined at:
  1218 ;;		line 176 in file "RTC.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  year            1   17[BANK0h] unsigned char 
  1223 ;;  month           1   16[BANK0h] unsigned char 
  1224 ;;  day             1   15[BANK0h] unsigned char 
  1225 ;;  tensYear        1   14[BANK0h] unsigned char 
  1226 ;;  tensMonth       1   13[BANK0h] unsigned char 
  1227 ;;  tensDay         1   12[BANK0h] unsigned char 
  1228 ;;  singleYear      1   11[BANK0h] unsigned char 
  1229 ;;  singleMonth     1   10[BANK0h] unsigned char 
  1230 ;;  singleDay       1    9[BANK0h] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0       0
  1241 ;;      Locals:         0       9       0       0       0
  1242 ;;      Temps:          0       0       0       0       0
  1243 ;;      Totals:         0       9       0       0       0
  1244 ;;Total ram usage:        9 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; Hardware stack levels required when called: 4
  1247 ;; This function calls:
  1248 ;;		_I2C_SendACK
  1249 ;;		_endReadRTC
  1250 ;;		_passTubeNum
  1251 ;;		_readDataRTC
  1252 ;;		_reqReadRTC
  1253 ;;		_swapNibbles
  1254 ;; This function is called by:
  1255 ;;		_getTime
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259     0605                     _getDate:	
  1260                           ;psect for function _getDate
  1261                           
  1262     0605                     l1569:	
  1263                           ;incstack = 0
  1264                           ; Regs used in _getDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1265                           
  1266                           
  1267                           ;RTC.c: 177:     unsigned char day, month, year;;RTC.c: 178:     unsigned char singleDay
      +                          , singleMonth, singleYear;;RTC.c: 179:     unsigned char tensDay, tensMonth, tensYear;;R
      +                          TC.c: 180:     reqReadRTC(0x04);
  1268     0605  3004               	movlw	4
  1269     0606  2456               	fcall	_reqReadRTC
  1270                           
  1271                           ;RTC.c: 181:     day = readDataRTC();
  1272     0607  242C               	fcall	_readDataRTC
  1273     0608  1283               	bcf	3,5	;RP0=0, select bank0
  1274     0609  1303               	bcf	3,6	;RP1=0, select bank0
  1275     060A  00B9               	movwf	getDate@day
  1276     060B                     l1571:
  1277                           
  1278                           ;RTC.c: 182:     I2C_SendACK();
  1279     060B  24A3               	fcall	_I2C_SendACK
  1280     060C                     l1573:
  1281                           
  1282                           ;RTC.c: 183:     month = readDataRTC();
  1283     060C  242C               	fcall	_readDataRTC
  1284     060D  1283               	bcf	3,5	;RP0=0, select bank0
  1285     060E  1303               	bcf	3,6	;RP1=0, select bank0
  1286     060F  00BA               	movwf	getDate@month
  1287                           
  1288                           ;RTC.c: 184:     I2C_SendACK();
  1289     0610  24A3               	fcall	_I2C_SendACK
  1290     0611                     l1575:
  1291                           
  1292                           ;RTC.c: 185:     year = readDataRTC();
  1293     0611  242C               	fcall	_readDataRTC
  1294     0612  1283               	bcf	3,5	;RP0=0, select bank0
  1295     0613  1303               	bcf	3,6	;RP1=0, select bank0
  1296     0614  00BB               	movwf	getDate@year
  1297     0615                     l1577:
  1298                           
  1299                           ;RTC.c: 186:     endReadRTC();
  1300     0615  2421               	fcall	_endReadRTC
  1301     0616                     l1579:
  1302                           
  1303                           ;RTC.c: 187:     singleDay = (day & 0x0F);
  1304     0616  1283               	bcf	3,5	;RP0=0, select bank0
  1305     0617  1303               	bcf	3,6	;RP1=0, select bank0
  1306     0618  0839               	movf	getDate@day,w
  1307     0619  390F               	andlw	15
  1308     061A  00B3               	movwf	getDate@singleDay
  1309     061B                     l1581:
  1310                           
  1311                           ;RTC.c: 188:     tensDay = (swapNibbles(day) & 0x0F);
  1312     061B  0839               	movf	getDate@day,w
  1313     061C  24FD               	fcall	_swapNibbles
  1314     061D  390F               	andlw	15
  1315     061E  1283               	bcf	3,5	;RP0=0, select bank0
  1316     061F  1303               	bcf	3,6	;RP1=0, select bank0
  1317     0620  00B6               	movwf	getDate@tensDay
  1318     0621                     l1583:
  1319                           
  1320                           ;RTC.c: 189:     singleMonth = (month & 0x0F);
  1321     0621  083A               	movf	getDate@month,w
  1322     0622  390F               	andlw	15
  1323     0623  00B4               	movwf	getDate@singleMonth
  1324     0624                     l1585:
  1325                           
  1326                           ;RTC.c: 190:     tensMonth = (swapNibbles(month) & 0x0F);
  1327     0624  083A               	movf	getDate@month,w
  1328     0625  24FD               	fcall	_swapNibbles
  1329     0626  390F               	andlw	15
  1330     0627  1283               	bcf	3,5	;RP0=0, select bank0
  1331     0628  1303               	bcf	3,6	;RP1=0, select bank0
  1332     0629  00B7               	movwf	getDate@tensMonth
  1333     062A                     l1587:
  1334                           
  1335                           ;RTC.c: 191:     singleYear = (year & 0x0F);
  1336     062A  083B               	movf	getDate@year,w
  1337     062B  390F               	andlw	15
  1338     062C  00B5               	movwf	getDate@singleYear
  1339     062D                     l1589:
  1340                           
  1341                           ;RTC.c: 192:     tensYear = (swapNibbles(year) & 0x0F);
  1342     062D  083B               	movf	getDate@year,w
  1343     062E  24FD               	fcall	_swapNibbles
  1344     062F  390F               	andlw	15
  1345     0630  1283               	bcf	3,5	;RP0=0, select bank0
  1346     0631  1303               	bcf	3,6	;RP1=0, select bank0
  1347     0632  00B8               	movwf	getDate@tensYear
  1348     0633                     l1591:
  1349                           
  1350                           ;RTC.c: 193:     passTubeNum(tensDay,singleDay,10,tensMonth,singleMonth,10,tensYear,sing
      +                          leYear,0x00,0x00);
  1351     0633  0833               	movf	getDate@singleDay,w
  1352     0634  00AA               	movwf	passTubeNum@tmp6
  1353     0635  300A               	movlw	10
  1354     0636  00AB               	movwf	passTubeNum@tmp5
  1355     0637  0837               	movf	getDate@tensMonth,w
  1356     0638  00AC               	movwf	passTubeNum@tmp4
  1357     0639  0834               	movf	getDate@singleMonth,w
  1358     063A  00AD               	movwf	passTubeNum@tmp3
  1359     063B  300A               	movlw	10
  1360     063C  00AE               	movwf	passTubeNum@tmp2
  1361     063D  0838               	movf	getDate@tensYear,w
  1362     063E  00AF               	movwf	passTubeNum@tmp1
  1363     063F  0835               	movf	getDate@singleYear,w
  1364     0640  00B0               	movwf	passTubeNum@tmp0
  1365     0641  01B1               	clrf	passTubeNum@tmpLDP
  1366     0642  01B2               	clrf	passTubeNum@tmpRDP
  1367     0643  0836               	movf	getDate@tensDay,w
  1368     0644  24E4               	fcall	_passTubeNum
  1369     0645                     l194:
  1370     0645  0008               	return
  1371     0646                     __end_of_getDate:
  1372                           
  1373                           	psect	text3
  1374     04FD                     __ptext3:	
  1375 ;; *************** function _swapNibbles *****************
  1376 ;; Defined at:
  1377 ;;		line 88 in file "main.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  data            1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  data            1    3[COMMON] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      unsigned char 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2, status,0
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1391 ;;      Params:         0       0       0       0       0
  1392 ;;      Locals:         1       0       0       0       0
  1393 ;;      Temps:          3       0       0       0       0
  1394 ;;      Totals:         4       0       0       0       0
  1395 ;;Total ram usage:        4 bytes
  1396 ;; Hardware stack levels used: 1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_getTime
  1401 ;;		_getDate
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405     04FD                     _swapNibbles:	
  1406                           ;psect for function _swapNibbles
  1407                           
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _swapNibbles: [wreg+status,2+status,0]
  1411                           ;swapNibbles@data stored from wreg
  1412     04FD  00F3               	movwf	swapNibbles@data
  1413     04FE                     l1463:
  1414                           
  1415                           ;main.c: 89:     return ((data & 0x0F) << 4 | (data & 0xF0) >> 4);
  1416     04FE  0873               	movf	swapNibbles@data,w
  1417     04FF  00F0               	movwf	??_swapNibbles
  1418     0500  3004               	movlw	4
  1419     0501                     u665:
  1420     0501  1003               	clrc
  1421     0502  0CF0               	rrf	??_swapNibbles,f
  1422     0503  3EFF               	addlw	-1
  1423     0504  1D03               	skipz
  1424     0505  2D01               	goto	u665
  1425     0506  300F               	movlw	15
  1426     0507  0570               	andwf	??_swapNibbles,w
  1427     0508  00F1               	movwf	??_swapNibbles+1
  1428     0509  0873               	movf	swapNibbles@data,w
  1429     050A  390F               	andlw	15
  1430     050B  00F2               	movwf	??_swapNibbles+2
  1431     050C  3003               	movlw	3
  1432     050D                     u675:
  1433     050D  1003               	clrc
  1434     050E  0DF2               	rlf	??_swapNibbles+2,f
  1435     050F  3EFF               	addlw	-1
  1436     0510  1D03               	skipz
  1437     0511  2D0D               	goto	u675
  1438     0512  1003               	clrc
  1439     0513  0D72               	rlf	??_swapNibbles+2,w
  1440     0514  0471               	iorwf	??_swapNibbles+1,w
  1441     0515                     l67:
  1442     0515  0008               	return
  1443     0516                     __end_of_swapNibbles:
  1444                           
  1445                           	psect	text4
  1446     042C                     __ptext4:	
  1447 ;; *************** function _readDataRTC *****************
  1448 ;; Defined at:
  1449 ;;		line 16 in file "RTC.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  data            1    3[COMMON] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      unsigned char 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1463 ;;      Params:         0       0       0       0       0
  1464 ;;      Locals:         1       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0
  1466 ;;      Totals:         1       0       0       0       0
  1467 ;;Total ram usage:        1 bytes
  1468 ;; Hardware stack levels used: 1
  1469 ;; Hardware stack levels required when called: 1
  1470 ;; This function calls:
  1471 ;;		_I2C_ReadByte
  1472 ;; This function is called by:
  1473 ;;		_getTime
  1474 ;;		_getDate
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478     042C                     _readDataRTC:	
  1479                           ;psect for function _readDataRTC
  1480                           
  1481     042C                     l1469:	
  1482                           ;incstack = 0
  1483                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1484                           
  1485                           
  1486                           ;RTC.c: 17:     unsigned char data;;RTC.c: 18:     data = I2C_ReadByte();
  1487     042C  2579               	fcall	_I2C_ReadByte
  1488     042D  00F3               	movwf	readDataRTC@data
  1489     042E                     l1471:
  1490                           
  1491                           ;RTC.c: 19:     return data;
  1492     042E  0873               	movf	readDataRTC@data,w
  1493     042F                     l145:
  1494     042F  0008               	return
  1495     0430                     __end_of_readDataRTC:
  1496                           
  1497                           	psect	text5
  1498     04E4                     __ptext5:	
  1499 ;; *************** function _passTubeNum *****************
  1500 ;; Defined at:
  1501 ;;		line 146 in file "tubes.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  tmp7            1    wreg     unsigned char 
  1504 ;;  tmp6            1    0[BANK0h] unsigned char 
  1505 ;;  tmp5            1    1[BANK0h] unsigned char 
  1506 ;;  tmp4            1    2[BANK0h] unsigned char 
  1507 ;;  tmp3            1    3[BANK0h] unsigned char 
  1508 ;;  tmp2            1    4[BANK0h] unsigned char 
  1509 ;;  tmp1            1    5[BANK0h] unsigned char 
  1510 ;;  tmp0            1    6[BANK0h] unsigned char 
  1511 ;;  tmpLDP          1    7[BANK0h] unsigned char 
  1512 ;;  tmpRDP          1    8[BANK0h] unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  tmp7            1    8[COMMON] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1524 ;;      Params:         0       9       0       0       0
  1525 ;;      Locals:         1       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0
  1527 ;;      Totals:         1       9       0       0       0
  1528 ;;Total ram usage:       10 bytes
  1529 ;; Hardware stack levels used: 1
  1530 ;; Hardware stack levels required when called: 3
  1531 ;; This function calls:
  1532 ;;		_loadDisplay
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;;		_getTime
  1536 ;;		_getDate
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540     04E4                     _passTubeNum:	
  1541                           ;psect for function _passTubeNum
  1542                           
  1543                           
  1544                           ;incstack = 0
  1545                           ; Regs used in _passTubeNum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1546                           ;passTubeNum@tmp7 stored from wreg
  1547     04E4  00F8               	movwf	passTubeNum@tmp7
  1548     04E5                     l1459:
  1549                           
  1550                           ;tubes.c: 147:     T0 = tmp0;
  1551     04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1552     04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1553     04E7  0830               	movf	passTubeNum@tmp0,w
  1554     04E8  00A2               	movwf	34
  1555                           
  1556                           ;tubes.c: 148:     T1 = tmp1;
  1557     04E9  082F               	movf	passTubeNum@tmp1,w
  1558     04EA  00A3               	movwf	35
  1559                           
  1560                           ;tubes.c: 149:     T2 = tmp2;
  1561     04EB  082E               	movf	passTubeNum@tmp2,w
  1562     04EC  00A4               	movwf	36
  1563                           
  1564                           ;tubes.c: 150:     T3 = tmp3;
  1565     04ED  082D               	movf	passTubeNum@tmp3,w
  1566     04EE  00A5               	movwf	37
  1567                           
  1568                           ;tubes.c: 151:     T4 = tmp4;
  1569     04EF  082C               	movf	passTubeNum@tmp4,w
  1570     04F0  00A6               	movwf	38
  1571                           
  1572                           ;tubes.c: 152:     T5 = tmp5;
  1573     04F1  082B               	movf	passTubeNum@tmp5,w
  1574     04F2  00A7               	movwf	39
  1575                           
  1576                           ;tubes.c: 153:     T6 = tmp6;
  1577     04F3  082A               	movf	passTubeNum@tmp6,w
  1578     04F4  00A8               	movwf	40
  1579                           
  1580                           ;tubes.c: 154:     T7 = tmp7;
  1581     04F5  0878               	movf	passTubeNum@tmp7,w
  1582     04F6  00A9               	movwf	41
  1583                           
  1584                           ;tubes.c: 155:     leftDP = tmpLDP;
  1585     04F7  0831               	movf	passTubeNum@tmpLDP,w
  1586     04F8  00C8               	movwf	_leftDP
  1587                           
  1588                           ;tubes.c: 156:     rightDP = tmpRDP;
  1589     04F9  0832               	movf	passTubeNum@tmpRDP,w
  1590     04FA  00C7               	movwf	_rightDP
  1591     04FB                     l1461:
  1592                           
  1593                           ;tubes.c: 157:     loadDisplay();
  1594     04FB  2646               	fcall	_loadDisplay
  1595     04FC                     l285:
  1596     04FC  0008               	return
  1597     04FD                     __end_of_passTubeNum:
  1598                           
  1599                           	psect	text6
  1600     04A3                     __ptext6:	
  1601 ;; *************** function _I2C_SendACK *****************
  1602 ;; Defined at:
  1603 ;;		line 97 in file "IIC.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		None
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1617 ;;      Params:         0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_getTime
  1627 ;;		_getDate
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631     04A3                     _I2C_SendACK:	
  1632                           ;psect for function _I2C_SendACK
  1633                           
  1634     04A3                     l1467:	
  1635                           ;incstack = 0
  1636                           ; Regs used in _I2C_SendACK: []
  1637                           
  1638                           
  1639                           ;IIC.c: 98:     TRISAbits.TRISA0 = 0;
  1640     04A3  1683               	bsf	3,5	;RP0=1, select bank1
  1641     04A4  1303               	bcf	3,6	;RP1=0, select bank1
  1642     04A5  1005               	bcf	5,0	;volatile
  1643                           
  1644                           ;IIC.c: 99:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1645     04A6  2CA7               	nop2	;2 cycle nop
  1646                           
  1647                           ;IIC.c: 100:     TRISAbits.TRISA1 = 0;
  1648     04A7  1683               	bsf	3,5	;RP0=1, select bank1
  1649     04A8  1303               	bcf	3,6	;RP1=0, select bank1
  1650     04A9  1085               	bcf	5,1	;volatile
  1651                           
  1652                           ;IIC.c: 101:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1653     04AA  2CAB               	nop2	;2 cycle nop
  1654                           
  1655                           ;IIC.c: 102:     TRISAbits.TRISA0 = 1;
  1656     04AB  1683               	bsf	3,5	;RP0=1, select bank1
  1657     04AC  1303               	bcf	3,6	;RP1=0, select bank1
  1658     04AD  1405               	bsf	5,0	;volatile
  1659                           
  1660                           ;IIC.c: 103:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1661     04AE  2CAF               	nop2	;2 cycle nop
  1662     04AF  2CB0               	nop2	;2 cycle nop
  1663     04B0  0000               	nop
  1664     04B1                     l106:
  1665     04B1  0008               	return
  1666     04B2                     __end_of_I2C_SendACK:
  1667                           
  1668                           	psect	text7
  1669     05A4                     __ptext7:	
  1670 ;; *************** function _Init *****************
  1671 ;; Defined at:
  1672 ;;		line 64 in file "main.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1686 ;;      Params:         0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0
  1689 ;;      Totals:         0       0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used: 1
  1692 ;; Hardware stack levels required when called: 5
  1693 ;; This function calls:
  1694 ;;		_InitI2C
  1695 ;;		_InitTubes
  1696 ;;		_checkRTCType
  1697 ;;		_isRTCRunning
  1698 ;;		_startRTC
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704     05A4                     _Init:	
  1705                           ;psect for function _Init
  1706                           
  1707     05A4                     l1593:	
  1708                           ;incstack = 0
  1709                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1710                           
  1711                           
  1712                           ;main.c: 65:     CMCON = 0b111;
  1713     05A4  3007               	movlw	7
  1714     05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1715     05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1716     05A7  009F               	movwf	31	;volatile
  1717                           
  1718                           ;main.c: 66:     TRISA = 0b00101111;
  1719     05A8  302F               	movlw	47
  1720     05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1721     05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1722     05AB  0085               	movwf	5	;volatile
  1723     05AC                     l1595:
  1724                           
  1725                           ;main.c: 67:     TRISB = 0b00000000;
  1726     05AC  0186               	clrf	6	;volatile
  1727     05AD                     l1597:
  1728                           
  1729                           ;main.c: 68:     OPTION_REG = 0b11011111;
  1730     05AD  30DF               	movlw	223
  1731     05AE  0081               	movwf	1	;volatile
  1732                           
  1733                           ;main.c: 69:     PORTA_SHADOW = 0x00;
  1734     05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1735     05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1736     05B1  01CC               	clrf	_PORTA_SHADOW
  1737                           
  1738                           ;main.c: 70:     PORTB_SHADOW = 0x00;
  1739     05B2  01CB               	clrf	_PORTB_SHADOW
  1740     05B3                     l1599:
  1741                           
  1742                           ;main.c: 71:     PORTB = PORTB_SHADOW;
  1743     05B3  084B               	movf	_PORTB_SHADOW,w
  1744     05B4  0086               	movwf	6	;volatile
  1745     05B5                     l1601:
  1746                           
  1747                           ;main.c: 72:     Flag = 0x10;
  1748     05B5  3010               	movlw	16
  1749     05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1750     05B7  1303               	bcf	3,6	;RP1=0, select bank1
  1751     05B8  00A0               	movwf	_Flag^(0+128)
  1752                           
  1753                           ;main.c: 73:     ErrFlag = 0x00;
  1754     05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1755     05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1756     05BB  01CA               	clrf	_ErrFlag
  1757     05BC                     l1603:
  1758                           
  1759                           ;main.c: 74:     InitI2C();
  1760     05BC  244D               	fcall	_InitI2C
  1761     05BD                     l1605:
  1762                           
  1763                           ;main.c: 75:     InitTubes();
  1764     05BD  2424               	fcall	_InitTubes
  1765     05BE                     l1607:
  1766                           
  1767                           ;main.c: 77:     if(isRTCRunning()) {
  1768     05BE  2479               	fcall	_isRTCRunning
  1769     05BF  1C03               	btfss	3,0
  1770     05C0  2DC2               	goto	u761
  1771     05C1  2DC3               	goto	u760
  1772     05C2                     u761:
  1773     05C2  2DC8               	goto	l1613
  1774     05C3                     u760:
  1775     05C3                     l1609:
  1776                           
  1777                           ;main.c: 78:         ((Flag) |= (1<<4));
  1778     05C3  1683               	bsf	3,5	;RP0=1, select bank1
  1779     05C4  1303               	bcf	3,6	;RP1=0, select bank1
  1780     05C5  1620               	bsf	_Flag^(0+128),4
  1781     05C6                     l1611:
  1782                           
  1783                           ;main.c: 79:         startRTC();
  1784     05C6  26CC               	fcall	_startRTC
  1785                           
  1786                           ;main.c: 80:     } else {
  1787     05C7  2DCE               	goto	l64
  1788     05C8                     l1613:
  1789                           
  1790                           ;main.c: 81:         if(checkRTCType()) {
  1791     05C8  25CF               	fcall	_checkRTCType
  1792     05C9  1C03               	btfss	3,0
  1793     05CA  2DCC               	goto	u771
  1794     05CB  2DCD               	goto	u770
  1795     05CC                     u771:
  1796     05CC  2DCE               	goto	l64
  1797     05CD                     u770:
  1798     05CD  2DC6               	goto	l1611
  1799     05CE                     l64:
  1800     05CE  0008               	return
  1801     05CF                     __end_of_Init:
  1802                           
  1803                           	psect	text8
  1804     06CC                     __ptext8:	
  1805 ;; *************** function _startRTC *****************
  1806 ;; Defined at:
  1807 ;;		line 69 in file "RTC.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  RTCaddress      1   11[COMMON] unsigned char 
  1812 ;;  clockTest       1   10[COMMON] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1822 ;;      Params:         0       0       0       0       0
  1823 ;;      Locals:         2       0       0       0       0
  1824 ;;      Temps:          1       0       0       0       0
  1825 ;;      Totals:         3       0       0       0       0
  1826 ;;Total ram usage:        3 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 4
  1829 ;; This function calls:
  1830 ;;		_displayError
  1831 ;;		_endWriteRTC
  1832 ;;		_readByteRTC
  1833 ;;		_reqWriteRTC
  1834 ;;		_writeDataRTC
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;;		_Init
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841     06CC                     _startRTC:	
  1842                           ;psect for function _startRTC
  1843                           
  1844     06CC                     l1495:	
  1845                           ;incstack = 0
  1846                           ; Regs used in _startRTC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1847                           
  1848                           
  1849                           ;RTC.c: 70:     unsigned char clockTest, RTCaddress;;RTC.c: 71:     reqWriteRTC(0x00);
  1850     06CC  3000               	movlw	0
  1851     06CD  2437               	fcall	_reqWriteRTC
  1852                           
  1853                           ;RTC.c: 72:     writeDataRTC(0x00);
  1854     06CE  3000               	movlw	0
  1855     06CF  2428               	fcall	_writeDataRTC
  1856                           
  1857                           ;RTC.c: 74:     writeDataRTC(0x30);
  1858     06D0  3030               	movlw	48
  1859     06D1  2428               	fcall	_writeDataRTC
  1860                           
  1861                           ;RTC.c: 75:     writeDataRTC(0x12);
  1862     06D2  3012               	movlw	18
  1863     06D3  2428               	fcall	_writeDataRTC
  1864     06D4                     l1497:
  1865                           
  1866                           ;RTC.c: 76:     endWriteRTC();
  1867     06D4  241F               	fcall	_endWriteRTC
  1868     06D5                     l1499:
  1869                           
  1870                           ;RTC.c: 77:     reqWriteRTC(0x04);
  1871     06D5  3004               	movlw	4
  1872     06D6  2437               	fcall	_reqWriteRTC
  1873     06D7                     l1501:
  1874                           
  1875                           ;RTC.c: 78:     writeDataRTC(0x28);
  1876     06D7  3028               	movlw	40
  1877     06D8  2428               	fcall	_writeDataRTC
  1878     06D9                     l1503:
  1879                           
  1880                           ;RTC.c: 79:     writeDataRTC(0x7);
  1881     06D9  3007               	movlw	7
  1882     06DA  2428               	fcall	_writeDataRTC
  1883     06DB                     l1505:
  1884                           
  1885                           ;RTC.c: 80:     writeDataRTC(0x10);
  1886     06DB  3010               	movlw	16
  1887     06DC  2428               	fcall	_writeDataRTC
  1888     06DD                     l1507:
  1889                           
  1890                           ;RTC.c: 81:     endWriteRTC();
  1891     06DD  241F               	fcall	_endWriteRTC
  1892                           
  1893                           ;RTC.c: 83:     reqWriteRTC(0x14);
  1894     06DE  3014               	movlw	20
  1895     06DF  2437               	fcall	_reqWriteRTC
  1896                           
  1897                           ;RTC.c: 84:     writeDataRTC(0x00);
  1898     06E0  3000               	movlw	0
  1899     06E1  2428               	fcall	_writeDataRTC
  1900                           
  1901                           ;RTC.c: 85:     writeDataRTC(0x00);
  1902     06E2  3000               	movlw	0
  1903     06E3  2428               	fcall	_writeDataRTC
  1904     06E4                     l1509:
  1905                           
  1906                           ;RTC.c: 86:     endWriteRTC();
  1907     06E4  241F               	fcall	_endWriteRTC
  1908     06E5                     l1511:
  1909                           
  1910                           ;RTC.c: 88:     if(((Flag)>>(4) & 1)) {
  1911     06E5  1683               	bsf	3,5	;RP0=1, select bank1
  1912     06E6  1303               	bcf	3,6	;RP1=0, select bank1
  1913     06E7  0820               	movf	_Flag^(0+128),w
  1914     06E8  00F9               	movwf	??_startRTC
  1915     06E9  3004               	movlw	4
  1916     06EA                     u685:
  1917     06EA  1003               	clrc
  1918     06EB  0CF9               	rrf	??_startRTC,f
  1919     06EC  3EFF               	addlw	-1
  1920     06ED  1D03               	skipz
  1921     06EE  2EEA               	goto	u685
  1922     06EF  1C79               	btfss	??_startRTC,0
  1923     06F0  2EF2               	goto	u691
  1924     06F1  2EF3               	goto	u690
  1925     06F2                     u691:
  1926     06F2  2EF5               	goto	l1515
  1927     06F3                     u690:
  1928     06F3                     l1513:
  1929                           
  1930                           ;RTC.c: 89:         RTCaddress = 0x00;
  1931     06F3  01FB               	clrf	startRTC@RTCaddress
  1932                           
  1933                           ;RTC.c: 90:     } else {
  1934     06F4  2EF7               	goto	l1517
  1935     06F5                     l1515:
  1936                           
  1937                           ;RTC.c: 91:         RTCaddress = 0x0F;
  1938     06F5  300F               	movlw	15
  1939     06F6  00FB               	movwf	startRTC@RTCaddress
  1940     06F7                     l1517:
  1941                           
  1942                           ;RTC.c: 94:     clockTest = readByteRTC(RTCaddress);
  1943     06F7  087B               	movf	startRTC@RTCaddress,w
  1944     06F8  2445               	fcall	_readByteRTC
  1945     06F9  00FA               	movwf	startRTC@clockTest
  1946     06FA                     l1519:
  1947                           
  1948                           ;RTC.c: 95:     if(!((clockTest)>>(7) & 1)) {
  1949     06FA  087A               	movf	startRTC@clockTest,w
  1950     06FB  00F9               	movwf	??_startRTC
  1951     06FC  3007               	movlw	7
  1952     06FD                     u705:
  1953     06FD  1003               	clrc
  1954     06FE  0CF9               	rrf	??_startRTC,f
  1955     06FF  3EFF               	addlw	-1
  1956     0700  1D03               	skipz
  1957     0701  2EFD               	goto	u705
  1958     0702  1879               	btfsc	??_startRTC,0
  1959     0703  2F05               	goto	u711
  1960     0704  2F06               	goto	u710
  1961     0705                     u711:
  1962     0705  2F11               	goto	l171
  1963     0706                     u710:
  1964     0706                     l1521:
  1965                           
  1966                           ;RTC.c: 96:         ((ErrFlag) &= ~(1<<1));
  1967     0706  30FD               	movlw	253
  1968     0707  00FF               	movwf	btemp+1
  1969     0708  087F               	movf	btemp+1,w
  1970     0709  1283               	bcf	3,5	;RP0=0, select bank0
  1971     070A  1303               	bcf	3,6	;RP1=0, select bank0
  1972     070B  05CA               	andwf	_ErrFlag,f
  1973                           
  1974                           ;RTC.c: 97:         ((ErrFlag) &= ~(1<<0));
  1975     070C  30FE               	movlw	254
  1976     070D  00FF               	movwf	btemp+1
  1977     070E  087F               	movf	btemp+1,w
  1978     070F  05CA               	andwf	_ErrFlag,f
  1979                           
  1980                           ;RTC.c: 98:     } else {
  1981     0710  2F15               	goto	l173
  1982     0711                     l171:
  1983                           
  1984                           ;RTC.c: 100:         ((ErrFlag) |= (1<<1));
  1985     0711  1283               	bcf	3,5	;RP0=0, select bank0
  1986     0712  1303               	bcf	3,6	;RP1=0, select bank0
  1987     0713  14CA               	bsf	_ErrFlag,1
  1988     0714                     l1523:
  1989                           
  1990                           ;RTC.c: 101:         displayError();
  1991     0714  2531               	fcall	_displayError
  1992     0715                     l173:
  1993     0715  0008               	return
  1994     0716                     __end_of_startRTC:
  1995                           
  1996                           	psect	text9
  1997     0531                     __ptext9:	
  1998 ;; *************** function _displayError *****************
  1999 ;; Defined at:
  2000 ;;		line 115 in file "tubes.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2014 ;;      Params:         0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0
  2016 ;;      Temps:          1       0       0       0       0
  2017 ;;      Totals:         1       0       0       0       0
  2018 ;;Total ram usage:        1 bytes
  2019 ;; Hardware stack levels used: 1
  2020 ;; Hardware stack levels required when called: 3
  2021 ;; This function calls:
  2022 ;;		_blankTubes
  2023 ;;		_loadDisplay
  2024 ;; This function is called by:
  2025 ;;		_main
  2026 ;;		_startRTC
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030     0531                     _displayError:	
  2031                           ;psect for function _displayError
  2032                           
  2033     0531                     l1443:	
  2034                           ;incstack = 0
  2035                           ; Regs used in _displayError: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2036                           
  2037                           
  2038                           ;tubes.c: 116:     blankTubes();
  2039     0531  2516               	fcall	_blankTubes
  2040     0532                     l1445:
  2041                           
  2042                           ;tubes.c: 117:     if(((ErrFlag)>>(1) & 1)) {
  2043     0532  1283               	bcf	3,5	;RP0=0, select bank0
  2044     0533  1303               	bcf	3,6	;RP1=0, select bank0
  2045     0534  084A               	movf	_ErrFlag,w
  2046     0535  00F8               	movwf	??_displayError
  2047     0536  3001               	movlw	1
  2048     0537                     u635:
  2049     0537  1003               	clrc
  2050     0538  0CF8               	rrf	??_displayError,f
  2051     0539  3EFF               	addlw	-1
  2052     053A  1D03               	skipz
  2053     053B  2D37               	goto	u635
  2054     053C  1C78               	btfss	??_displayError,0
  2055     053D  2D3F               	goto	u641
  2056     053E  2D40               	goto	u640
  2057     053F                     u641:
  2058     053F  2D48               	goto	l273
  2059     0540                     u640:
  2060     0540                     l1447:
  2061                           
  2062                           ;tubes.c: 118:         T0 = T1 = T2 = 6;
  2063     0540  3006               	movlw	6
  2064     0541  00A4               	movwf	36
  2065     0542  00A3               	movwf	35
  2066     0543  00A2               	movwf	34
  2067     0544                     l1449:
  2068                           
  2069                           ;tubes.c: 119:         leftDP = rightDP = 0x00;
  2070     0544  01C7               	clrf	_rightDP
  2071     0545  01C8               	clrf	_leftDP
  2072     0546                     l1451:
  2073                           
  2074                           ;tubes.c: 120:         loadDisplay();
  2075     0546  2646               	fcall	_loadDisplay
  2076                           
  2077                           ;tubes.c: 121:     } else if (((ErrFlag)>>(0) & 1)) {
  2078     0547  2D51               	goto	l276
  2079     0548                     l273:
  2080     0548  1C4A               	btfss	_ErrFlag,0
  2081     0549  2D4B               	goto	u651
  2082     054A  2D4C               	goto	u650
  2083     054B                     u651:
  2084     054B  2D51               	goto	l276
  2085     054C                     u650:
  2086     054C                     l1453:
  2087                           
  2088                           ;tubes.c: 122:         T0 = T1 = T2 = 9;
  2089     054C  3009               	movlw	9
  2090     054D  00A4               	movwf	36
  2091     054E  00A3               	movwf	35
  2092     054F  00A2               	movwf	34
  2093     0550  2D44               	goto	l1449
  2094     0551                     l276:
  2095     0551  0008               	return
  2096     0552                     __end_of_displayError:
  2097                           
  2098                           	psect	text10
  2099     0479                     __ptext10:	
  2100 ;; *************** function _isRTCRunning *****************
  2101 ;; Defined at:
  2102 ;;		line 62 in file "RTC.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  data            1    9[COMMON] unsigned char 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;		None               void
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2116 ;;      Params:         0       0       0       0       0
  2117 ;;      Locals:         1       0       0       0       0
  2118 ;;      Temps:          1       0       0       0       0
  2119 ;;      Totals:         2       0       0       0       0
  2120 ;;Total ram usage:        2 bytes
  2121 ;; Hardware stack levels used: 1
  2122 ;; Hardware stack levels required when called: 3
  2123 ;; This function calls:
  2124 ;;		_readByteRTC
  2125 ;; This function is called by:
  2126 ;;		_Init
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130     0479                     _isRTCRunning:	
  2131                           ;psect for function _isRTCRunning
  2132                           
  2133     0479                     l1531:	
  2134                           ;incstack = 0
  2135                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2136                           
  2137                           
  2138                           ;RTC.c: 63:     unsigned char data;;RTC.c: 64:     data = readByteRTC(0x00);
  2139     0479  3000               	movlw	0
  2140     047A  2445               	fcall	_readByteRTC
  2141     047B  00F9               	movwf	isRTCRunning@data
  2142     047C                     l1533:
  2143                           
  2144                           ;RTC.c: 65:     return ((data)>>(7) & 1);
  2145     047C  0879               	movf	isRTCRunning@data,w
  2146     047D  00F8               	movwf	??_isRTCRunning
  2147     047E  3007               	movlw	7
  2148     047F                     u725:
  2149     047F  1003               	clrc
  2150     0480  0CF8               	rrf	??_isRTCRunning,f
  2151     0481  3EFF               	addlw	-1
  2152     0482  1D03               	skipz
  2153     0483  2C7F               	goto	u725
  2154     0484  0C78               	rrf	??_isRTCRunning,w
  2155     0485                     l166:
  2156     0485  0008               	return
  2157     0486                     __end_of_isRTCRunning:
  2158                           
  2159                           	psect	text11
  2160     05CF                     __ptext11:	
  2161 ;; *************** function _checkRTCType *****************
  2162 ;; Defined at:
  2163 ;;		line 106 in file "RTC.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  data            1    9[COMMON] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2177 ;;      Params:         0       0       0       0       0
  2178 ;;      Locals:         1       0       0       0       0
  2179 ;;      Temps:          1       0       0       0       0
  2180 ;;      Totals:         2       0       0       0       0
  2181 ;;Total ram usage:        2 bytes
  2182 ;; Hardware stack levels used: 1
  2183 ;; Hardware stack levels required when called: 3
  2184 ;; This function calls:
  2185 ;;		_readByteRTC
  2186 ;;		_writeByteRTC
  2187 ;; This function is called by:
  2188 ;;		_Init
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192     05CF                     _checkRTCType:	
  2193                           ;psect for function _checkRTCType
  2194                           
  2195     05CF                     l1537:	
  2196                           ;incstack = 0
  2197                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2198                           
  2199                           
  2200                           ;RTC.c: 107:     unsigned char data;;RTC.c: 108:     data = readByteRTC(0x0F);
  2201     05CF  300F               	movlw	15
  2202     05D0  2445               	fcall	_readByteRTC
  2203     05D1  00F9               	movwf	checkRTCType@data
  2204     05D2                     l1539:
  2205                           
  2206                           ;RTC.c: 109:     if(((data)>>(7) & 1)) {
  2207     05D2  0879               	movf	checkRTCType@data,w
  2208     05D3  00F8               	movwf	??_checkRTCType
  2209     05D4  3007               	movlw	7
  2210     05D5                     u735:
  2211     05D5  1003               	clrc
  2212     05D6  0CF8               	rrf	??_checkRTCType,f
  2213     05D7  3EFF               	addlw	-1
  2214     05D8  1D03               	skipz
  2215     05D9  2DD5               	goto	u735
  2216     05DA  1C78               	btfss	??_checkRTCType,0
  2217     05DB  2DDD               	goto	u741
  2218     05DC  2DDE               	goto	u740
  2219     05DD                     u741:
  2220     05DD  2E03               	goto	l1565
  2221     05DE                     u740:
  2222     05DE                     l1541:
  2223                           
  2224                           ;RTC.c: 112:         ((data) &= ~(1<<0));
  2225     05DE  30FE               	movlw	254
  2226     05DF  00FF               	movwf	btemp+1
  2227     05E0  087F               	movf	btemp+1,w
  2228     05E1  05F9               	andwf	checkRTCType@data,f
  2229     05E2                     l1543:
  2230                           
  2231                           ;RTC.c: 113:         writeByteRTC(0x0F,data);
  2232     05E2  0879               	movf	checkRTCType@data,w
  2233     05E3  00F6               	movwf	writeByteRTC@data
  2234     05E4  300F               	movlw	15
  2235     05E5  243E               	fcall	_writeByteRTC
  2236     05E6                     l1545:
  2237                           
  2238                           ;RTC.c: 114:         ((data) |= (1<<0));
  2239     05E6  1479               	bsf	checkRTCType@data,0
  2240     05E7                     l1547:
  2241                           
  2242                           ;RTC.c: 115:         writeByteRTC(0x0F,data);
  2243     05E7  0879               	movf	checkRTCType@data,w
  2244     05E8  00F6               	movwf	writeByteRTC@data
  2245     05E9  300F               	movlw	15
  2246     05EA  243E               	fcall	_writeByteRTC
  2247     05EB                     l1549:
  2248                           
  2249                           ;RTC.c: 116:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  2250     05EB  2DEC               	nop2	;2 cycle nop
  2251     05EC  2DED               	nop2	;2 cycle nop
  2252     05ED  0000               	nop
  2253     05EE                     l1551:
  2254                           
  2255                           ;RTC.c: 117:         data = readByteRTC(0x0F);
  2256     05EE  300F               	movlw	15
  2257     05EF  2445               	fcall	_readByteRTC
  2258     05F0  00F9               	movwf	checkRTCType@data
  2259     05F1                     l1553:
  2260                           
  2261                           ;RTC.c: 118:         if(!((data)>>(0) & 1)) {
  2262     05F1  1879               	btfsc	checkRTCType@data,0
  2263     05F2  2DF4               	goto	u751
  2264     05F3  2DF5               	goto	u750
  2265     05F4                     u751:
  2266     05F4  2E00               	goto	l177
  2267     05F5                     u750:
  2268     05F5                     l1555:
  2269                           
  2270                           ;RTC.c: 119:             writeByteRTC(0x0F, 0x00);
  2271     05F5  01F6               	clrf	writeByteRTC@data
  2272     05F6  300F               	movlw	15
  2273     05F7  243E               	fcall	_writeByteRTC
  2274     05F8                     l1557:
  2275                           
  2276                           ;RTC.c: 120:             ((Flag) &= ~(1<<4));
  2277     05F8  30EF               	movlw	239
  2278     05F9  00FF               	movwf	btemp+1
  2279     05FA  087F               	movf	btemp+1,w
  2280     05FB  1683               	bsf	3,5	;RP0=1, select bank1
  2281     05FC  1303               	bcf	3,6	;RP1=0, select bank1
  2282     05FD  05A0               	andwf	_Flag^(0+128),f
  2283     05FE                     l1559:
  2284                           
  2285                           ;RTC.c: 121:             return 1;
  2286     05FE  1403               	setc
  2287     05FF  2E04               	goto	l178
  2288     0600                     l177:
  2289                           
  2290                           ;RTC.c: 123:             ((Flag) |= (1<<4));
  2291     0600  1683               	bsf	3,5	;RP0=1, select bank1
  2292     0601  1303               	bcf	3,6	;RP1=0, select bank1
  2293     0602  1620               	bsf	_Flag^(0+128),4
  2294     0603                     l1565:
  2295                           
  2296                           ;RTC.c: 126:     return 0;
  2297     0603  1003               	clrc
  2298     0604                     l178:
  2299     0604  0008               	return
  2300     0605                     __end_of_checkRTCType:
  2301                           
  2302                           	psect	text12
  2303     043E                     __ptext12:	
  2304 ;; *************** function _writeByteRTC *****************
  2305 ;; Defined at:
  2306 ;;		line 55 in file "RTC.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  address         1    wreg     unsigned char 
  2309 ;;  data            1    6[COMMON] unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  address         1    7[COMMON] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2321 ;;      Params:         1       0       0       0       0
  2322 ;;      Locals:         1       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0
  2324 ;;      Totals:         2       0       0       0       0
  2325 ;;Total ram usage:        2 bytes
  2326 ;; Hardware stack levels used: 1
  2327 ;; Hardware stack levels required when called: 2
  2328 ;; This function calls:
  2329 ;;		_endWriteRTC
  2330 ;;		_reqWriteRTC
  2331 ;;		_writeDataRTC
  2332 ;; This function is called by:
  2333 ;;		_checkRTCType
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337     043E                     _writeByteRTC:	
  2338                           ;psect for function _writeByteRTC
  2339                           
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2343                           ;writeByteRTC@address stored from wreg
  2344     043E  00F7               	movwf	writeByteRTC@address
  2345     043F                     l1487:
  2346                           
  2347                           ;RTC.c: 56:     reqWriteRTC(address);
  2348     043F  0877               	movf	writeByteRTC@address,w
  2349     0440  2437               	fcall	_reqWriteRTC
  2350                           
  2351                           ;RTC.c: 57:     writeDataRTC(data);
  2352     0441  0876               	movf	writeByteRTC@data,w
  2353     0442  2428               	fcall	_writeDataRTC
  2354     0443                     l1489:
  2355                           
  2356                           ;RTC.c: 58:     endWriteRTC();
  2357     0443  241F               	fcall	_endWriteRTC
  2358     0444                     l163:
  2359     0444  0008               	return
  2360     0445                     __end_of_writeByteRTC:
  2361                           
  2362                           	psect	text13
  2363     0428                     __ptext13:	
  2364 ;; *************** function _writeDataRTC *****************
  2365 ;; Defined at:
  2366 ;;		line 45 in file "RTC.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  data            1    wreg     unsigned char 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  data            1    5[COMMON] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2380 ;;      Params:         0       0       0       0       0
  2381 ;;      Locals:         1       0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0
  2383 ;;      Totals:         1       0       0       0       0
  2384 ;;Total ram usage:        1 bytes
  2385 ;; Hardware stack levels used: 1
  2386 ;; Hardware stack levels required when called: 1
  2387 ;; This function calls:
  2388 ;;		_I2C_WriteByte
  2389 ;; This function is called by:
  2390 ;;		_writeByteRTC
  2391 ;;		_startRTC
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395     0428                     _writeDataRTC:	
  2396                           ;psect for function _writeDataRTC
  2397                           
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2401                           ;writeDataRTC@data stored from wreg
  2402     0428  00F5               	movwf	writeDataRTC@data
  2403     0429                     l1375:
  2404                           
  2405                           ;RTC.c: 46:     I2C_WriteByte(data);
  2406     0429  0875               	movf	writeDataRTC@data,w
  2407     042A  2716               	fcall	_I2C_WriteByte
  2408     042B                     l157:
  2409     042B  0008               	return
  2410     042C                     __end_of_writeDataRTC:
  2411                           
  2412                           	psect	text14
  2413     0437                     __ptext14:	
  2414 ;; *************** function _reqWriteRTC *****************
  2415 ;; Defined at:
  2416 ;;		line 38 in file "RTC.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  address         1    wreg     unsigned char 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  address         1    5[COMMON] unsigned char 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2430 ;;      Params:         0       0       0       0       0
  2431 ;;      Locals:         1       0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0
  2433 ;;      Totals:         1       0       0       0       0
  2434 ;;Total ram usage:        1 bytes
  2435 ;; Hardware stack levels used: 1
  2436 ;; Hardware stack levels required when called: 1
  2437 ;; This function calls:
  2438 ;;		_I2C_Start
  2439 ;;		_I2C_WriteByte
  2440 ;; This function is called by:
  2441 ;;		_writeByteRTC
  2442 ;;		_startRTC
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446     0437                     _reqWriteRTC:	
  2447                           ;psect for function _reqWriteRTC
  2448                           
  2449                           
  2450                           ;incstack = 0
  2451                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2452                           ;reqWriteRTC@address stored from wreg
  2453     0437  00F5               	movwf	reqWriteRTC@address
  2454     0438                     l1369:
  2455                           
  2456                           ;RTC.c: 39:     I2C_Start();
  2457     0438  2486               	fcall	_I2C_Start
  2458     0439                     l1371:
  2459                           
  2460                           ;RTC.c: 40:     I2C_WriteByte(0b11010000);
  2461     0439  30D0               	movlw	208
  2462     043A  2716               	fcall	_I2C_WriteByte
  2463     043B                     l1373:
  2464                           
  2465                           ;RTC.c: 41:     I2C_WriteByte(address);
  2466     043B  0875               	movf	reqWriteRTC@address,w
  2467     043C  2716               	fcall	_I2C_WriteByte
  2468     043D                     l154:
  2469     043D  0008               	return
  2470     043E                     __end_of_reqWriteRTC:
  2471                           
  2472                           	psect	text15
  2473     041F                     __ptext15:	
  2474 ;; *************** function _endWriteRTC *****************
  2475 ;; Defined at:
  2476 ;;		line 50 in file "RTC.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		status,2, status,0, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2490 ;;      Params:         0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used: 1
  2496 ;; Hardware stack levels required when called: 1
  2497 ;; This function calls:
  2498 ;;		_I2C_Stop
  2499 ;; This function is called by:
  2500 ;;		_writeByteRTC
  2501 ;;		_startRTC
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505     041F                     _endWriteRTC:	
  2506                           ;psect for function _endWriteRTC
  2507                           
  2508     041F                     l1377:	
  2509                           ;incstack = 0
  2510                           ; Regs used in _endWriteRTC: [status,2+status,0+pclath+cstack]
  2511                           
  2512                           
  2513                           ;RTC.c: 51:     I2C_Stop();
  2514     041F  24C2               	fcall	_I2C_Stop
  2515     0420                     l160:
  2516     0420  0008               	return
  2517     0421                     __end_of_endWriteRTC:
  2518                           
  2519                           	psect	text16
  2520     0445                     __ptext16:	
  2521 ;; *************** function _readByteRTC *****************
  2522 ;; Defined at:
  2523 ;;		line 29 in file "RTC.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  address         1    wreg     unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  address         1    6[COMMON] unsigned char 
  2528 ;;  data            1    7[COMMON] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      unsigned char 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         2       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0
  2541 ;;      Totals:         2       0       0       0       0
  2542 ;;Total ram usage:        2 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 2
  2545 ;; This function calls:
  2546 ;;		_I2C_ReadByte
  2547 ;;		_endReadRTC
  2548 ;;		_reqReadRTC
  2549 ;; This function is called by:
  2550 ;;		_isRTCRunning
  2551 ;;		_startRTC
  2552 ;;		_checkRTCType
  2553 ;;		_getTime
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557     0445                     _readByteRTC:	
  2558                           ;psect for function _readByteRTC
  2559                           
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2563                           ;readByteRTC@address stored from wreg
  2564     0445  00F6               	movwf	readByteRTC@address
  2565     0446                     l1475:
  2566     0446                     l1477:
  2567                           
  2568                           ;RTC.c: 31:     reqReadRTC(address);
  2569     0446  0876               	movf	readByteRTC@address,w
  2570     0447  2456               	fcall	_reqReadRTC
  2571     0448                     l1479:
  2572                           
  2573                           ;RTC.c: 32:     data = I2C_ReadByte();
  2574     0448  2579               	fcall	_I2C_ReadByte
  2575     0449  00F7               	movwf	readByteRTC@data
  2576     044A                     l1481:
  2577                           
  2578                           ;RTC.c: 33:     endReadRTC();
  2579     044A  2421               	fcall	_endReadRTC
  2580     044B                     l1483:
  2581                           
  2582                           ;RTC.c: 34:     return data;
  2583     044B  0877               	movf	readByteRTC@data,w
  2584     044C                     l151:
  2585     044C  0008               	return
  2586     044D                     __end_of_readByteRTC:
  2587                           
  2588                           	psect	text17
  2589     0456                     __ptext17:	
  2590 ;; *************** function _reqReadRTC *****************
  2591 ;; Defined at:
  2592 ;;		line 6 in file "RTC.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  address         1    wreg     unsigned char 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  address         1    5[COMMON] unsigned char 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2606 ;;      Params:         0       0       0       0       0
  2607 ;;      Locals:         1       0       0       0       0
  2608 ;;      Temps:          0       0       0       0       0
  2609 ;;      Totals:         1       0       0       0       0
  2610 ;;Total ram usage:        1 bytes
  2611 ;; Hardware stack levels used: 1
  2612 ;; Hardware stack levels required when called: 1
  2613 ;; This function calls:
  2614 ;;		_I2C_ReStart
  2615 ;;		_I2C_Start
  2616 ;;		_I2C_WriteByte
  2617 ;; This function is called by:
  2618 ;;		_readByteRTC
  2619 ;;		_getTime
  2620 ;;		_getDate
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624     0456                     _reqReadRTC:	
  2625                           ;psect for function _reqReadRTC
  2626                           
  2627                           
  2628                           ;incstack = 0
  2629                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2630                           ;reqReadRTC@address stored from wreg
  2631     0456  00F5               	movwf	reqReadRTC@address
  2632     0457                     l1359:
  2633                           
  2634                           ;RTC.c: 7:     I2C_Start();
  2635     0457  2486               	fcall	_I2C_Start
  2636     0458                     l1361:
  2637                           
  2638                           ;RTC.c: 8:     I2C_WriteByte(0b11010000);
  2639     0458  30D0               	movlw	208
  2640     0459  2716               	fcall	_I2C_WriteByte
  2641     045A                     l1363:
  2642                           
  2643                           ;RTC.c: 9:     I2C_WriteByte(address);
  2644     045A  0875               	movf	reqReadRTC@address,w
  2645     045B  2716               	fcall	_I2C_WriteByte
  2646                           
  2647                           ;RTC.c: 10:     I2C_ReStart();
  2648     045C  24D3               	fcall	_I2C_ReStart
  2649     045D                     l1365:
  2650                           
  2651                           ;RTC.c: 11:     I2C_WriteByte(0b11010001);
  2652     045D  30D1               	movlw	209
  2653     045E  2716               	fcall	_I2C_WriteByte
  2654     045F                     l142:
  2655     045F  0008               	return
  2656     0460                     __end_of_reqReadRTC:
  2657                           
  2658                           	psect	text18
  2659     0716                     __ptext18:	
  2660 ;; *************** function _I2C_WriteByte *****************
  2661 ;; Defined at:
  2662 ;;		line 45 in file "IIC.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  Data            1    wreg     unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  Data            1    2[COMMON] unsigned char 
  2667 ;;  i               1    4[COMMON] unsigned char 
  2668 ;;  timer           1    3[COMMON] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, btemp+1
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2678 ;;      Params:         0       0       0       0       0
  2679 ;;      Locals:         3       0       0       0       0
  2680 ;;      Temps:          2       0       0       0       0
  2681 ;;      Totals:         5       0       0       0       0
  2682 ;;Total ram usage:        5 bytes
  2683 ;; Hardware stack levels used: 1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_reqReadRTC
  2688 ;;		_reqWriteRTC
  2689 ;;		_writeDataRTC
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693     0716                     _I2C_WriteByte:	
  2694                           ;psect for function _I2C_WriteByte
  2695                           
  2696                           
  2697                           ;incstack = 0
  2698                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  2699                           ;I2C_WriteByte@Data stored from wreg
  2700     0716  00F2               	movwf	I2C_WriteByte@Data
  2701     0717                     l1293:
  2702                           
  2703                           ;IIC.c: 46:     unsigned char i;;IIC.c: 47:     for(i = 0; i<8; i++) {
  2704     0717  01F4               	clrf	I2C_WriteByte@i
  2705     0718                     l90:
  2706                           
  2707                           ;IIC.c: 48:         TRISAbits.TRISA0 = 0;
  2708     0718  1683               	bsf	3,5	;RP0=1, select bank1
  2709     0719  1303               	bcf	3,6	;RP1=0, select bank1
  2710     071A  1005               	bcf	5,0	;volatile
  2711                           
  2712                           ;IIC.c: 49:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2713     071B  2F1C               	nop2	;2 cycle nop
  2714     071C                     l1299:
  2715                           
  2716                           ;IIC.c: 50:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  2717     071C  0A74               	incf	I2C_WriteByte@i,w
  2718     071D  00FF               	movwf	btemp+1
  2719     071E  0872               	movf	I2C_WriteByte@Data,w
  2720     071F  00F0               	movwf	??_I2C_WriteByte
  2721     0720  01F1               	clrf	??_I2C_WriteByte+1
  2722     0721  2F25               	goto	u464
  2723     0722                     u465:
  2724     0722  1003               	clrc
  2725     0723  0DF0               	rlf	??_I2C_WriteByte,f
  2726     0724  0DF1               	rlf	??_I2C_WriteByte+1,f
  2727     0725                     u464:
  2728     0725  0BFF               	decfsz	btemp+1,f
  2729     0726  2F22               	goto	u465
  2730     0727  1BF0               	btfsc	??_I2C_WriteByte,7
  2731     0728  2F2A               	goto	u471
  2732     0729  2F2E               	goto	u470
  2733     072A                     u471:
  2734     072A  1683               	bsf	3,5	;RP0=1, select bank1
  2735     072B  1303               	bcf	3,6	;RP1=0, select bank1
  2736     072C  1485               	bsf	5,1	;volatile
  2737     072D  2F31               	goto	u484
  2738     072E                     u470:
  2739     072E  1683               	bsf	3,5	;RP0=1, select bank1
  2740     072F  1303               	bcf	3,6	;RP1=0, select bank1
  2741     0730  1085               	bcf	5,1	;volatile
  2742     0731                     u484:
  2743     0731                     l1301:
  2744                           
  2745                           ;IIC.c: 51:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2746     0731  2F32               	nop2	;2 cycle nop
  2747     0732                     l1303:
  2748                           
  2749                           ;IIC.c: 52:         TRISAbits.TRISA0 = 1;
  2750     0732  1683               	bsf	3,5	;RP0=1, select bank1
  2751     0733  1303               	bcf	3,6	;RP1=0, select bank1
  2752     0734  1405               	bsf	5,0	;volatile
  2753     0735                     l1305:
  2754                           
  2755                           ;IIC.c: 53:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2756     0735  2F36               	nop2	;2 cycle nop
  2757     0736  2F37               	nop2	;2 cycle nop
  2758     0737  0000               	nop
  2759                           
  2760                           ;IIC.c: 54:     }
  2761     0738  3001               	movlw	1
  2762     0739  00FF               	movwf	btemp+1
  2763     073A  087F               	movf	btemp+1,w
  2764     073B  07F4               	addwf	I2C_WriteByte@i,f
  2765     073C                     l1307:
  2766     073C  3008               	movlw	8
  2767     073D  0274               	subwf	I2C_WriteByte@i,w
  2768     073E  1C03               	skipc
  2769     073F  2F41               	goto	u491
  2770     0740  2F42               	goto	u490
  2771     0741                     u491:
  2772     0741  2F18               	goto	l90
  2773     0742                     u490:
  2774     0742                     l91:
  2775                           
  2776                           ;IIC.c: 57:     TRISAbits.TRISA0 = 0;
  2777     0742  1683               	bsf	3,5	;RP0=1, select bank1
  2778     0743  1303               	bcf	3,6	;RP1=0, select bank1
  2779     0744  1005               	bcf	5,0	;volatile
  2780                           
  2781                           ;IIC.c: 58:     TRISAbits.TRISA1 = 1;
  2782     0745  1485               	bsf	5,1	;volatile
  2783                           
  2784                           ;IIC.c: 59:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2785     0746  2F47               	nop2	;2 cycle nop
  2786     0747  2F48               	nop2	;2 cycle nop
  2787     0748  0000               	nop
  2788                           
  2789                           ;IIC.c: 60:     TRISAbits.TRISA0 = 1;
  2790     0749  1683               	bsf	3,5	;RP0=1, select bank1
  2791     074A  1303               	bcf	3,6	;RP1=0, select bank1
  2792     074B  1405               	bsf	5,0	;volatile
  2793                           
  2794                           ;IIC.c: 61:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2795     074C  2F4D               	nop2	;2 cycle nop
  2796     074D  2F4E               	nop2	;2 cycle nop
  2797     074E  0000               	nop
  2798     074F                     l1309:
  2799                           
  2800                           ;IIC.c: 64:     unsigned char timer = 255;
  2801     074F  30FF               	movlw	255
  2802     0750  00F3               	movwf	I2C_WriteByte@timer
  2803                           
  2804                           ;IIC.c: 65:     while(timer != 0) {
  2805     0751  2F5D               	goto	l92
  2806     0752                     l93:
  2807                           
  2808                           ;IIC.c: 66:         if(!PORTAbits.RA1) {
  2809     0752  1283               	bcf	3,5	;RP0=0, select bank0
  2810     0753  1303               	bcf	3,6	;RP1=0, select bank0
  2811     0754  1885               	btfsc	5,1	;volatile
  2812     0755  2F57               	goto	u501
  2813     0756  2F58               	goto	u500
  2814     0757                     u501:
  2815     0757  2F5A               	goto	l94
  2816     0758                     u500:
  2817     0758                     l1311:
  2818                           
  2819                           ;IIC.c: 68:             timer = 0;
  2820     0758  01F3               	clrf	I2C_WriteByte@timer
  2821                           
  2822                           ;IIC.c: 69:         } else {
  2823     0759  2F5D               	goto	l92
  2824     075A                     l94:
  2825                           
  2826                           ;IIC.c: 70:             _delay((unsigned long)((1)*(4000000/4000000.0)));
  2827     075A  0000               	nop
  2828     075B                     l1313:
  2829                           
  2830                           ;IIC.c: 71:             timer--;
  2831     075B  3001               	movlw	1
  2832     075C  02F3               	subwf	I2C_WriteByte@timer,f
  2833     075D                     l92:	
  2834                           ;IIC.c: 73:     }
  2835                           
  2836                           
  2837                           ;IIC.c: 65:     while(timer != 0) {
  2838     075D  0873               	movf	I2C_WriteByte@timer,w
  2839     075E  1D03               	btfss	3,2
  2840     075F  2F61               	goto	u511
  2841     0760  2F62               	goto	u510
  2842     0761                     u511:
  2843     0761  2F52               	goto	l93
  2844     0762                     u510:
  2845     0762                     l1315:
  2846                           
  2847                           ;IIC.c: 75:     if(timer == 0 && PORTAbits.RA1) {
  2848     0762  0873               	movf	I2C_WriteByte@timer,w
  2849     0763  1D03               	btfss	3,2
  2850     0764  2F66               	goto	u521
  2851     0765  2F67               	goto	u520
  2852     0766                     u521:
  2853     0766  2F6E               	goto	l98
  2854     0767                     u520:
  2855     0767                     l1317:
  2856     0767  1283               	bcf	3,5	;RP0=0, select bank0
  2857     0768  1303               	bcf	3,6	;RP1=0, select bank0
  2858     0769  1C85               	btfss	5,1	;volatile
  2859     076A  2F6C               	goto	u531
  2860     076B  2F6D               	goto	u530
  2861     076C                     u531:
  2862     076C  2F6E               	goto	l98
  2863     076D                     u530:
  2864     076D                     l1319:
  2865                           
  2866                           ;IIC.c: 76:         ((ErrFlag) |= (1<<0));
  2867     076D  144A               	bsf	_ErrFlag,0
  2868     076E                     l98:
  2869     076E  0008               	return
  2870     076F                     __end_of_I2C_WriteByte:
  2871                           
  2872                           	psect	text19
  2873     0486                     __ptext19:	
  2874 ;; *************** function _I2C_Start *****************
  2875 ;; Defined at:
  2876 ;;		line 13 in file "IIC.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		None
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2890 ;;      Params:         0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0
  2893 ;;      Totals:         0       0       0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used: 1
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_reqReadRTC
  2900 ;;		_reqWriteRTC
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904     0486                     _I2C_Start:	
  2905                           ;psect for function _I2C_Start
  2906                           
  2907     0486                     l1287:	
  2908                           ;incstack = 0
  2909                           ; Regs used in _I2C_Start: []
  2910                           
  2911                           
  2912                           ;IIC.c: 14:     TRISAbits.TRISA0 = 1;
  2913     0486  1683               	bsf	3,5	;RP0=1, select bank1
  2914     0487  1303               	bcf	3,6	;RP1=0, select bank1
  2915     0488  1405               	bsf	5,0	;volatile
  2916                           
  2917                           ;IIC.c: 15:     TRISAbits.TRISA1 = 1;
  2918     0489  1485               	bsf	5,1	;volatile
  2919                           
  2920                           ;IIC.c: 16:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2921     048A  2C8B               	nop2	;2 cycle nop
  2922     048B  2C8C               	nop2	;2 cycle nop
  2923     048C  0000               	nop
  2924                           
  2925                           ;IIC.c: 17:     TRISAbits.TRISA1 = 0;
  2926     048D  1683               	bsf	3,5	;RP0=1, select bank1
  2927     048E  1303               	bcf	3,6	;RP1=0, select bank1
  2928     048F  1085               	bcf	5,1	;volatile
  2929                           
  2930                           ;IIC.c: 18:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2931     0490  2C91               	nop2	;2 cycle nop
  2932     0491  2C92               	nop2	;2 cycle nop
  2933     0492  0000               	nop
  2934     0493                     l81:
  2935     0493  0008               	return
  2936     0494                     __end_of_I2C_Start:
  2937                           
  2938                           	psect	text20
  2939     04D3                     __ptext20:	
  2940 ;; *************** function _I2C_ReStart *****************
  2941 ;; Defined at:
  2942 ;;		line 22 in file "IIC.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;		None
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		None
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2956 ;;      Params:         0       0       0       0       0
  2957 ;;      Locals:         0       0       0       0       0
  2958 ;;      Temps:          0       0       0       0       0
  2959 ;;      Totals:         0       0       0       0       0
  2960 ;;Total ram usage:        0 bytes
  2961 ;; Hardware stack levels used: 1
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_reqReadRTC
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969     04D3                     _I2C_ReStart:	
  2970                           ;psect for function _I2C_ReStart
  2971                           
  2972     04D3                     l1289:	
  2973                           ;incstack = 0
  2974                           ; Regs used in _I2C_ReStart: []
  2975                           
  2976                           
  2977                           ;IIC.c: 23:     TRISAbits.TRISA0 = 0;
  2978     04D3  1683               	bsf	3,5	;RP0=1, select bank1
  2979     04D4  1303               	bcf	3,6	;RP1=0, select bank1
  2980     04D5  1005               	bcf	5,0	;volatile
  2981                           
  2982                           ;IIC.c: 24:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2983     04D6  2CD7               	nop2	;2 cycle nop
  2984                           
  2985                           ;IIC.c: 25:     TRISAbits.TRISA1 = 1;
  2986     04D7  1683               	bsf	3,5	;RP0=1, select bank1
  2987     04D8  1303               	bcf	3,6	;RP1=0, select bank1
  2988     04D9  1485               	bsf	5,1	;volatile
  2989                           
  2990                           ;IIC.c: 26:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2991     04DA  2CDB               	nop2	;2 cycle nop
  2992                           
  2993                           ;IIC.c: 27:     TRISAbits.TRISA0 = 1;
  2994     04DB  1683               	bsf	3,5	;RP0=1, select bank1
  2995     04DC  1303               	bcf	3,6	;RP1=0, select bank1
  2996     04DD  1405               	bsf	5,0	;volatile
  2997                           
  2998                           ;IIC.c: 28:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2999     04DE  2CDF               	nop2	;2 cycle nop
  3000                           
  3001                           ;IIC.c: 29:     TRISAbits.TRISA1 = 0;
  3002     04DF  1683               	bsf	3,5	;RP0=1, select bank1
  3003     04E0  1303               	bcf	3,6	;RP1=0, select bank1
  3004     04E1  1085               	bcf	5,1	;volatile
  3005                           
  3006                           ;IIC.c: 30:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3007     04E2  2CE3               	nop2	;2 cycle nop
  3008     04E3                     l84:
  3009     04E3  0008               	return
  3010     04E4                     __end_of_I2C_ReStart:
  3011                           
  3012                           	psect	text21
  3013     0421                     __ptext21:	
  3014 ;; *************** function _endReadRTC *****************
  3015 ;; Defined at:
  3016 ;;		line 23 in file "RTC.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		status,2, status,0, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3030 ;;      Params:         0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used: 1
  3036 ;; Hardware stack levels required when called: 1
  3037 ;; This function calls:
  3038 ;;		_I2C_SendNACK
  3039 ;;		_I2C_Stop
  3040 ;; This function is called by:
  3041 ;;		_readByteRTC
  3042 ;;		_getTime
  3043 ;;		_getDate
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047     0421                     _endReadRTC:	
  3048                           ;psect for function _endReadRTC
  3049                           
  3050     0421                     l1367:	
  3051                           ;incstack = 0
  3052                           ; Regs used in _endReadRTC: [status,2+status,0+pclath+cstack]
  3053                           
  3054                           
  3055                           ;RTC.c: 24:     I2C_SendNACK();
  3056     0421  2494               	fcall	_I2C_SendNACK
  3057                           
  3058                           ;RTC.c: 25:     I2C_Stop();
  3059     0422  24C2               	fcall	_I2C_Stop
  3060     0423                     l148:
  3061     0423  0008               	return
  3062     0424                     __end_of_endReadRTC:
  3063                           
  3064                           	psect	text22
  3065     04C2                     __ptext22:	
  3066 ;; *************** function _I2C_Stop *****************
  3067 ;; Defined at:
  3068 ;;		line 34 in file "IIC.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		None
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3082 ;;      Params:         0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used: 1
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_endReadRTC
  3092 ;;		_endWriteRTC
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096     04C2                     _I2C_Stop:	
  3097                           ;psect for function _I2C_Stop
  3098                           
  3099     04C2                     l1291:	
  3100                           ;incstack = 0
  3101                           ; Regs used in _I2C_Stop: []
  3102                           
  3103                           
  3104                           ;IIC.c: 35:     TRISAbits.TRISA0 = 0;
  3105     04C2  1683               	bsf	3,5	;RP0=1, select bank1
  3106     04C3  1303               	bcf	3,6	;RP1=0, select bank1
  3107     04C4  1005               	bcf	5,0	;volatile
  3108                           
  3109                           ;IIC.c: 36:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3110     04C5  2CC6               	nop2	;2 cycle nop
  3111                           
  3112                           ;IIC.c: 37:     TRISAbits.TRISA1 = 0;
  3113     04C6  1683               	bsf	3,5	;RP0=1, select bank1
  3114     04C7  1303               	bcf	3,6	;RP1=0, select bank1
  3115     04C8  1085               	bcf	5,1	;volatile
  3116                           
  3117                           ;IIC.c: 38:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3118     04C9  2CCA               	nop2	;2 cycle nop
  3119                           
  3120                           ;IIC.c: 39:     TRISAbits.TRISA0 = 1;
  3121     04CA  1683               	bsf	3,5	;RP0=1, select bank1
  3122     04CB  1303               	bcf	3,6	;RP1=0, select bank1
  3123     04CC  1405               	bsf	5,0	;volatile
  3124                           
  3125                           ;IIC.c: 40:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3126     04CD  2CCE               	nop2	;2 cycle nop
  3127                           
  3128                           ;IIC.c: 41:     TRISAbits.TRISA1 = 1;
  3129     04CE  1683               	bsf	3,5	;RP0=1, select bank1
  3130     04CF  1303               	bcf	3,6	;RP1=0, select bank1
  3131     04D0  1485               	bsf	5,1	;volatile
  3132                           
  3133                           ;IIC.c: 42:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3134     04D1  2CD2               	nop2	;2 cycle nop
  3135     04D2                     l87:
  3136     04D2  0008               	return
  3137     04D3                     __end_of_I2C_Stop:
  3138                           
  3139                           	psect	text23
  3140     0494                     __ptext23:	
  3141 ;; *************** function _I2C_SendNACK *****************
  3142 ;; Defined at:
  3143 ;;		line 107 in file "IIC.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		None
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3157 ;;      Params:         0       0       0       0       0
  3158 ;;      Locals:         0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0
  3160 ;;      Totals:         0       0       0       0       0
  3161 ;;Total ram usage:        0 bytes
  3162 ;; Hardware stack levels used: 1
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_endReadRTC
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170     0494                     _I2C_SendNACK:	
  3171                           ;psect for function _I2C_SendNACK
  3172                           
  3173     0494                     l1321:	
  3174                           ;incstack = 0
  3175                           ; Regs used in _I2C_SendNACK: []
  3176                           
  3177                           
  3178                           ;IIC.c: 108:     TRISAbits.TRISA0 = 0;
  3179     0494  1683               	bsf	3,5	;RP0=1, select bank1
  3180     0495  1303               	bcf	3,6	;RP1=0, select bank1
  3181     0496  1005               	bcf	5,0	;volatile
  3182                           
  3183                           ;IIC.c: 109:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3184     0497  2C98               	nop2	;2 cycle nop
  3185                           
  3186                           ;IIC.c: 110:     TRISAbits.TRISA1 = 1;
  3187     0498  1683               	bsf	3,5	;RP0=1, select bank1
  3188     0499  1303               	bcf	3,6	;RP1=0, select bank1
  3189     049A  1485               	bsf	5,1	;volatile
  3190                           
  3191                           ;IIC.c: 111:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3192     049B  2C9C               	nop2	;2 cycle nop
  3193                           
  3194                           ;IIC.c: 112:     TRISAbits.TRISA0 = 1;
  3195     049C  1683               	bsf	3,5	;RP0=1, select bank1
  3196     049D  1303               	bcf	3,6	;RP1=0, select bank1
  3197     049E  1405               	bsf	5,0	;volatile
  3198                           
  3199                           ;IIC.c: 113:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3200     049F  2CA0               	nop2	;2 cycle nop
  3201     04A0  2CA1               	nop2	;2 cycle nop
  3202     04A1  0000               	nop
  3203     04A2                     l109:
  3204     04A2  0008               	return
  3205     04A3                     __end_of_I2C_SendNACK:
  3206                           
  3207                           	psect	text24
  3208     0579                     __ptext24:	
  3209 ;; *************** function _I2C_ReadByte *****************
  3210 ;; Defined at:
  3211 ;;		line 82 in file "IIC.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  i               1    2[COMMON] unsigned char 
  3216 ;;  Data            1    1[COMMON] unsigned char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      unsigned char 
  3219 ;; Registers used:
  3220 ;;		wreg, status,2, status,0, btemp+1
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3226 ;;      Params:         0       0       0       0       0
  3227 ;;      Locals:         2       0       0       0       0
  3228 ;;      Temps:          1       0       0       0       0
  3229 ;;      Totals:         3       0       0       0       0
  3230 ;;Total ram usage:        3 bytes
  3231 ;; Hardware stack levels used: 1
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_readDataRTC
  3236 ;;		_readByteRTC
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240     0579                     _I2C_ReadByte:	
  3241                           ;psect for function _I2C_ReadByte
  3242                           
  3243     0579                     l1341:	
  3244                           ;incstack = 0
  3245                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  3246                           
  3247                           
  3248                           ;IIC.c: 83:     unsigned char i, Data = 0;
  3249     0579  01F1               	clrf	I2C_ReadByte@Data
  3250                           
  3251                           ;IIC.c: 84:     for(i=0; i<8; i++) {
  3252     057A  01F2               	clrf	I2C_ReadByte@i
  3253     057B                     l101:
  3254                           
  3255                           ;IIC.c: 85:         TRISAbits.TRISA0 = 0;
  3256     057B  1683               	bsf	3,5	;RP0=1, select bank1
  3257     057C  1303               	bcf	3,6	;RP1=0, select bank1
  3258     057D  1005               	bcf	5,0	;volatile
  3259                           
  3260                           ;IIC.c: 86:         TRISAbits.TRISA1 = 1;
  3261     057E  1485               	bsf	5,1	;volatile
  3262                           
  3263                           ;IIC.c: 87:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3264     057F  2D80               	nop2	;2 cycle nop
  3265     0580  2D81               	nop2	;2 cycle nop
  3266     0581  0000               	nop
  3267                           
  3268                           ;IIC.c: 88:         TRISAbits.TRISA0 = 1;
  3269     0582  1683               	bsf	3,5	;RP0=1, select bank1
  3270     0583  1303               	bcf	3,6	;RP1=0, select bank1
  3271     0584  1405               	bsf	5,0	;volatile
  3272                           
  3273                           ;IIC.c: 89:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3274     0585  2D86               	nop2	;2 cycle nop
  3275     0586                     l1347:
  3276                           
  3277                           ;IIC.c: 90:         Data = Data|(PORTAbits.RA1<<(7-i));
  3278     0586  1283               	bcf	3,5	;RP0=0, select bank0
  3279     0587  1303               	bcf	3,6	;RP1=0, select bank0
  3280     0588  0C05               	rrf	5,w	;volatile
  3281     0589  3901               	andlw	1
  3282     058A  00F0               	movwf	??_I2C_ReadByte
  3283     058B  0872               	movf	I2C_ReadByte@i,w
  3284     058C  3C07               	sublw	7
  3285     058D  3E01               	addlw	1
  3286     058E  2D91               	goto	u564
  3287     058F                     u565:
  3288     058F  1003               	clrc
  3289     0590  0DF0               	rlf	??_I2C_ReadByte,f
  3290     0591                     u564:
  3291     0591  3EFF               	addlw	-1
  3292     0592  1D03               	skipz
  3293     0593  2D8F               	goto	u565
  3294     0594  0870               	movf	??_I2C_ReadByte,w
  3295     0595  0471               	iorwf	I2C_ReadByte@Data,w
  3296     0596  00F1               	movwf	I2C_ReadByte@Data
  3297     0597                     l1349:
  3298                           
  3299                           ;IIC.c: 91:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3300     0597  2D98               	nop2	;2 cycle nop
  3301     0598                     l1351:
  3302                           
  3303                           ;IIC.c: 92:     }
  3304     0598  3001               	movlw	1
  3305     0599  00FF               	movwf	btemp+1
  3306     059A  087F               	movf	btemp+1,w
  3307     059B  07F2               	addwf	I2C_ReadByte@i,f
  3308     059C                     l1353:
  3309     059C  3008               	movlw	8
  3310     059D  0272               	subwf	I2C_ReadByte@i,w
  3311     059E  1C03               	skipc
  3312     059F  2DA1               	goto	u571
  3313     05A0  2DA2               	goto	u570
  3314     05A1                     u571:
  3315     05A1  2D7B               	goto	l101
  3316     05A2                     u570:
  3317     05A2                     l1355:
  3318                           
  3319                           ;IIC.c: 93:     return Data;
  3320     05A2  0871               	movf	I2C_ReadByte@Data,w
  3321     05A3                     l103:
  3322     05A3  0008               	return
  3323     05A4                     __end_of_I2C_ReadByte:
  3324                           
  3325                           	psect	text25
  3326     0424                     __ptext25:	
  3327 ;; *************** function _InitTubes *****************
  3328 ;; Defined at:
  3329 ;;		line 18 in file "tubes.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3343 ;;      Params:         0       0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0
  3346 ;;      Totals:         0       0       0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used: 1
  3349 ;; Hardware stack levels required when called: 3
  3350 ;; This function calls:
  3351 ;;		_blankTubes
  3352 ;;		_display
  3353 ;;		_loadDisplay
  3354 ;; This function is called by:
  3355 ;;		_Init
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359     0424                     _InitTubes:	
  3360                           ;psect for function _InitTubes
  3361                           
  3362     0424                     l1527:	
  3363                           ;incstack = 0
  3364                           ; Regs used in _InitTubes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3365                           
  3366                           
  3367                           ;tubes.c: 19:     blankTubes();
  3368     0424  2516               	fcall	_blankTubes
  3369                           
  3370                           ;tubes.c: 20:     loadDisplay();
  3371     0425  2646               	fcall	_loadDisplay
  3372     0426                     l1529:
  3373                           
  3374                           ;tubes.c: 21:     display();
  3375     0426  2430               	fcall	_display
  3376     0427                     l237:
  3377     0427  0008               	return
  3378     0428                     __end_of_InitTubes:
  3379                           
  3380                           	psect	text26
  3381     0646                     __ptext26:	
  3382 ;; *************** function _loadDisplay *****************
  3383 ;; Defined at:
  3384 ;;		line 39 in file "tubes.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  numIndex        1    5[COMMON] unsigned char 
  3389 ;;  tubeIndex       1    4[COMMON] unsigned char 
  3390 ;;  RDP             1    7[COMMON] unsigned char 
  3391 ;;  LDP             1    6[COMMON] unsigned char 
  3392 ;;  tubePtr         1    3[COMMON] PTR unsigned char 
  3393 ;;		 -> T7(1), 
  3394 ;;  dispNum         1    2[COMMON] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3404 ;;      Params:         0       0       0       0       0
  3405 ;;      Locals:         6       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0
  3407 ;;      Totals:         6       0       0       0       0
  3408 ;;Total ram usage:        6 bytes
  3409 ;; Hardware stack levels used: 1
  3410 ;; Hardware stack levels required when called: 2
  3411 ;; This function calls:
  3412 ;;		_checkDP
  3413 ;;		_latch
  3414 ;;		_send0ToDrivers
  3415 ;;		_send1ToDrivers
  3416 ;; This function is called by:
  3417 ;;		_InitTubes
  3418 ;;		_displayError
  3419 ;;		_passTubeNum
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423     0646                     _loadDisplay:	
  3424                           ;psect for function _loadDisplay
  3425                           
  3426     0646                     l1397:	
  3427                           ;incstack = 0
  3428                           ; Regs used in _loadDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3429                           
  3430                           
  3431                           ;tubes.c: 40:     unsigned char *tubePtr;;tubes.c: 41:     tubePtr = &T7;
  3432     0646  3029               	movlw	41
  3433     0647  00F3               	movwf	loadDisplay@tubePtr
  3434                           
  3435                           ;tubes.c: 42:     unsigned char dispNum;;tubes.c: 43:     unsigned char LDP = leftDP;
  3436     0648  1283               	bcf	3,5	;RP0=0, select bank0
  3437     0649  1303               	bcf	3,6	;RP1=0, select bank0
  3438     064A  0848               	movf	_leftDP,w
  3439     064B  00F6               	movwf	loadDisplay@LDP
  3440                           
  3441                           ;tubes.c: 44:     unsigned char RDP = rightDP;
  3442     064C  0847               	movf	_rightDP,w
  3443     064D  00F7               	movwf	loadDisplay@RDP
  3444     064E                     l1399:
  3445                           
  3446                           ;tubes.c: 46:    for (unsigned char tubeIndex = 0; tubeIndex <= 7; tubeIndex++) {
  3447     064E  01F4               	clrf	loadDisplay@tubeIndex
  3448     064F                     l1405:
  3449                           
  3450                           ;tubes.c: 47:         checkDP(&LDP);
  3451     064F  3076               	movlw	(low (loadDisplay@LDP| 0))& (0+255)
  3452     0650  2552               	fcall	_checkDP
  3453     0651                     l1407:
  3454                           
  3455                           ;tubes.c: 48:         dispNum = 1;
  3456     0651  01F2               	clrf	loadDisplay@dispNum
  3457     0652  0AF2               	incf	loadDisplay@dispNum,f
  3458     0653                     l1409:
  3459                           
  3460                           ;tubes.c: 50:         for (unsigned char numIndex = 0; numIndex < 9; numIndex++) {
  3461     0653  01F5               	clrf	loadDisplay@numIndex
  3462     0654                     l1415:
  3463                           
  3464                           ;tubes.c: 51:             if(dispNum == *tubePtr) {
  3465     0654  0873               	movf	loadDisplay@tubePtr,w
  3466     0655  0084               	movwf	4
  3467     0656  1383               	bcf	3,7	;select IRP bank0
  3468     0657  0800               	movf	0,w
  3469     0658  0672               	xorwf	loadDisplay@dispNum,w
  3470     0659  1D03               	skipz
  3471     065A  2E5C               	goto	u591
  3472     065B  2E5D               	goto	u590
  3473     065C                     u591:
  3474     065C  2E5F               	goto	l1419
  3475     065D                     u590:
  3476     065D                     l1417:
  3477                           
  3478                           ;tubes.c: 52:                 send1ToDrivers();
  3479     065D  246C               	fcall	_send1ToDrivers
  3480                           
  3481                           ;tubes.c: 53:             } else {
  3482     065E  2E60               	goto	l1421
  3483     065F                     l1419:
  3484                           
  3485                           ;tubes.c: 54:                 send0ToDrivers();
  3486     065F  24B2               	fcall	_send0ToDrivers
  3487     0660                     l1421:
  3488                           
  3489                           ;tubes.c: 56:             dispNum++;
  3490     0660  3001               	movlw	1
  3491     0661  00FF               	movwf	btemp+1
  3492     0662  087F               	movf	btemp+1,w
  3493     0663  07F2               	addwf	loadDisplay@dispNum,f
  3494     0664                     l1423:
  3495                           
  3496                           ;tubes.c: 57:         }
  3497     0664  3001               	movlw	1
  3498     0665  00FF               	movwf	btemp+1
  3499     0666  087F               	movf	btemp+1,w
  3500     0667  07F5               	addwf	loadDisplay@numIndex,f
  3501     0668                     l1425:
  3502     0668  3009               	movlw	9
  3503     0669  0275               	subwf	loadDisplay@numIndex,w
  3504     066A  1C03               	skipc
  3505     066B  2E6D               	goto	u601
  3506     066C  2E6E               	goto	u600
  3507     066D                     u601:
  3508     066D  2E54               	goto	l1415
  3509     066E                     u600:
  3510     066E                     l1427:
  3511                           
  3512                           ;tubes.c: 59:         if (*tubePtr == 0) {
  3513     066E  0873               	movf	loadDisplay@tubePtr,w
  3514     066F  0084               	movwf	4
  3515     0670  1383               	bcf	3,7	;select IRP bank0
  3516     0671  0800               	movf	0,w
  3517     0672  1D03               	btfss	3,2
  3518     0673  2E75               	goto	u611
  3519     0674  2E76               	goto	u610
  3520     0675                     u611:
  3521     0675  2E78               	goto	l1431
  3522     0676                     u610:
  3523     0676                     l1429:
  3524                           
  3525                           ;tubes.c: 60:             send1ToDrivers();
  3526     0676  246C               	fcall	_send1ToDrivers
  3527                           
  3528                           ;tubes.c: 61:         } else {
  3529     0677  2E79               	goto	l1433
  3530     0678                     l1431:
  3531                           
  3532                           ;tubes.c: 62:             send0ToDrivers();
  3533     0678  24B2               	fcall	_send0ToDrivers
  3534     0679                     l1433:
  3535                           
  3536                           ;tubes.c: 64:         checkDP(&RDP);
  3537     0679  3077               	movlw	(low (loadDisplay@RDP| 0))& (0+255)
  3538     067A  2552               	fcall	_checkDP
  3539     067B                     l1435:
  3540                           
  3541                           ;tubes.c: 65:         tubePtr--;
  3542     067B  3001               	movlw	1
  3543     067C  02F3               	subwf	loadDisplay@tubePtr,f
  3544     067D                     l1437:
  3545                           
  3546                           ;tubes.c: 66:     }
  3547     067D  3001               	movlw	1
  3548     067E  00FF               	movwf	btemp+1
  3549     067F  087F               	movf	btemp+1,w
  3550     0680  07F4               	addwf	loadDisplay@tubeIndex,f
  3551     0681                     l1439:
  3552     0681  3008               	movlw	8
  3553     0682  0274               	subwf	loadDisplay@tubeIndex,w
  3554     0683  1C03               	skipc
  3555     0684  2E86               	goto	u621
  3556     0685  2E87               	goto	u620
  3557     0686                     u621:
  3558     0686  2E4F               	goto	l1405
  3559     0687                     u620:
  3560     0687                     l1441:
  3561                           
  3562                           ;tubes.c: 67:     latch();
  3563     0687  2460               	fcall	_latch
  3564     0688                     l251:
  3565     0688  0008               	return
  3566     0689                     __end_of_loadDisplay:
  3567                           
  3568                           	psect	text27
  3569     0460                     __ptext27:	
  3570 ;; *************** function _latch *****************
  3571 ;; Defined at:
  3572 ;;		line 84 in file "tubes.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  1    wreg      void 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, btemp+1
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3586 ;;      Params:         0       0       0       0       0
  3587 ;;      Locals:         0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0
  3589 ;;      Totals:         0       0       0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used: 1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_loadDisplay
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599     0460                     _latch:	
  3600                           ;psect for function _latch
  3601                           
  3602     0460                     l1333:	
  3603                           ;incstack = 0
  3604                           ; Regs used in _latch: [wreg+status,2+status,0+btemp+1]
  3605                           
  3606                           
  3607                           ;tubes.c: 85:     ((PORTB_SHADOW) |= (1<<0x5));
  3608     0460  1283               	bcf	3,5	;RP0=0, select bank0
  3609     0461  1303               	bcf	3,6	;RP1=0, select bank0
  3610     0462  16CB               	bsf	_PORTB_SHADOW,5
  3611     0463                     l1335:
  3612                           
  3613                           ;tubes.c: 86:     PORTB = PORTB_SHADOW;
  3614     0463  084B               	movf	_PORTB_SHADOW,w
  3615     0464  0086               	movwf	6	;volatile
  3616     0465                     l1337:
  3617                           
  3618                           ;tubes.c: 87:     ((PORTB_SHADOW) &= ~(1<<0x5));
  3619     0465  30DF               	movlw	223
  3620     0466  00FF               	movwf	btemp+1
  3621     0467  087F               	movf	btemp+1,w
  3622     0468  05CB               	andwf	_PORTB_SHADOW,f
  3623     0469                     l1339:
  3624                           
  3625                           ;tubes.c: 88:     PORTB = PORTB_SHADOW;
  3626     0469  084B               	movf	_PORTB_SHADOW,w
  3627     046A  0086               	movwf	6	;volatile
  3628     046B                     l259:
  3629     046B  0008               	return
  3630     046C                     __end_of_latch:
  3631                           
  3632                           	psect	text28
  3633     0552                     __ptext28:	
  3634 ;; *************** function _checkDP *****************
  3635 ;; Defined at:
  3636 ;;		line 71 in file "tubes.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  DP              1    wreg     PTR unsigned char 
  3639 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  DP              1    1[COMMON] PTR unsigned char 
  3642 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3652 ;;      Params:         0       0       0       0       0
  3653 ;;      Locals:         1       0       0       0       0
  3654 ;;      Temps:          1       0       0       0       0
  3655 ;;      Totals:         2       0       0       0       0
  3656 ;;Total ram usage:        2 bytes
  3657 ;; Hardware stack levels used: 1
  3658 ;; Hardware stack levels required when called: 1
  3659 ;; This function calls:
  3660 ;;		_send0ToDrivers
  3661 ;;		_send1ToDrivers
  3662 ;; This function is called by:
  3663 ;;		_loadDisplay
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667     0552                     _checkDP:	
  3668                           ;psect for function _checkDP
  3669                           
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _checkDP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3673                           ;checkDP@DP stored from wreg
  3674     0552  00F1               	movwf	checkDP@DP
  3675     0553                     l1323:
  3676                           
  3677                           ;tubes.c: 72:     if ((((*DP))>>(7) & 1)) {
  3678     0553  0871               	movf	checkDP@DP,w
  3679     0554  0084               	movwf	4
  3680     0555  0800               	movf	0,w
  3681     0556  00F0               	movwf	??_checkDP
  3682     0557  3007               	movlw	7
  3683     0558                     u545:
  3684     0558  1003               	clrc
  3685     0559  0CF0               	rrf	??_checkDP,f
  3686     055A  3EFF               	addlw	-1
  3687     055B  1D03               	skipz
  3688     055C  2D58               	goto	u545
  3689     055D  1C70               	btfss	??_checkDP,0
  3690     055E  2D60               	goto	u551
  3691     055F  2D61               	goto	u550
  3692     0560                     u551:
  3693     0560  2D6D               	goto	l1329
  3694     0561                     u550:
  3695     0561                     l1325:
  3696                           
  3697                           ;tubes.c: 74:         *DP = (*DP) << 1;
  3698     0561  0871               	movf	checkDP@DP,w
  3699     0562  0084               	movwf	4
  3700     0563  0800               	movf	0,w
  3701     0564  00F0               	movwf	??_checkDP
  3702     0565  0770               	addwf	??_checkDP,w
  3703     0566  00FF               	movwf	btemp+1
  3704     0567  0871               	movf	checkDP@DP,w
  3705     0568  0084               	movwf	4
  3706     0569  087F               	movf	btemp+1,w
  3707     056A  0080               	movwf	0
  3708     056B                     l1327:
  3709                           
  3710                           ;tubes.c: 75:         send1ToDrivers();
  3711     056B  246C               	fcall	_send1ToDrivers
  3712                           
  3713                           ;tubes.c: 76:     } else {
  3714     056C  2D78               	goto	l256
  3715     056D                     l1329:
  3716                           
  3717                           ;tubes.c: 78:         *DP = (*DP) << 1;
  3718     056D  0871               	movf	checkDP@DP,w
  3719     056E  0084               	movwf	4
  3720     056F  0800               	movf	0,w
  3721     0570  00F0               	movwf	??_checkDP
  3722     0571  0770               	addwf	??_checkDP,w
  3723     0572  00FF               	movwf	btemp+1
  3724     0573  0871               	movf	checkDP@DP,w
  3725     0574  0084               	movwf	4
  3726     0575  087F               	movf	btemp+1,w
  3727     0576  0080               	movwf	0
  3728     0577                     l1331:
  3729                           
  3730                           ;tubes.c: 79:         send0ToDrivers();
  3731     0577  24B2               	fcall	_send0ToDrivers
  3732     0578                     l256:
  3733     0578  0008               	return
  3734     0579                     __end_of_checkDP:
  3735                           
  3736                           	psect	text29
  3737     046C                     __ptext29:	
  3738 ;; *************** function _send1ToDrivers *****************
  3739 ;; Defined at:
  3740 ;;		line 129 in file "tubes.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;		None
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0, btemp+1
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3754 ;;      Params:         0       0       0       0       0
  3755 ;;      Locals:         0       0       0       0       0
  3756 ;;      Temps:          0       0       0       0       0
  3757 ;;      Totals:         0       0       0       0       0
  3758 ;;Total ram usage:        0 bytes
  3759 ;; Hardware stack levels used: 1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_loadDisplay
  3764 ;;		_checkDP
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768     046C                     _send1ToDrivers:	
  3769                           ;psect for function _send1ToDrivers
  3770                           
  3771     046C                     l1271:	
  3772                           ;incstack = 0
  3773                           ; Regs used in _send1ToDrivers: [wreg+status,2+status,0+btemp+1]
  3774                           
  3775                           
  3776                           ;tubes.c: 130:     ((PORTB_SHADOW) |= (1<<0x4));
  3777     046C  1283               	bcf	3,5	;RP0=0, select bank0
  3778     046D  1303               	bcf	3,6	;RP1=0, select bank0
  3779     046E  164B               	bsf	_PORTB_SHADOW,4
  3780                           
  3781                           ;tubes.c: 131:     ((PORTB_SHADOW) |= (1<<0x2));
  3782     046F  154B               	bsf	_PORTB_SHADOW,2
  3783     0470                     l1273:
  3784                           
  3785                           ;tubes.c: 132:     PORTB = PORTB_SHADOW;
  3786     0470  084B               	movf	_PORTB_SHADOW,w
  3787     0471  0086               	movwf	6	;volatile
  3788     0472                     l1275:
  3789                           
  3790                           ;tubes.c: 133:     ((PORTB_SHADOW) &= ~(1<<0x2));
  3791     0472  30FB               	movlw	251
  3792     0473  00FF               	movwf	btemp+1
  3793     0474  087F               	movf	btemp+1,w
  3794     0475  05CB               	andwf	_PORTB_SHADOW,f
  3795     0476                     l1277:
  3796                           
  3797                           ;tubes.c: 134:     PORTB = PORTB_SHADOW;
  3798     0476  084B               	movf	_PORTB_SHADOW,w
  3799     0477  0086               	movwf	6	;volatile
  3800     0478                     l279:
  3801     0478  0008               	return
  3802     0479                     __end_of_send1ToDrivers:
  3803                           
  3804                           	psect	text30
  3805     04B2                     __ptext30:	
  3806 ;; *************** function _send0ToDrivers *****************
  3807 ;; Defined at:
  3808 ;;		line 138 in file "tubes.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, btemp+1
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3822 ;;      Params:         0       0       0       0       0
  3823 ;;      Locals:         0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0
  3825 ;;      Totals:         0       0       0       0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used: 1
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_loadDisplay
  3832 ;;		_checkDP
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836     04B2                     _send0ToDrivers:	
  3837                           ;psect for function _send0ToDrivers
  3838                           
  3839     04B2                     l1279:	
  3840                           ;incstack = 0
  3841                           ; Regs used in _send0ToDrivers: [wreg+status,2+status,0+btemp+1]
  3842                           
  3843                           
  3844                           ;tubes.c: 139:     ((PORTB_SHADOW) &= ~(1<<0x4));
  3845     04B2  30EF               	movlw	239
  3846     04B3  00FF               	movwf	btemp+1
  3847     04B4  087F               	movf	btemp+1,w
  3848     04B5  1283               	bcf	3,5	;RP0=0, select bank0
  3849     04B6  1303               	bcf	3,6	;RP1=0, select bank0
  3850     04B7  05CB               	andwf	_PORTB_SHADOW,f
  3851     04B8                     l1281:
  3852                           
  3853                           ;tubes.c: 140:     ((PORTB_SHADOW) |= (1<<0x2));
  3854     04B8  154B               	bsf	_PORTB_SHADOW,2
  3855     04B9                     l1283:
  3856                           
  3857                           ;tubes.c: 141:     PORTB = PORTB_SHADOW;
  3858     04B9  084B               	movf	_PORTB_SHADOW,w
  3859     04BA  0086               	movwf	6	;volatile
  3860     04BB                     l1285:
  3861                           
  3862                           ;tubes.c: 142:     ((PORTB_SHADOW) &= ~(1<<0x2));
  3863     04BB  30FB               	movlw	251
  3864     04BC  00FF               	movwf	btemp+1
  3865     04BD  087F               	movf	btemp+1,w
  3866     04BE  05CB               	andwf	_PORTB_SHADOW,f
  3867                           
  3868                           ;tubes.c: 143:     PORTB = PORTB_SHADOW;
  3869     04BF  084B               	movf	_PORTB_SHADOW,w
  3870     04C0  0086               	movwf	6	;volatile
  3871     04C1                     l282:
  3872     04C1  0008               	return
  3873     04C2                     __end_of_send0ToDrivers:
  3874                           
  3875                           	psect	text31
  3876     0430                     __ptext31:	
  3877 ;; *************** function _display *****************
  3878 ;; Defined at:
  3879 ;;		line 92 in file "tubes.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3893 ;;      Params:         0       0       0       0       0
  3894 ;;      Locals:         0       0       0       0       0
  3895 ;;      Temps:          0       0       0       0       0
  3896 ;;      Totals:         0       0       0       0       0
  3897 ;;Total ram usage:        0 bytes
  3898 ;; Hardware stack levels used: 1
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_InitTubes
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906     0430                     _display:	
  3907                           ;psect for function _display
  3908                           
  3909     0430                     l1491:	
  3910                           ;incstack = 0
  3911                           ; Regs used in _display: [wreg]
  3912                           
  3913                           
  3914                           ;tubes.c: 93:     ((PORTB_SHADOW) |= (1<<0x1));
  3915     0430  1283               	bcf	3,5	;RP0=0, select bank0
  3916     0431  1303               	bcf	3,6	;RP1=0, select bank0
  3917     0432  14CB               	bsf	_PORTB_SHADOW,1
  3918                           
  3919                           ;tubes.c: 94:     ((PORTB_SHADOW) |= (1<<0x3));
  3920     0433  15CB               	bsf	_PORTB_SHADOW,3
  3921     0434                     l1493:
  3922                           
  3923                           ;tubes.c: 95:     PORTB = PORTB_SHADOW;
  3924     0434  084B               	movf	_PORTB_SHADOW,w
  3925     0435  0086               	movwf	6	;volatile
  3926     0436                     l262:
  3927     0436  0008               	return
  3928     0437                     __end_of_display:
  3929                           
  3930                           	psect	text32
  3931     0516                     __ptext32:	
  3932 ;; *************** function _blankTubes *****************
  3933 ;; Defined at:
  3934 ;;		line 103 in file "tubes.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  i               1    1[COMMON] unsigned char 
  3939 ;;  ptr             1    0[COMMON] PTR unsigned char 
  3940 ;;		 -> T0(1), 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3950 ;;      Params:         0       0       0       0       0
  3951 ;;      Locals:         2       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0
  3953 ;;      Totals:         2       0       0       0       0
  3954 ;;Total ram usage:        2 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_InitTubes
  3960 ;;		_displayError
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964     0516                     _blankTubes:	
  3965                           ;psect for function _blankTubes
  3966                           
  3967     0516                     l1379:	
  3968                           ;incstack = 0
  3969                           ; Regs used in _blankTubes: [wreg-fsr0h+status,2+status,0+btemp+1]
  3970                           
  3971                           
  3972                           ;tubes.c: 104:     unsigned char *ptr;;tubes.c: 105:     ptr = &T0;
  3973     0516  3022               	movlw	34
  3974     0517  00F0               	movwf	blankTubes@ptr
  3975     0518                     l1381:
  3976                           
  3977                           ;tubes.c: 107:     for(unsigned char i = 0; i < 8; i++) {
  3978     0518  01F1               	clrf	blankTubes@i
  3979     0519                     l1387:
  3980                           
  3981                           ;tubes.c: 108:         *ptr = 10;
  3982     0519  0870               	movf	blankTubes@ptr,w
  3983     051A  0084               	movwf	4
  3984     051B  300A               	movlw	10
  3985     051C  1383               	bcf	3,7	;select IRP bank0
  3986     051D  0080               	movwf	0
  3987     051E                     l1389:
  3988                           
  3989                           ;tubes.c: 109:         ptr++;
  3990     051E  3001               	movlw	1
  3991     051F  00FF               	movwf	btemp+1
  3992     0520  087F               	movf	btemp+1,w
  3993     0521  07F0               	addwf	blankTubes@ptr,f
  3994     0522                     l1391:
  3995                           
  3996                           ;tubes.c: 110:     }
  3997     0522  3001               	movlw	1
  3998     0523  00FF               	movwf	btemp+1
  3999     0524  087F               	movf	btemp+1,w
  4000     0525  07F1               	addwf	blankTubes@i,f
  4001     0526                     l1393:
  4002     0526  3008               	movlw	8
  4003     0527  0271               	subwf	blankTubes@i,w
  4004     0528  1C03               	skipc
  4005     0529  2D2B               	goto	u581
  4006     052A  2D2C               	goto	u580
  4007     052B                     u581:
  4008     052B  2D19               	goto	l1387
  4009     052C                     u580:
  4010     052C                     l1395:
  4011                           
  4012                           ;tubes.c: 111:     leftDP = rightDP = 0x00;
  4013     052C  1283               	bcf	3,5	;RP0=0, select bank0
  4014     052D  1303               	bcf	3,6	;RP1=0, select bank0
  4015     052E  01C7               	clrf	_rightDP
  4016     052F  01C8               	clrf	_leftDP
  4017     0530                     l270:
  4018     0530  0008               	return
  4019     0531                     __end_of_blankTubes:
  4020                           
  4021                           	psect	text33
  4022     044D                     __ptext33:	
  4023 ;; *************** function _InitI2C *****************
  4024 ;; Defined at:
  4025 ;;		line 4 in file "IIC.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  1    wreg      void 
  4032 ;; Registers used:
  4033 ;;		None
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  4039 ;;      Params:         0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0
  4042 ;;      Totals:         0       0       0       0       0
  4043 ;;Total ram usage:        0 bytes
  4044 ;; Hardware stack levels used: 1
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_Init
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052     044D                     _InitI2C:	
  4053                           ;psect for function _InitI2C
  4054                           
  4055     044D                     l1525:	
  4056                           ;incstack = 0
  4057                           ; Regs used in _InitI2C: []
  4058                           
  4059                           
  4060                           ;IIC.c: 5:     TRISAbits.TRISA0 = 0;
  4061     044D  1683               	bsf	3,5	;RP0=1, select bank1
  4062     044E  1303               	bcf	3,6	;RP1=0, select bank1
  4063     044F  1005               	bcf	5,0	;volatile
  4064                           
  4065                           ;IIC.c: 6:     TRISAbits.TRISA1 = 0;
  4066     0450  1085               	bcf	5,1	;volatile
  4067                           
  4068                           ;IIC.c: 8:     PORTAbits.RA1 = 0;
  4069     0451  1283               	bcf	3,5	;RP0=0, select bank0
  4070     0452  1303               	bcf	3,6	;RP1=0, select bank0
  4071     0453  1085               	bcf	5,1	;volatile
  4072                           
  4073                           ;IIC.c: 9:     PORTAbits.RA0 = 0;
  4074     0454  1005               	bcf	5,0	;volatile
  4075     0455                     l78:
  4076     0455  0008               	return
  4077     0456                     __end_of_InitI2C:
  4078     007E                     btemp	set	126	;btemp
  4079     007E                     wtemp0	set	126
  4080                           
  4081                           	psect	config
  4082                           
  4083                           ;Config register CONFIG @ 0x2007
  4084                           ;	Oscillator Selection bits
  4085                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  4086                           ;	Watchdog Timer Enable bit
  4087                           ;	WDTE = OFF, WDT disabled
  4088                           ;	Power-up Timer Enable bit
  4089                           ;	PWRTE = OFF, PWRT disabled
  4090                           ;	RA5/MCLR/VPP Pin Function Select bit
  4091                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  4092                           ;	Brown-out Detect Enable bit
  4093                           ;	BOREN = OFF, BOD disabled
  4094                           ;	Low-Voltage Programming Enable bit
  4095                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  4096                           ;	Data EE Memory Code Protection bit
  4097                           ;	CPD = OFF, Data memory code protection off
  4098                           ;	Flash Program Memory Code Protection bit
  4099                           ;	CP = OFF, Code protection off
  4100     2007                     	org	8199
  4101     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0h           70     29      33
    BANK0l            2      0       2
    BANK1            80      0       1
    BANK2            48      0       0

Pointer List with Targets:

    blankTubes@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> T0(BITBANK0l[1]), 

    checkDP@DP	PTR unsigned char  size(1) Largest target is 1
		 -> loadDisplay@LDP(COMMON[1]), loadDisplay@RDP(COMMON[1]), 

    loadDisplay@tubePtr	PTR unsigned char  size(1) Largest target is 1
		 -> T7(BITBANK0h[1]), 


Critical Paths under _main in COMMON

    _main->_getTime
    _main->_startRTC
    _getTime->_passTubeNum
    _getDate->_passTubeNum
    _readDataRTC->_I2C_ReadByte
    _passTubeNum->_loadDisplay
    _Init->_startRTC
    _startRTC->_displayError
    _displayError->_loadDisplay
    _isRTCRunning->_readByteRTC
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte
    _InitTubes->_loadDisplay
    _loadDisplay->_checkDP

Critical Paths under _main in BANK0h

    _main->_getTime
    _getTime->_getDate
    _getDate->_passTubeNum

Critical Paths under _main in BANK0l

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14344
                                             12 COMMON     2     2      0
                               _Init
                       _displayError
                            _getTime
                        _passTubeNum
                           _startRTC
 ---------------------------------------------------------------------------------
 (1) _getTime                                             14    14      0    7066
                                              9 COMMON     3     3      0
                                             18 BANK0h    11    11      0
                        _I2C_SendACK
                         _endReadRTC
                            _getDate
                        _passTubeNum
                        _readByteRTC
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (2) _getDate                                              9     9      0    3283
                                              9 BANK0h     9     9      0
                        _I2C_SendACK
                         _endReadRTC
                        _passTubeNum
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (2) _swapNibbles                                          4     4      0      44
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0     137
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
 ---------------------------------------------------------------------------------
 (1) _passTubeNum                                         10     1      9    2670
                                              8 COMMON     1     1      0
                                              0 BANK0h     9     0      9
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (3) _I2C_SendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0    2963
                            _InitI2C
                          _InitTubes
                       _checkRTCType
                       _isRTCRunning
                           _startRTC
 ---------------------------------------------------------------------------------
 (1) _startRTC                                             3     3      0    1152
                                              9 COMMON     3     3      0
                       _displayError
                        _endWriteRTC
                        _readByteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _displayError                                         1     1      0     468
                                              8 COMMON     1     1      0
                         _blankTubes
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (2) _isRTCRunning                                         2     2      0     342
                                              8 COMMON     2     2      0
                        _readByteRTC
 ---------------------------------------------------------------------------------
 (2) _checkRTCType                                         2     2      0    1001
                                              8 COMMON     2     2      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (3) _writeByteRTC                                         2     1      1     590
                                              6 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _writeDataRTC                                         1     1      0     159
                                              5 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _reqWriteRTC                                          1     1      0     159
                                              5 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _readByteRTC                                          2     2      0     319
                                              6 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (3) _reqReadRTC                                           1     1      0     159
                                              5 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteByte                                        5     5      0     137
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_SendNACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadByte                                         3     3      0     114
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitTubes                                            0     0      0     468
                         _blankTubes
                            _display
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (3) _loadDisplay                                          6     6      0     398
                                              2 COMMON     6     6      0
                            _checkDP
                              _latch
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (4) _latch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _checkDP                                              2     2      0     176
                                              0 COMMON     2     2      0
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (4) _send1ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _send0ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _blankTubes                                           2     2      0      70
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
     _InitI2C
     _InitTubes
       _blankTubes
       _display
       _loadDisplay
         _checkDP
           _send0ToDrivers
           _send1ToDrivers
         _latch
         _send0ToDrivers
         _send1ToDrivers
     _checkRTCType
       _readByteRTC
         _I2C_ReadByte
         _endReadRTC
           _I2C_SendNACK
           _I2C_Stop
         _reqReadRTC
           _I2C_ReStart
           _I2C_Start
           _I2C_WriteByte
       _writeByteRTC
         _endWriteRTC
           _I2C_Stop
         _reqWriteRTC
           _I2C_Start
           _I2C_WriteByte
         _writeDataRTC
           _I2C_WriteByte
     _isRTCRunning
       _readByteRTC
     _startRTC
       _displayError
         _blankTubes
         _loadDisplay
       _endWriteRTC
       _readByteRTC
       _reqWriteRTC
       _writeDataRTC
   _displayError
   _getTime
     _I2C_SendACK
     _endReadRTC
     _getDate
       _I2C_SendACK
       _endReadRTC
       _passTubeNum
         _loadDisplay
       _readDataRTC
         _I2C_ReadByte
       _reqReadRTC
       _swapNibbles
     _passTubeNum
     _readByteRTC
     _readDataRTC
     _reqReadRTC
     _swapNibbles
   _passTubeNum
   _startRTC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0h              46     1D      21       3       47.1%
BANK0l               2      0       2       4      100.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            30      0       0       6        0.0%
BANK2               30      0       0       7        0.0%
ABS                  0      0      32       8        0.0%
BITBANK0h           46      0       0       9        0.0%
BITBANK0l            2      0       0      10        0.0%
BITBANK1            50      0       0      11        0.0%
DATA                 0      0      32      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Nov 01 04:43:34 2023

            _swapNibbles 04FD                       l53 06C6                       l47 06C2  
                     l64 05CE                       l48 06A8                       l81 0493  
                     l90 0718                       l91 0742                       l67 0515  
                     l84 04E3                       l92 075D                       _T0 0022  
                     l93 0752                       _T1 0023                       l78 0455  
                     l94 075A                       _T2 0024                       l87 04D2  
                     _T3 0025                       _T4 0026                       _T5 0027  
                     l98 076E                       _T6 0028                       _T7 0029  
          ?_displayError 0070                      l101 057B                      l103 05A3  
                    l106 04B1                      l109 04A2                      l142 045F  
                    l151 044C                      l160 0420                      l145 042F  
                    l154 043D                      l251 0688                      l163 0444  
                    l171 0711                      l148 0423                      l237 0427  
                    l157 042B                      l173 0715                      l270 0530  
                    l262 0436                      l166 0485                      l191 07F5  
                    l256 0578                      l177 0600                      l273 0548  
                    l282 04C1                      l178 0604                      l194 0645  
                    l259 046B                      l276 0551                      l285 04FC  
                    l279 0478                      u500 0758                      u501 0757  
                    u510 0762                      u511 0761                      u600 066E  
                    u520 0767                      u601 066D                      u521 0766  
                    u610 0676                      u530 076D                      u611 0675  
                    u531 076C                      u620 0687                      u621 0686  
                    u550 0561                      u470 072E                      u710 0706  
                    u551 0560                      u471 072A                      u711 0705  
                    u464 0725                      u640 0540                      u800 0788  
                    u545 0558                      u465 0722                      u641 053F  
                    u705 06FD                      u801 0787                      u570 05A2  
                    u490 0742                      u650 054C                      u810 078E  
                    u571 05A1                      u491 0741                      u651 054B  
                    u635 0537                      u811 078D                      u580 052C  
                    u564 0591                      u484 0731                      u740 05DE  
                    u820 07A3                      u900 06CA                      u581 052B  
                    u565 058F                      u741 05DD                      u725 047F  
                    u821 07A2                      u901 06C9                      u590 065D  
                    u750 05F5                      u830 07D6                      u591 065C  
                    u751 05F4                      u735 05D5                      u831 07D5  
                    u760 05C3                      u840 0691                      u761 05C2  
                    u665 0501                      u841 0690                      u690 06F3  
                    u770 05CD                      u691 06F2                      u771 05CC  
                    u675 050D                      u860 069F                      u685 06EA  
                    u917 0795                      u861 069E                      u790 0780  
                    u870 06A8                      u791 077F                      u871 06A7  
                    u855 0696                      u880 06AC                      u785 0777  
                    u881 06AB                      u890 06C6                      u891 06C5  
                    fsr0 0004                      indf 0000      loadDisplay@numIndex 0075  
                   l1301 0731                     l1311 0758                     l1303 0732  
                   l1321 0494                     l1313 075B                     l1305 0735  
                   l1331 0577                     l1323 0553                     l1315 0762  
                   l1307 073C                     l1325 0561                     l1333 0460  
                   l1421 0660                     l1405 064F                     l1341 0579  
                   l1317 0767                     l1309 074F                     l1501 06D7  
                   l1271 046C                     l1327 056B                     l1335 0463  
                   l1431 0678                     l1423 0664                     l1415 0654  
                   l1407 0651                     l1351 0598                     l1319 076D  
                   l1511 06E5                     l1503 06D9                     l1281 04B8  
                   l1273 0470                     l1329 056D                     l1337 0465  
                   l1441 0687                     l1433 0679                     l1425 0668  
                   l1417 065D                     l1409 0653                     l1353 059C  
                   l1361 0458                     l1521 0706                     l1513 06F3  
                   l1505 06DB                     l1601 05B5                     l1283 04B9  
                   l1275 0472                     l1339 0469                     l1435 067B  
                   l1427 066E                     l1419 065F                     l1355 05A2  
                   l1347 0586                     l1291 04C2                     l1363 045A  
                   l1371 0439                     l1531 0479                     l1451 0546  
                   l1443 0531                     l1523 0714                     l1515 06F5  
                   l1507 06DD                     l1611 05C6                     l1603 05BC  
                   l1525 044D                     l1381 0518                     l1285 04BB  
                   l1277 0476                     l1437 067D                     l1429 0676  
                   l1349 0597                     l1293 0717                     l1365 045D  
                   l1373 043B                     l1541 05DE                     l1533 047C  
                   l1453 054C                     l1445 0532                     l1517 06F7  
                   l1509 06E4                     l1613 05C8                     l1605 05BD  
                   l1461 04FB                     l1621 0780                     l1391 0522  
                   l1279 04B2                     l1439 0681                     l1527 0424  
                   l1367 0421                     l1287 0486                     l1359 0457  
                   l1375 0429                     l1551 05EE                     l1543 05E2  
                   l1447 0540                     l1519 06FA                     l1607 05BE  
                   l1471 042E                     l1463 04FE                     l1631 079D  
                   l1623 0782                     l1393 0526                     l1529 0426  
                   l1289 04D3                     l1481 044A                     l1377 041F  
                   l1369 0438                     l1553 05F1                     l1545 05E6  
                   l1537 05CF                     l1449 0544                     l1609 05C3  
                   l1641 07B0                     l1625 0788                     l1617 076F  
                   l1395 052C                     l1387 0519                     l1379 0516  
                   l1491 0430                     l1299 071C                     l1483 044B  
                   l1475 0446                     l1555 05F5                     l1547 05E7  
                   l1539 05D2                     l1467 04A3                     l1459 04E5  
                   l1571 060B                     l1651 07C3                     l1643 07B4  
                   l1635 07A4                     l1627 078E                     l1619 0774  
                   l1389 051E                     l1493 0434                     l1397 0646  
                   l1477 0446                     l1557 05F8                     l1549 05EB  
                   l1565 0603                     l1469 042C                     l1581 061B  
                   l1573 060C                     l1661 07D7                     l1653 07C9  
                   l1645 07B5                     l1637 07AA                     l1629 078F  
                   l1399 064E                     l1479 0448                     l1487 043F  
                   l1559 05FE                     l1495 06CC                     l1591 0633  
                   l1583 0621                     l1575 0611                     l1663 07DA  
                   l1655 07CC                     l1647 07BA                     l1639 07AB  
                   l1671 0689                     l1489 0443                     l1497 06D4  
                   l1593 05A4                     l1585 0624                     l1577 0615  
                   l1569 0605                     l1665 07DC                     l1657 07D2  
                   l1649 07C0                     l1681 06A1                     l1673 068A  
                   l1499 06D5                     l1595 05AC                     l1587 062A  
                   l1579 0616                     l1667 07DD                     l1659 07D6  
                   l1691 06C0                     l1683 06A2                     l1675 068C  
                   l1597 05AD                     l1589 062D                     l1669 07F1  
                   l1677 0691                     l1599 05B3                     l1687 06AC  
                   l1679 069F                     l1689 06AD          readByteRTC@data 0077  
                   _Flag 00A0                     _Init 05A4                     _main 0689  
                   btemp 007E         __end_of_I2C_Stop 04D3             ?_loadDisplay 0070  
                   start 0000             ?_readDataRTC 0070          __end_of_InitI2C 0456  
       getTime@tensHours 0041             ?_readByteRTC 0070           ??_displayError 0078  
                  ?_Init 0070                    ?_main 0070                    _CMCON 001F  
   loadDisplay@tubeIndex 0074                    _PORTB 0006          __end_of_checkDP 0579  
                  _TRISA 0085                    _TRISB 0086        passTubeNum@tmpLDP 0031  
      passTubeNum@tmpRDP 0032     __end_of_isRTCRunning 0486          __end_of_getDate 0646  
        __end_of_getTime 07F6             _I2C_ReadByte 0579          __end_of_display 0437  
                  _latch 0460             _I2C_SendNACK 0494        __end_of_I2C_Start 0494  
                  status 0003                    wtemp0 007E         ??_send0ToDrivers 0070  
           ?_passTubeNum 002A         ??_send1ToDrivers 0070          __initialization 07F6  
           __end_of_Init 05CF             __end_of_main 06CC                   ??_Init 007C  
         getDate@tensDay 0036                   ??_main 007C             ?_reqWriteRTC 0070  
           _writeDataRTC 0428                   ?_latch 0070             _writeByteRTC 043E  
       checkRTCType@data 0079                ??_InitI2C 0070     getTime@singleMinutes 003D  
   getTime@singleSeconds 003C        reqReadRTC@address 0075        getDate@singleYear 0035  
                 _leftDP 0048                ??_checkDP 0070           loadDisplay@LDP 0076  
         loadDisplay@RDP 0077                ??_getDate 0079                ??_getTime 0079  
           _checkRTCType 05CF                ??_display 0070                ?_I2C_Stop 0070  
       __end_of_startRTC 0716     __end_of_displayError 0552  __end_of__initialization 07FE  
         __pcstackBANK0h 002A           __pcstackCOMMON 0070            _I2C_WriteByte 0716  
           ?_swapNibbles 0070            __end_of_latch 046C       getTime@tensMinutes 0040  
     getTime@tensSeconds 003F        __end_of_InitTubes 0428               ??_I2C_Stop 0070  
     getTime@singleHours 003E          getDate@tensYear 0038                  ??_latch 0070  
             _blankTubes 0516               _endReadRTC 0421             _isRTCRunning 0479  
             __pmaintext 0689           ?_I2C_WriteByte 0070         writeDataRTC@data 0075  
        swapNibbles@data 0073            ??_I2C_ReStart 0070            ??_I2C_SendACK 0070  
     readByteRTC@address 0076                  _ErrFlag 004A                  _InitI2C 044D  
              _I2C_Start 0486         I2C_ReadByte@Data 0071                ?_startRTC 0070  
             _oldSeconds 0049       getDate@singleMonth 0034                  _checkDP 0552  
                _getDate 0605                  __ptext0 0000                  __ptext1 076F  
                __ptext2 0605                  __ptext3 04FD                  _getTime 076F  
                __ptext4 042C                  __ptext5 04E4                  __ptext6 04A3  
                __ptext7 05A4                  __ptext8 06CC                  __ptext9 0531  
                _display 0430               _reqReadRTC 0456                  _rightDP 0047  
    __end_of_I2C_ReStart 04E4      __end_of_I2C_SendACK 04B2     end_of_initialization 07FE  
             getDate@day 0039            blankTubes@ptr 0070              ?_blankTubes 0070  
             ?_I2C_Start 0070          ??_I2C_WriteByte 0070              ?_endReadRTC 0070  
             ??_startRTC 0079                _PORTAbits 0005             _displayError 0531  
     startRTC@RTCaddress 007B            ??_endWriteRTC 0070                _TRISAbits 0085  
     reqWriteRTC@address 0075       loadDisplay@dispNum 0072       loadDisplay@tubePtr 0073  
    writeByteRTC@address 0077          getTime@tmpRight 0043              _I2C_ReStart 04D3  
            _I2C_SendACK 04A3              ?_reqReadRTC 0070      start_initialization 07F6  
              _InitTubes 0424      __end_of_endWriteRTC 0421            ??_loadDisplay 0072  
            ??_I2C_Start 0070            ??_readDataRTC 0073         getDate@tensMonth 0037  
       getDate@singleDay 0033            ??_readByteRTC 0076           I2C_WriteByte@i 0074  
            __pbssBANK0h 0047              __pbssBANK0l 004B                ___latbits 0000  
          ?_I2C_ReadByte 0070               ?_InitTubes 0070            ?_I2C_SendNACK 0070  
               ?_InitI2C 0070                __pnvBANK1 00A0            ??_passTubeNum 0078  
          I2C_ReadByte@i 0072      __end_of_loadDisplay 0689                 ?_checkDP 0070  
    __end_of_readDataRTC 0430                 ?_getDate 0070                 ?_getTime 0070  
               ?_display 0070                checkDP@DP 0071         writeByteRTC@data 0076  
        readDataRTC@data 0073            ??_reqWriteRTC 0075            ?_writeDataRTC 0070  
    __end_of_readByteRTC 044D              _endWriteRTC 041F                 _I2C_Stop 04C2  
         ??_I2C_ReadByte 0070           ??_I2C_SendNACK 0070            ?_writeByteRTC 0076  
           ??_blankTubes 0070             ??_endReadRTC 0070           _send0ToDrivers 04B2  
    __end_of_passTubeNum 04FD            ?_checkRTCType 0070           _send1ToDrivers 046C  
         ??_writeDataRTC 0075         isRTCRunning@data 0079       __end_of_blankTubes 0531  
         getTime@minutes 0044           getTime@seconds 0046           ??_writeByteRTC 0077  
            ??_InitTubes 0078           getTime@tmpLeft 0042       __end_of_endReadRTC 0424  
        passTubeNum@tmp0 0030          passTubeNum@tmp1 002F          passTubeNum@tmp2 002E  
        passTubeNum@tmp3 002D          passTubeNum@tmp4 002C          passTubeNum@tmp5 002B  
        passTubeNum@tmp6 002A          passTubeNum@tmp7 0078      __end_of_reqWriteRTC 043E  
           getDate@month 003A              _loadDisplay 0646    __end_of_I2C_WriteByte 076F  
            _readDataRTC 042C   __end_of_send0ToDrivers 04C2            ??_swapNibbles 0070  
            _readByteRTC 0445   __end_of_send1ToDrivers 0479           ??_checkRTCType 0078  
           ?_I2C_ReStart 0070             ?_I2C_SendACK 0070             ??_reqReadRTC 0075  
               __ptext10 0479                 __ptext11 05CF                 __ptext20 04D3  
               __ptext12 043E                 __ptext21 0421                 __ptext13 0428  
               __ptext30 04B2                 __ptext22 04C2                 __ptext14 0437  
               __ptext31 0430                 __ptext23 0494                 __ptext15 041F  
               __ptext32 0516                 __ptext24 0579                 __ptext16 0445  
               __ptext33 044D                 __ptext25 0424                 __ptext17 0456  
               __ptext26 0646                 __ptext18 0716                 __ptext27 0460  
               __ptext19 0486                 __ptext28 0552                 __ptext29 046C  
           _PORTA_SHADOW 004C             _PORTB_SHADOW 004B              blankTubes@i 0071  
          ?_isRTCRunning 0070              _passTubeNum 04E4     __end_of_I2C_ReadByte 05A4  
     __end_of_reqReadRTC 0460     __end_of_I2C_SendNACK 04A3          ?_send0ToDrivers 0070  
               _startRTC 06CC          ?_send1ToDrivers 0070                 main@menu 007D  
    __end_of_swapNibbles 0516              getDate@year 003B              _reqWriteRTC 0437  
      startRTC@clockTest 007A           ??_isRTCRunning 0078     __end_of_writeDataRTC 042C  
   __end_of_writeByteRTC 0445             getTime@hours 0045               _OPTION_REG 0081  
           ?_endWriteRTC 0070     __end_of_checkRTCType 0605        I2C_WriteByte@Data 0072  
     I2C_WriteByte@timer 0073  
