

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Oct 28 04:57:47 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0h,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	text20,local,class=CODE,merge=1,delta=2
    30                           	psect	text21,local,class=CODE,merge=1,delta=2
    31                           	psect	text22,local,class=CODE,merge=1,delta=2
    32                           	psect	text23,local,class=CODE,merge=1,delta=2
    33                           	psect	text24,local,class=CODE,merge=1,delta=2
    34                           	psect	text25,local,class=CODE,merge=1,delta=2
    35                           	psect	text26,local,class=CODE,merge=1,delta=2
    36                           	psect	text27,local,class=CODE,merge=1,delta=2
    37                           	psect	text28,local,class=CODE,merge=1,delta=2
    38                           	psect	text29,local,class=CODE,merge=1,delta=2
    39                           	psect	text30,local,class=CODE,merge=1,delta=2
    40                           	psect	text31,local,class=CODE,merge=1,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x22,1,_T0
    43                           	dabs	1,0x28,1,_T6
    44                           	dabs	1,0x27,1,_T5
    45                           	dabs	1,0x26,1,_T4
    46                           	dabs	1,0x25,1,_T3
    47                           	dabs	1,0x24,1,_T2
    48                           	dabs	1,0x23,1,_T1
    49                           	dabs	1,0x29,1,_T7
    50                           	dabs	1,0x7E,2
    51     0000                     
    52                           ; Generated 12/10/2023 GMT
    53                           ; 
    54                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution. Publication is not required when
    68                           ;        this file is used in an embedded application.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F628A Definitions
    84                           ; 
    85                           ; SFR Addresses
    86     0000                     	;# 
    87     0001                     	;# 
    88     0002                     	;# 
    89     0003                     	;# 
    90     0004                     	;# 
    91     0005                     	;# 
    92     0006                     	;# 
    93     000A                     	;# 
    94     000B                     	;# 
    95     000C                     	;# 
    96     000E                     	;# 
    97     000E                     	;# 
    98     000F                     	;# 
    99     0010                     	;# 
   100     0011                     	;# 
   101     0012                     	;# 
   102     0015                     	;# 
   103     0015                     	;# 
   104     0016                     	;# 
   105     0017                     	;# 
   106     0018                     	;# 
   107     0019                     	;# 
   108     001A                     	;# 
   109     001F                     	;# 
   110     0081                     	;# 
   111     0085                     	;# 
   112     0086                     	;# 
   113     008C                     	;# 
   114     008E                     	;# 
   115     0092                     	;# 
   116     0098                     	;# 
   117     0099                     	;# 
   118     009A                     	;# 
   119     009B                     	;# 
   120     009C                     	;# 
   121     009D                     	;# 
   122     009F                     	;# 
   123     0000                     	;# 
   124     0001                     	;# 
   125     0002                     	;# 
   126     0003                     	;# 
   127     0004                     	;# 
   128     0005                     	;# 
   129     0006                     	;# 
   130     000A                     	;# 
   131     000B                     	;# 
   132     000C                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0015                     	;# 
   140     0015                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     008C                     	;# 
   151     008E                     	;# 
   152     0092                     	;# 
   153     0098                     	;# 
   154     0099                     	;# 
   155     009A                     	;# 
   156     009B                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009F                     	;# 
   160     0000                     	;# 
   161     0001                     	;# 
   162     0002                     	;# 
   163     0003                     	;# 
   164     0004                     	;# 
   165     0005                     	;# 
   166     0006                     	;# 
   167     000A                     	;# 
   168     000B                     	;# 
   169     000C                     	;# 
   170     000E                     	;# 
   171     000E                     	;# 
   172     000F                     	;# 
   173     0010                     	;# 
   174     0011                     	;# 
   175     0012                     	;# 
   176     0015                     	;# 
   177     0015                     	;# 
   178     0016                     	;# 
   179     0017                     	;# 
   180     0018                     	;# 
   181     0019                     	;# 
   182     001A                     	;# 
   183     001F                     	;# 
   184     0081                     	;# 
   185     0085                     	;# 
   186     0086                     	;# 
   187     008C                     	;# 
   188     008E                     	;# 
   189     0092                     	;# 
   190     0098                     	;# 
   191     0099                     	;# 
   192     009A                     	;# 
   193     009B                     	;# 
   194     009C                     	;# 
   195     009D                     	;# 
   196     009F                     	;# 
   197     0000                     	;# 
   198     0001                     	;# 
   199     0002                     	;# 
   200     0003                     	;# 
   201     0004                     	;# 
   202     0005                     	;# 
   203     0006                     	;# 
   204     000A                     	;# 
   205     000B                     	;# 
   206     000C                     	;# 
   207     000E                     	;# 
   208     000E                     	;# 
   209     000F                     	;# 
   210     0010                     	;# 
   211     0011                     	;# 
   212     0012                     	;# 
   213     0015                     	;# 
   214     0015                     	;# 
   215     0016                     	;# 
   216     0017                     	;# 
   217     0018                     	;# 
   218     0019                     	;# 
   219     001A                     	;# 
   220     001F                     	;# 
   221     0081                     	;# 
   222     0085                     	;# 
   223     0086                     	;# 
   224     008C                     	;# 
   225     008E                     	;# 
   226     0092                     	;# 
   227     0098                     	;# 
   228     0099                     	;# 
   229     009A                     	;# 
   230     009B                     	;# 
   231     009C                     	;# 
   232     009D                     	;# 
   233     009F                     	;# 
   234     0000                     	;# 
   235     0001                     	;# 
   236     0002                     	;# 
   237     0003                     	;# 
   238     0004                     	;# 
   239     0005                     	;# 
   240     0006                     	;# 
   241     000A                     	;# 
   242     000B                     	;# 
   243     000C                     	;# 
   244     000E                     	;# 
   245     000E                     	;# 
   246     000F                     	;# 
   247     0010                     	;# 
   248     0011                     	;# 
   249     0012                     	;# 
   250     0015                     	;# 
   251     0015                     	;# 
   252     0016                     	;# 
   253     0017                     	;# 
   254     0018                     	;# 
   255     0019                     	;# 
   256     001A                     	;# 
   257     001F                     	;# 
   258     0081                     	;# 
   259     0085                     	;# 
   260     0086                     	;# 
   261     008C                     	;# 
   262     008E                     	;# 
   263     0092                     	;# 
   264     0098                     	;# 
   265     0099                     	;# 
   266     009A                     	;# 
   267     009B                     	;# 
   268     009C                     	;# 
   269     009D                     	;# 
   270     009F                     	;# 
   271                           
   272                           	psect	text0
   273     0000                     __ptext0:
   274     0006                     _PORTB	set	6
   275     001F                     _CMCON	set	31
   276     0005                     _PORTAbits	set	5
   277     0085                     _TRISAbits	set	133
   278     0081                     _OPTION_REG	set	129
   279     0086                     _TRISB	set	134
   280     0085                     _TRISA	set	133
   281                           
   282                           	psect	cinit
   283     07F9                     start_initialization:	
   284                           ; #config settings
   285                           
   286     07F9                     __initialization:
   287                           
   288                           ; Clear objects allocated to COMMON
   289     07F9  01F9               	clrf	__pbssCOMMON& (0+127)
   290     07FA  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   291     07FB  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   292     07FC  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
   293     07FD  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
   294     07FE                     end_of_initialization:	
   295                           ;End of C runtime variable initialization code
   296                           
   297     07FE                     __end_of__initialization:
   298     07FE  0183               	clrf	3
   299     07FF  2E67               	ljmp	_main	;jump to C main() function
   300                           
   301                           	psect	bssCOMMON
   302     0079                     __pbssCOMMON:
   303     0079                     _rightDP:
   304     0079                     	ds	1
   305     007A                     _leftDP:
   306     007A                     	ds	1
   307     007B                     _PORTB_SHADOW:
   308     007B                     	ds	1
   309     007C                     _PORTA_SHADOW:
   310     007C                     	ds	1
   311     007D                     _flag:
   312     007D                     	ds	1
   313                           
   314                           	psect	cstackCOMMON
   315     0070                     __pcstackCOMMON:
   316     0070                     ?_isRTCRunning:
   317     0070                     ?_checkRTCType:	
   318                           ; 1 bit 
   319                           
   320     0070                     ?_I2C_WriteByte:	
   321                           ; 1 bit 
   322                           
   323     0070                     ?_Init:	
   324                           ; 1 bit 
   325                           
   326     0070                     ?_getTime:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0070                     ?_preLoadWL:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     0070                     ??_preLoadWL:	
   333                           ; 1 bytes @ 0x0
   334                           
   335     0070                     ?_loadDisplay:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ?_display:	
   339                           ; 1 bytes @ 0x0
   340                           
   341     0070                     ??_display:	
   342                           ; 1 bytes @ 0x0
   343                           
   344     0070                     ?_InitI2C:	
   345                           ; 1 bytes @ 0x0
   346                           
   347     0070                     ??_InitI2C:	
   348                           ; 1 bytes @ 0x0
   349                           
   350     0070                     ?_blankTubes:	
   351                           ; 1 bytes @ 0x0
   352                           
   353     0070                     ??_blankTubes:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0070                     ?_startRTC:	
   357                           ; 1 bytes @ 0x0
   358                           
   359     0070                     ?_checkDP:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0070                     ??_checkDP:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0070                     ?_send1ToDrivers:	
   366                           ; 1 bytes @ 0x0
   367                           
   368     0070                     ??_send1ToDrivers:	
   369                           ; 1 bytes @ 0x0
   370                           
   371     0070                     ?_send0ToDrivers:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0070                     ??_send0ToDrivers:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0070                     ?_latch:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0070                     ??_latch:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0070                     ?_main:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0070                     ?_swapNibbles:	
   387                           ; 1 bytes @ 0x0
   388                           
   389     0070                     ??_swapNibbles:	
   390                           ; 1 bytes @ 0x0
   391                           
   392     0070                     ?_I2C_Start:	
   393                           ; 1 bytes @ 0x0
   394                           
   395     0070                     ??_I2C_Start:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0070                     ?_I2C_ReStart:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ??_I2C_ReStart:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ?_I2C_Stop:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ??_I2C_Stop:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ??_I2C_WriteByte:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?_I2C_ReadByte:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ??_I2C_ReadByte:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ?_I2C_SendACK:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ??_I2C_SendACK:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ?_I2C_SendNACK:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ??_I2C_SendNACK:	
   429                           ; 1 bytes @ 0x0
   430                           
   431     0070                     ?_reqReadRTC:	
   432                           ; 1 bytes @ 0x0
   433                           
   434     0070                     ?_readDataRTC:	
   435                           ; 1 bytes @ 0x0
   436                           
   437     0070                     ?_endReadRTC:	
   438                           ; 1 bytes @ 0x0
   439                           
   440     0070                     ??_endReadRTC:	
   441                           ; 1 bytes @ 0x0
   442                           
   443     0070                     ?_readByteRTC:	
   444                           ; 1 bytes @ 0x0
   445                           
   446     0070                     ?_reqWriteRTC:	
   447                           ; 1 bytes @ 0x0
   448                           
   449     0070                     ?_writeDataRTC:	
   450                           ; 1 bytes @ 0x0
   451                           
   452     0070                     ?_endWriteRTC:	
   453                           ; 1 bytes @ 0x0
   454                           
   455     0070                     ??_endWriteRTC:	
   456                           ; 1 bytes @ 0x0
   457                           
   458     0070                     blankTubes@ptr:	
   459                           ; 1 bytes @ 0x0
   460                           
   461                           
   462                           ; 1 bytes @ 0x0
   463     0070                     	ds	1
   464     0071                     I2C_ReadByte@Data:
   465     0071                     checkDP@DP:	
   466                           ; 1 bytes @ 0x1
   467                           
   468     0071                     blankTubes@i:	
   469                           ; 1 bytes @ 0x1
   470                           
   471                           
   472                           ; 1 bytes @ 0x1
   473     0071                     	ds	1
   474     0072                     ??_loadDisplay:
   475     0072                     I2C_WriteByte@Data:	
   476                           ; 1 bytes @ 0x2
   477                           
   478     0072                     I2C_ReadByte@i:	
   479                           ; 1 bytes @ 0x2
   480                           
   481     0072                     loadDisplay@dispNum:	
   482                           ; 1 bytes @ 0x2
   483                           
   484                           
   485                           ; 1 bytes @ 0x2
   486     0072                     	ds	1
   487     0073                     ??_readDataRTC:
   488     0073                     swapNibbles@data:	
   489                           ; 1 bytes @ 0x3
   490                           
   491     0073                     I2C_WriteByte@i:	
   492                           ; 1 bytes @ 0x3
   493                           
   494     0073                     readDataRTC@data:	
   495                           ; 1 bytes @ 0x3
   496                           
   497     0073                     loadDisplay@tubePtr:	
   498                           ; 1 bytes @ 0x3
   499                           
   500                           
   501                           ; 1 bytes @ 0x3
   502     0073                     	ds	1
   503     0074                     ??_reqReadRTC:
   504     0074                     ??_reqWriteRTC:	
   505                           ; 1 bytes @ 0x4
   506                           
   507     0074                     ??_writeDataRTC:	
   508                           ; 1 bytes @ 0x4
   509                           
   510     0074                     reqReadRTC@address:	
   511                           ; 1 bytes @ 0x4
   512                           
   513     0074                     reqWriteRTC@address:	
   514                           ; 1 bytes @ 0x4
   515                           
   516     0074                     writeDataRTC@data:	
   517                           ; 1 bytes @ 0x4
   518                           
   519     0074                     loadDisplay@tubeIndex:	
   520                           ; 1 bytes @ 0x4
   521                           
   522                           
   523                           ; 1 bytes @ 0x4
   524     0074                     	ds	1
   525     0075                     ??_isRTCRunning:
   526     0075                     ??_startRTC:	
   527                           ; 1 bytes @ 0x5
   528                           
   529     0075                     ??_readByteRTC:	
   530                           ; 1 bytes @ 0x5
   531                           
   532     0075                     ?_writeByteRTC:	
   533                           ; 1 bytes @ 0x5
   534                           
   535     0075                     readByteRTC@address:	
   536                           ; 1 bytes @ 0x5
   537                           
   538     0075                     writeByteRTC@data:	
   539                           ; 1 bytes @ 0x5
   540                           
   541     0075                     loadDisplay@numIndex:	
   542                           ; 1 bytes @ 0x5
   543                           
   544                           
   545                           ; 1 bytes @ 0x5
   546     0075                     	ds	1
   547     0076                     ??_writeByteRTC:
   548     0076                     readByteRTC@data:	
   549                           ; 1 bytes @ 0x6
   550                           
   551     0076                     writeByteRTC@address:	
   552                           ; 1 bytes @ 0x6
   553                           
   554     0076                     isRTCRunning@data:	
   555                           ; 1 bytes @ 0x6
   556                           
   557     0076                     loadDisplay@LDP:	
   558                           ; 1 bytes @ 0x6
   559                           
   560                           
   561                           ; 1 bytes @ 0x6
   562     0076                     	ds	1
   563     0077                     ??_checkRTCType:
   564     0077                     loadDisplay@RDP:	
   565                           ; 1 bytes @ 0x7
   566                           
   567                           
   568                           ; 1 bytes @ 0x7
   569     0077                     	ds	1
   570     0078                     ??_passTubeNum:
   571     0078                     checkRTCType@data:	
   572                           ; 1 bytes @ 0x8
   573                           
   574     0078                     passTubeNum@tmp7:	
   575                           ; 1 bytes @ 0x8
   576                           
   577                           
   578                           ; 1 bytes @ 0x8
   579     0078                     	ds	1
   580     0079                     ??_Init:
   581     0079                     ??_getTime:	
   582                           ; 1 bytes @ 0x9
   583                           
   584     0079                     ??_main:	
   585                           ; 1 bytes @ 0x9
   586                           
   587                           
   588                           	psect	cstackBANK0h
   589     002A                     __pcstackBANK0h:	
   590                           ; 1 bytes @ 0x9
   591                           
   592     002A                     ?_passTubeNum:
   593     002A                     passTubeNum@tmp6:	
   594                           ; 1 bytes @ 0x0
   595                           
   596                           
   597                           ; 1 bytes @ 0x0
   598     002A                     	ds	1
   599     002B                     passTubeNum@tmp5:
   600                           
   601                           ; 1 bytes @ 0x1
   602     002B                     	ds	1
   603     002C                     passTubeNum@tmp4:
   604                           
   605                           ; 1 bytes @ 0x2
   606     002C                     	ds	1
   607     002D                     passTubeNum@tmp3:
   608                           
   609                           ; 1 bytes @ 0x3
   610     002D                     	ds	1
   611     002E                     passTubeNum@tmp2:
   612                           
   613                           ; 1 bytes @ 0x4
   614     002E                     	ds	1
   615     002F                     passTubeNum@tmp1:
   616                           
   617                           ; 1 bytes @ 0x5
   618     002F                     	ds	1
   619     0030                     passTubeNum@tmp0:
   620                           
   621                           ; 1 bytes @ 0x6
   622     0030                     	ds	1
   623     0031                     passTubeNum@tmpLDP:
   624                           
   625                           ; 1 bytes @ 0x7
   626     0031                     	ds	1
   627     0032                     passTubeNum@tmpRDP:
   628                           
   629                           ; 1 bytes @ 0x8
   630     0032                     	ds	1
   631     0033                     getTime@singleSeconds:
   632                           
   633                           ; 1 bytes @ 0x9
   634     0033                     	ds	1
   635     0034                     getTime@singleMinutes:
   636                           
   637                           ; 1 bytes @ 0xA
   638     0034                     	ds	1
   639     0035                     getTime@singleHours:
   640                           
   641                           ; 1 bytes @ 0xB
   642     0035                     	ds	1
   643     0036                     getTime@tensSeconds:
   644                           
   645                           ; 1 bytes @ 0xC
   646     0036                     	ds	1
   647     0037                     getTime@tensMinutes:
   648                           
   649                           ; 1 bytes @ 0xD
   650     0037                     	ds	1
   651     0038                     getTime@tensHours:
   652                           
   653                           ; 1 bytes @ 0xE
   654     0038                     	ds	1
   655     0039                     getTime@seconds:
   656                           
   657                           ; 1 bytes @ 0xF
   658     0039                     	ds	1
   659     003A                     getTime@minutes:
   660                           
   661                           ; 1 bytes @ 0x10
   662     003A                     	ds	1
   663     003B                     getTime@hours:
   664                           
   665                           ; 1 bytes @ 0x11
   666     003B                     	ds	1
   667                           
   668                           	psect	maintext
   669     0667                     __pmaintext:	
   670 ;;
   671 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   672 ;;
   673 ;; *************** function _main *****************
   674 ;; Defined at:
   675 ;;		line 37 in file "main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : B00/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         0       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0
   692 ;;      Totals:         0       0       0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels required when called: 5
   695 ;; This function calls:
   696 ;;		_Init
   697 ;;		_display
   698 ;;		_getTime
   699 ;;		_loadDisplay
   700 ;;		_preLoadWL
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706     0667                     _main:	
   707                           ;psect for function _main
   708                           
   709     0667                     l1443:	
   710                           ;incstack = 0
   711                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   712                           
   713                           
   714                           ;main.c: 38:     Init();
   715     0667  269C               	fcall	_Init
   716     0668                     l1445:
   717                           
   718                           ;main.c: 40:         if(PORTAbits.RA2) {
   719     0668  1283               	bcf	3,5	;RP0=0, select bank0
   720     0669  1303               	bcf	3,6	;RP1=0, select bank0
   721     066A  1D05               	btfss	5,2	;volatile
   722     066B  2E6D               	goto	u471
   723     066C  2E6E               	goto	u470
   724     066D                     u471:
   725     066D  2E74               	goto	l44
   726     066E                     u470:
   727     066E                     l45:	
   728                           ;main.c: 43:             }
   729                           
   730                           
   731                           ;main.c: 41:             while(PORTAbits.RA2) {
   732     066E  1905               	btfsc	5,2	;volatile
   733     066F  2E71               	goto	u481
   734     0670  2E72               	goto	u480
   735     0671                     u481:
   736     0671  2E6E               	goto	l45
   737     0672                     u480:
   738     0672                     l1449:
   739                           
   740                           ;main.c: 44:             getTime();
   741     0672  27B7               	fcall	_getTime
   742                           
   743                           ;main.c: 45:         } else if (PORTAbits.RA3) {
   744     0673  2E68               	goto	l1445
   745     0674                     l44:
   746     0674  1D85               	btfss	5,3	;volatile
   747     0675  2E77               	goto	u491
   748     0676  2E78               	goto	u490
   749     0677                     u491:
   750     0677  2E68               	goto	l1445
   751     0678                     u490:
   752     0678                     l50:	
   753                           ;main.c: 48:             }
   754                           
   755                           
   756                           ;main.c: 46:             while(PORTAbits.RA3) {
   757     0678  1985               	btfsc	5,3	;volatile
   758     0679  2E7B               	goto	u501
   759     067A  2E7C               	goto	u500
   760     067B                     u501:
   761     067B  2E78               	goto	l50
   762     067C                     u500:
   763     067C                     l1453:
   764                           
   765                           ;main.c: 49:             preLoadWL();
   766     067C  2609               	fcall	_preLoadWL
   767     067D                     l1455:
   768                           
   769                           ;main.c: 50:             loadDisplay();
   770     067D  2776               	fcall	_loadDisplay
   771     067E                     l1457:
   772                           
   773                           ;main.c: 51:             display();
   774     067E  256E               	fcall	_display
   775     067F  2E68               	goto	l1445
   776     0680  2800               	ljmp	start
   777     0681                     __end_of_main:
   778                           
   779                           	psect	text1
   780     0609                     __ptext1:	
   781 ;; *************** function _preLoadWL *****************
   782 ;; Defined at:
   783 ;;		line 19 in file "tubes.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   797 ;;      Params:         0       0       0       0       0
   798 ;;      Locals:         0       0       0       0       0
   799 ;;      Temps:          0       0       0       0       0
   800 ;;      Totals:         0       0       0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels used: 1
   803 ;; This function calls:
   804 ;;		Nothing
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810     0609                     _preLoadWL:	
   811                           ;psect for function _preLoadWL
   812                           
   813     0609                     l1089:	
   814                           ;incstack = 0
   815                           ; Regs used in _preLoadWL: [wreg+status,2]
   816                           
   817                           
   818                           ;tubes.c: 20:     T7 = 1;
   819     0609  1283               	bcf	3,5	;RP0=0, select bank0
   820     060A  1303               	bcf	3,6	;RP1=0, select bank0
   821     060B  01A9               	clrf	41
   822     060C  0AA9               	incf	41,f
   823     060D                     l1091:
   824                           
   825                           ;tubes.c: 21:     T6 = 10;
   826     060D  300A               	movlw	10
   827     060E  00A8               	movwf	40
   828     060F                     l1093:
   829                           
   830                           ;tubes.c: 22:     T5 = 0;
   831     060F  01A7               	clrf	39
   832     0610                     l1095:
   833                           
   834                           ;tubes.c: 23:     T4 = 4;
   835     0610  3004               	movlw	4
   836     0611  00A6               	movwf	38
   837     0612                     l1097:
   838                           
   839                           ;tubes.c: 24:     T3 = 8;
   840     0612  3008               	movlw	8
   841     0613  00A5               	movwf	37
   842     0614                     l1099:
   843                           
   844                           ;tubes.c: 25:     T2 = 5;
   845     0614  3005               	movlw	5
   846     0615  00A4               	movwf	36
   847     0616                     l1101:
   848                           
   849                           ;tubes.c: 26:     T1 = 9;
   850     0616  3009               	movlw	9
   851     0617  00A3               	movwf	35
   852     0618                     l1103:
   853                           
   854                           ;tubes.c: 27:     T0 = 6;
   855     0618  3006               	movlw	6
   856     0619  00A2               	movwf	34
   857                           
   858                           ;tubes.c: 28:     leftDP = 0x00;
   859     061A  01FA               	clrf	_leftDP
   860                           
   861                           ;tubes.c: 29:     rightDP = 0x00;
   862     061B  01F9               	clrf	_rightDP
   863     061C                     l1105:
   864                           
   865                           ;tubes.c: 30:     (rightDP |= (1<<6));
   866     061C  1779               	bsf	_rightDP,6
   867     061D                     l191:
   868     061D  0008               	return
   869     061E                     __end_of_preLoadWL:
   870                           
   871                           	psect	text2
   872     07B7                     __ptext2:	
   873 ;; *************** function _getTime *****************
   874 ;; Defined at:
   875 ;;		line 106 in file "RTC.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  hours           1   17[BANK0h] unsigned char 
   880 ;;  minutes         1   16[BANK0h] unsigned char 
   881 ;;  seconds         1   15[BANK0h] unsigned char 
   882 ;;  tensHours       1   14[BANK0h] unsigned char 
   883 ;;  tensMinutes     1   13[BANK0h] unsigned char 
   884 ;;  tensSeconds     1   12[BANK0h] unsigned char 
   885 ;;  singleHours     1   11[BANK0h] unsigned char 
   886 ;;  singleMinute    1   10[BANK0h] unsigned char 
   887 ;;  singleSecond    1    9[BANK0h] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
   897 ;;      Params:         0       0       0       0       0
   898 ;;      Locals:         0       9       0       0       0
   899 ;;      Temps:          0       0       0       0       0
   900 ;;      Totals:         0       9       0       0       0
   901 ;;Total ram usage:        9 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 4
   904 ;; This function calls:
   905 ;;		_I2C_SendACK
   906 ;;		_endReadRTC
   907 ;;		_passTubeNum
   908 ;;		_readDataRTC
   909 ;;		_reqReadRTC
   910 ;;		_swapNibbles
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916     07B7                     _getTime:	
   917                           ;psect for function _getTime
   918                           
   919     07B7                     l1419:	
   920                           ;incstack = 0
   921                           ; Regs used in _getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   922                           
   923                           
   924                           ;RTC.c: 107:     unsigned char seconds, minutes, hours;;RTC.c: 108:     unsigned char si
      +                          ngleSeconds, singleMinutes, singleHours;;RTC.c: 109:     unsigned char tensSeconds, tens
      +                          Minutes, tensHours;;RTC.c: 110:     reqReadRTC(0x00);
   925     07B7  3000               	movlw	0
   926     07B8  258F               	fcall	_reqReadRTC
   927                           
   928                           ;RTC.c: 111:     seconds = readDataRTC();
   929     07B9  255C               	fcall	_readDataRTC
   930     07BA  1283               	bcf	3,5	;RP0=0, select bank0
   931     07BB  1303               	bcf	3,6	;RP1=0, select bank0
   932     07BC  00B9               	movwf	getTime@seconds
   933     07BD                     l1421:
   934                           
   935                           ;RTC.c: 112:     I2C_SendACK();
   936     07BD  25D8               	fcall	_I2C_SendACK
   937     07BE                     l1423:
   938                           
   939                           ;RTC.c: 113:     minutes = readDataRTC();
   940     07BE  255C               	fcall	_readDataRTC
   941     07BF  1283               	bcf	3,5	;RP0=0, select bank0
   942     07C0  1303               	bcf	3,6	;RP1=0, select bank0
   943     07C1  00BA               	movwf	getTime@minutes
   944                           
   945                           ;RTC.c: 114:     I2C_SendACK();
   946     07C2  25D8               	fcall	_I2C_SendACK
   947     07C3                     l1425:
   948                           
   949                           ;RTC.c: 115:     hours = readDataRTC();
   950     07C3  255C               	fcall	_readDataRTC
   951     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   952     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   953     07C6  00BB               	movwf	getTime@hours
   954     07C7                     l1427:
   955                           
   956                           ;RTC.c: 116:     endReadRTC();
   957     07C7  2555               	fcall	_endReadRTC
   958     07C8                     l1429:
   959                           
   960                           ;RTC.c: 117:     singleSeconds = (seconds & 0x0F);
   961     07C8  1283               	bcf	3,5	;RP0=0, select bank0
   962     07C9  1303               	bcf	3,6	;RP1=0, select bank0
   963     07CA  0839               	movf	getTime@seconds,w
   964     07CB  390F               	andlw	15
   965     07CC  00B3               	movwf	getTime@singleSeconds
   966     07CD                     l1431:
   967                           
   968                           ;RTC.c: 118:     tensSeconds = (swapNibbles(seconds) & 0x0F);
   969     07CD  0839               	movf	getTime@seconds,w
   970     07CE  264E               	fcall	_swapNibbles
   971     07CF  390F               	andlw	15
   972     07D0  1283               	bcf	3,5	;RP0=0, select bank0
   973     07D1  1303               	bcf	3,6	;RP1=0, select bank0
   974     07D2  00B6               	movwf	getTime@tensSeconds
   975     07D3                     l1433:
   976                           
   977                           ;RTC.c: 119:     singleMinutes = (minutes & 0x0F);
   978     07D3  083A               	movf	getTime@minutes,w
   979     07D4  390F               	andlw	15
   980     07D5  00B4               	movwf	getTime@singleMinutes
   981     07D6                     l1435:
   982                           
   983                           ;RTC.c: 120:     tensMinutes = (swapNibbles(minutes) & 0x0F);
   984     07D6  083A               	movf	getTime@minutes,w
   985     07D7  264E               	fcall	_swapNibbles
   986     07D8  390F               	andlw	15
   987     07D9  1283               	bcf	3,5	;RP0=0, select bank0
   988     07DA  1303               	bcf	3,6	;RP1=0, select bank0
   989     07DB  00B7               	movwf	getTime@tensMinutes
   990     07DC                     l1437:
   991                           
   992                           ;RTC.c: 121:     singleHours = (hours & 0x0F);
   993     07DC  083B               	movf	getTime@hours,w
   994     07DD  390F               	andlw	15
   995     07DE  00B5               	movwf	getTime@singleHours
   996     07DF                     l1439:
   997                           
   998                           ;RTC.c: 122:     tensHours = (swapNibbles(hours) & 0x0F);
   999     07DF  083B               	movf	getTime@hours,w
  1000     07E0  264E               	fcall	_swapNibbles
  1001     07E1  390F               	andlw	15
  1002     07E2  1283               	bcf	3,5	;RP0=0, select bank0
  1003     07E3  1303               	bcf	3,6	;RP1=0, select bank0
  1004     07E4  00B8               	movwf	getTime@tensHours
  1005     07E5                     l1441:
  1006                           
  1007                           ;RTC.c: 123:     passTubeNum(tensHours,singleHours,10,tensMinutes,singleMinutes,10,tensS
      +                          econds,singleSeconds,0x00,0x24);
  1008     07E5  0835               	movf	getTime@singleHours,w
  1009     07E6  00AA               	movwf	passTubeNum@tmp6
  1010     07E7  300A               	movlw	10
  1011     07E8  00AB               	movwf	passTubeNum@tmp5
  1012     07E9  0837               	movf	getTime@tensMinutes,w
  1013     07EA  00AC               	movwf	passTubeNum@tmp4
  1014     07EB  0834               	movf	getTime@singleMinutes,w
  1015     07EC  00AD               	movwf	passTubeNum@tmp3
  1016     07ED  300A               	movlw	10
  1017     07EE  00AE               	movwf	passTubeNum@tmp2
  1018     07EF  0836               	movf	getTime@tensSeconds,w
  1019     07F0  00AF               	movwf	passTubeNum@tmp1
  1020     07F1  0833               	movf	getTime@singleSeconds,w
  1021     07F2  00B0               	movwf	passTubeNum@tmp0
  1022     07F3  01B1               	clrf	passTubeNum@tmpLDP
  1023     07F4  3024               	movlw	36
  1024     07F5  00B2               	movwf	passTubeNum@tmpRDP
  1025     07F6  0838               	movf	getTime@tensHours,w
  1026     07F7  2681               	fcall	_passTubeNum
  1027     07F8                     l156:
  1028     07F8  0008               	return
  1029     07F9                     __end_of_getTime:
  1030                           
  1031                           	psect	text3
  1032     064E                     __ptext3:	
  1033 ;; *************** function _swapNibbles *****************
  1034 ;; Defined at:
  1035 ;;		line 78 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;  data            1    wreg     unsigned char 
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  data            1    3[COMMON] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      unsigned char 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         1       0       0       0       0
  1051 ;;      Temps:          3       0       0       0       0
  1052 ;;      Totals:         4       0       0       0       0
  1053 ;;Total ram usage:        4 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; This function calls:
  1056 ;;		Nothing
  1057 ;; This function is called by:
  1058 ;;		_getTime
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062     064E                     _swapNibbles:	
  1063                           ;psect for function _swapNibbles
  1064                           
  1065                           
  1066                           ;incstack = 0
  1067                           ; Regs used in _swapNibbles: [wreg+status,2+status,0]
  1068                           ;swapNibbles@data stored from wreg
  1069     064E  00F3               	movwf	swapNibbles@data
  1070     064F                     l1361:
  1071                           
  1072                           ;main.c: 79:     return ((data & 0x0F) << 4 | (data & 0xF0) >> 4);
  1073     064F  0873               	movf	swapNibbles@data,w
  1074     0650  00F0               	movwf	??_swapNibbles
  1075     0651  3004               	movlw	4
  1076     0652                     u435:
  1077     0652  1003               	clrc
  1078     0653  0CF0               	rrf	??_swapNibbles,f
  1079     0654  3EFF               	addlw	-1
  1080     0655  1D03               	skipz
  1081     0656  2E52               	goto	u435
  1082     0657  300F               	movlw	15
  1083     0658  0570               	andwf	??_swapNibbles,w
  1084     0659  00F1               	movwf	??_swapNibbles+1
  1085     065A  0873               	movf	swapNibbles@data,w
  1086     065B  390F               	andlw	15
  1087     065C  00F2               	movwf	??_swapNibbles+2
  1088     065D  3003               	movlw	3
  1089     065E                     u445:
  1090     065E  1003               	clrc
  1091     065F  0DF2               	rlf	??_swapNibbles+2,f
  1092     0660  3EFF               	addlw	-1
  1093     0661  1D03               	skipz
  1094     0662  2E5E               	goto	u445
  1095     0663  1003               	clrc
  1096     0664  0D72               	rlf	??_swapNibbles+2,w
  1097     0665  0471               	iorwf	??_swapNibbles+1,w
  1098     0666                     l64:
  1099     0666  0008               	return
  1100     0667                     __end_of_swapNibbles:
  1101                           
  1102                           	psect	text4
  1103     055C                     __ptext4:	
  1104 ;; *************** function _readDataRTC *****************
  1105 ;; Defined at:
  1106 ;;		line 14 in file "RTC.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  data            1    3[COMMON] unsigned char 
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      unsigned char 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1120 ;;      Params:         0       0       0       0       0
  1121 ;;      Locals:         1       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0
  1123 ;;      Totals:         1       0       0       0       0
  1124 ;;Total ram usage:        1 bytes
  1125 ;; Hardware stack levels used: 1
  1126 ;; Hardware stack levels required when called: 1
  1127 ;; This function calls:
  1128 ;;		_I2C_ReadByte
  1129 ;; This function is called by:
  1130 ;;		_getTime
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134     055C                     _readDataRTC:	
  1135                           ;psect for function _readDataRTC
  1136                           
  1137     055C                     l1367:	
  1138                           ;incstack = 0
  1139                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1140                           
  1141                           
  1142                           ;RTC.c: 15:     unsigned char data;;RTC.c: 16:     data = I2C_ReadByte();
  1143     055C  270E               	fcall	_I2C_ReadByte
  1144     055D  00F3               	movwf	readDataRTC@data
  1145     055E                     l1369:
  1146                           
  1147                           ;RTC.c: 17:     return data;
  1148     055E  0873               	movf	readDataRTC@data,w
  1149     055F                     l124:
  1150     055F  0008               	return
  1151     0560                     __end_of_readDataRTC:
  1152                           
  1153                           	psect	text5
  1154     0681                     __ptext5:	
  1155 ;; *************** function _passTubeNum *****************
  1156 ;; Defined at:
  1157 ;;		line 139 in file "tubes.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  tmp7            1    wreg     unsigned char 
  1160 ;;  tmp6            1    0[BANK0h] unsigned char 
  1161 ;;  tmp5            1    1[BANK0h] unsigned char 
  1162 ;;  tmp4            1    2[BANK0h] unsigned char 
  1163 ;;  tmp3            1    3[BANK0h] unsigned char 
  1164 ;;  tmp2            1    4[BANK0h] unsigned char 
  1165 ;;  tmp1            1    5[BANK0h] unsigned char 
  1166 ;;  tmp0            1    6[BANK0h] unsigned char 
  1167 ;;  tmpLDP          1    7[BANK0h] unsigned char 
  1168 ;;  tmpRDP          1    8[BANK0h] unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  tmp7            1    8[COMMON] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1180 ;;      Params:         0       9       0       0       0
  1181 ;;      Locals:         1       0       0       0       0
  1182 ;;      Temps:          0       0       0       0       0
  1183 ;;      Totals:         1       9       0       0       0
  1184 ;;Total ram usage:       10 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 3
  1187 ;; This function calls:
  1188 ;;		_blankTubes
  1189 ;;		_display
  1190 ;;		_loadDisplay
  1191 ;; This function is called by:
  1192 ;;		_getTime
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196     0681                     _passTubeNum:	
  1197                           ;psect for function _passTubeNum
  1198                           
  1199                           
  1200                           ;incstack = 0
  1201                           ; Regs used in _passTubeNum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1202                           ;passTubeNum@tmp7 stored from wreg
  1203     0681  00F8               	movwf	passTubeNum@tmp7
  1204     0682                     l1373:
  1205                           
  1206                           ;tubes.c: 140:     blankTubes();
  1207     0682  2635               	fcall	_blankTubes
  1208     0683                     l1375:
  1209                           
  1210                           ;tubes.c: 141:     T0 = tmp0;
  1211     0683  1283               	bcf	3,5	;RP0=0, select bank0
  1212     0684  1303               	bcf	3,6	;RP1=0, select bank0
  1213     0685  0830               	movf	passTubeNum@tmp0,w
  1214     0686  00A2               	movwf	34
  1215     0687                     l1377:
  1216                           
  1217                           ;tubes.c: 142:     T1 = tmp1;
  1218     0687  082F               	movf	passTubeNum@tmp1,w
  1219     0688  00A3               	movwf	35
  1220     0689                     l1379:
  1221                           
  1222                           ;tubes.c: 143:     T2 = tmp2;
  1223     0689  082E               	movf	passTubeNum@tmp2,w
  1224     068A  00A4               	movwf	36
  1225     068B                     l1381:
  1226                           
  1227                           ;tubes.c: 144:     T3 = tmp3;
  1228     068B  082D               	movf	passTubeNum@tmp3,w
  1229     068C  00A5               	movwf	37
  1230     068D                     l1383:
  1231                           
  1232                           ;tubes.c: 145:     T4 = tmp4;
  1233     068D  082C               	movf	passTubeNum@tmp4,w
  1234     068E  00A6               	movwf	38
  1235     068F                     l1385:
  1236                           
  1237                           ;tubes.c: 146:     T5 = tmp5;
  1238     068F  082B               	movf	passTubeNum@tmp5,w
  1239     0690  00A7               	movwf	39
  1240     0691                     l1387:
  1241                           
  1242                           ;tubes.c: 147:     T6 = tmp6;
  1243     0691  082A               	movf	passTubeNum@tmp6,w
  1244     0692  00A8               	movwf	40
  1245     0693                     l1389:
  1246                           
  1247                           ;tubes.c: 148:     T7 = tmp7;
  1248     0693  0878               	movf	passTubeNum@tmp7,w
  1249     0694  00A9               	movwf	41
  1250     0695                     l1391:
  1251                           
  1252                           ;tubes.c: 149:     leftDP = tmpLDP;
  1253     0695  0831               	movf	passTubeNum@tmpLDP,w
  1254     0696  00FA               	movwf	_leftDP
  1255     0697                     l1393:
  1256                           
  1257                           ;tubes.c: 150:     rightDP = tmpRDP;
  1258     0697  0832               	movf	passTubeNum@tmpRDP,w
  1259     0698  00F9               	movwf	_rightDP
  1260                           
  1261                           ;tubes.c: 151:     loadDisplay();
  1262     0699  2776               	fcall	_loadDisplay
  1263     069A                     l1395:
  1264                           
  1265                           ;tubes.c: 152:     display();
  1266     069A  256E               	fcall	_display
  1267     069B                     l233:
  1268     069B  0008               	return
  1269     069C                     __end_of_passTubeNum:
  1270                           
  1271                           	psect	text6
  1272     0776                     __ptext6:	
  1273 ;; *************** function _loadDisplay *****************
  1274 ;; Defined at:
  1275 ;;		line 33 in file "tubes.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  numIndex        1    5[COMMON] unsigned char 
  1280 ;;  tubeIndex       1    4[COMMON] unsigned char 
  1281 ;;  RDP             1    7[COMMON] unsigned char 
  1282 ;;  LDP             1    6[COMMON] unsigned char 
  1283 ;;  tubePtr         1    3[COMMON] PTR unsigned char 
  1284 ;;		 -> T7(1), 
  1285 ;;  dispNum         1    2[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1295 ;;      Params:         0       0       0       0       0
  1296 ;;      Locals:         6       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0
  1298 ;;      Totals:         6       0       0       0       0
  1299 ;;Total ram usage:        6 bytes
  1300 ;; Hardware stack levels used: 1
  1301 ;; Hardware stack levels required when called: 2
  1302 ;; This function calls:
  1303 ;;		_checkDP
  1304 ;;		_latch
  1305 ;;		_send0ToDrivers
  1306 ;;		_send1ToDrivers
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;;		_passTubeNum
  1310 ;;		_displayError666
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314     0776                     _loadDisplay:	
  1315                           ;psect for function _loadDisplay
  1316                           
  1317     0776                     l1233:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _loadDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1320                           
  1321                           
  1322                           ;tubes.c: 34:     unsigned char *tubePtr;;tubes.c: 35:     tubePtr = &T7;
  1323     0776  3029               	movlw	41
  1324     0777  00F3               	movwf	loadDisplay@tubePtr
  1325                           
  1326                           ;tubes.c: 36:     unsigned char dispNum;;tubes.c: 37:     unsigned char LDP = leftDP;
  1327     0778  087A               	movf	_leftDP,w
  1328     0779  00F6               	movwf	loadDisplay@LDP
  1329                           
  1330                           ;tubes.c: 38:     unsigned char RDP = rightDP;
  1331     077A  0879               	movf	_rightDP,w
  1332     077B  00F7               	movwf	loadDisplay@RDP
  1333     077C                     l1235:
  1334                           
  1335                           ;tubes.c: 40:    for (unsigned char tubeIndex = 0; tubeIndex <= 7; tubeIndex++) {
  1336     077C  01F4               	clrf	loadDisplay@tubeIndex
  1337     077D                     l1241:
  1338                           
  1339                           ;tubes.c: 41:         checkDP(&LDP);
  1340     077D  3076               	movlw	(low (loadDisplay@LDP| 0))& (0+255)
  1341     077E  26BE               	fcall	_checkDP
  1342     077F                     l1243:
  1343                           
  1344                           ;tubes.c: 42:         dispNum = 1;
  1345     077F  01F2               	clrf	loadDisplay@dispNum
  1346     0780  0AF2               	incf	loadDisplay@dispNum,f
  1347     0781                     l1245:
  1348                           
  1349                           ;tubes.c: 44:         for (unsigned char numIndex = 0; numIndex < 9; numIndex++) {
  1350     0781  01F5               	clrf	loadDisplay@numIndex
  1351     0782                     l1251:
  1352                           
  1353                           ;tubes.c: 45:             if(dispNum == *tubePtr) {
  1354     0782  0873               	movf	loadDisplay@tubePtr,w
  1355     0783  0084               	movwf	4
  1356     0784  1383               	bcf	3,7	;select IRP bank0
  1357     0785  0800               	movf	0,w
  1358     0786  0672               	xorwf	loadDisplay@dispNum,w
  1359     0787  1D03               	skipz
  1360     0788  2F8A               	goto	u341
  1361     0789  2F8B               	goto	u340
  1362     078A                     u341:
  1363     078A  2F8D               	goto	l1255
  1364     078B                     u340:
  1365     078B                     l1253:
  1366                           
  1367                           ;tubes.c: 46:                 send1ToDrivers();
  1368     078B  25A3               	fcall	_send1ToDrivers
  1369                           
  1370                           ;tubes.c: 47:             } else {
  1371     078C  2F8E               	goto	l1257
  1372     078D                     l1255:
  1373                           
  1374                           ;tubes.c: 48:                 send0ToDrivers();
  1375     078D  2599               	fcall	_send0ToDrivers
  1376     078E                     l1257:
  1377                           
  1378                           ;tubes.c: 50:             dispNum++;
  1379     078E  3001               	movlw	1
  1380     078F  00FF               	movwf	btemp+1
  1381     0790  087F               	movf	btemp+1,w
  1382     0791  07F2               	addwf	loadDisplay@dispNum,f
  1383     0792                     l1259:
  1384                           
  1385                           ;tubes.c: 51:         }
  1386     0792  3001               	movlw	1
  1387     0793  00FF               	movwf	btemp+1
  1388     0794  087F               	movf	btemp+1,w
  1389     0795  07F5               	addwf	loadDisplay@numIndex,f
  1390     0796                     l1261:
  1391     0796  3009               	movlw	9
  1392     0797  0275               	subwf	loadDisplay@numIndex,w
  1393     0798  1C03               	skipc
  1394     0799  2F9B               	goto	u351
  1395     079A  2F9C               	goto	u350
  1396     079B                     u351:
  1397     079B  2F82               	goto	l1251
  1398     079C                     u350:
  1399     079C                     l1263:
  1400                           
  1401                           ;tubes.c: 53:         if (*tubePtr == 0) {
  1402     079C  0873               	movf	loadDisplay@tubePtr,w
  1403     079D  0084               	movwf	4
  1404     079E  1383               	bcf	3,7	;select IRP bank0
  1405     079F  0800               	movf	0,w
  1406     07A0  1D03               	btfss	3,2
  1407     07A1  2FA3               	goto	u361
  1408     07A2  2FA4               	goto	u360
  1409     07A3                     u361:
  1410     07A3  2FA6               	goto	l1267
  1411     07A4                     u360:
  1412     07A4                     l1265:
  1413                           
  1414                           ;tubes.c: 54:             send1ToDrivers();
  1415     07A4  25A3               	fcall	_send1ToDrivers
  1416                           
  1417                           ;tubes.c: 55:         } else {
  1418     07A5  2FA7               	goto	l1269
  1419     07A6                     l1267:
  1420                           
  1421                           ;tubes.c: 56:             send0ToDrivers();
  1422     07A6  2599               	fcall	_send0ToDrivers
  1423     07A7                     l1269:
  1424                           
  1425                           ;tubes.c: 58:         checkDP(&RDP);
  1426     07A7  3077               	movlw	(low (loadDisplay@RDP| 0))& (0+255)
  1427     07A8  26BE               	fcall	_checkDP
  1428     07A9                     l1271:
  1429                           
  1430                           ;tubes.c: 59:         tubePtr--;
  1431     07A9  3001               	movlw	1
  1432     07AA  02F3               	subwf	loadDisplay@tubePtr,f
  1433     07AB                     l1273:
  1434                           
  1435                           ;tubes.c: 60:     }
  1436     07AB  3001               	movlw	1
  1437     07AC  00FF               	movwf	btemp+1
  1438     07AD  087F               	movf	btemp+1,w
  1439     07AE  07F4               	addwf	loadDisplay@tubeIndex,f
  1440     07AF                     l1275:
  1441     07AF  3008               	movlw	8
  1442     07B0  0274               	subwf	loadDisplay@tubeIndex,w
  1443     07B1  1C03               	skipc
  1444     07B2  2FB4               	goto	u371
  1445     07B3  2FB5               	goto	u370
  1446     07B4                     u371:
  1447     07B4  2F7D               	goto	l1241
  1448     07B5                     u370:
  1449     07B5                     l1277:
  1450                           
  1451                           ;tubes.c: 61:     latch();
  1452     07B5  2586               	fcall	_latch
  1453     07B6                     l202:
  1454     07B6  0008               	return
  1455     07B7                     __end_of_loadDisplay:
  1456                           
  1457                           	psect	text7
  1458     0586                     __ptext7:	
  1459 ;; *************** function _latch *****************
  1460 ;; Defined at:
  1461 ;;		line 77 in file "tubes.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;		None
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1475 ;;      Params:         0       0       0       0       0
  1476 ;;      Locals:         0       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0
  1478 ;;      Totals:         0       0       0       0       0
  1479 ;;Total ram usage:        0 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_loadDisplay
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488     0586                     _latch:	
  1489                           ;psect for function _latch
  1490                           
  1491     0586                     l1225:	
  1492                           ;incstack = 0
  1493                           ; Regs used in _latch: [wreg+status,2]
  1494                           
  1495                           
  1496                           ;tubes.c: 78:     (PORTB_SHADOW |= (1<<0x5));
  1497     0586  16FB               	bsf	_PORTB_SHADOW,5
  1498     0587                     l1227:
  1499                           
  1500                           ;tubes.c: 79:     PORTB = PORTB_SHADOW;
  1501     0587  087B               	movf	_PORTB_SHADOW,w
  1502     0588  1283               	bcf	3,5	;RP0=0, select bank0
  1503     0589  1303               	bcf	3,6	;RP1=0, select bank0
  1504     058A  0086               	movwf	6	;volatile
  1505     058B                     l1229:
  1506                           
  1507                           ;tubes.c: 80:     (PORTB_SHADOW &=(0<<0x5));
  1508     058B  01FB               	clrf	_PORTB_SHADOW
  1509     058C                     l1231:
  1510                           
  1511                           ;tubes.c: 81:     PORTB = PORTB_SHADOW;
  1512     058C  087B               	movf	_PORTB_SHADOW,w
  1513     058D  0086               	movwf	6	;volatile
  1514     058E                     l210:
  1515     058E  0008               	return
  1516     058F                     __end_of_latch:
  1517                           
  1518                           	psect	text8
  1519     06BE                     __ptext8:	
  1520 ;; *************** function _checkDP *****************
  1521 ;; Defined at:
  1522 ;;		line 65 in file "tubes.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  DP              1    wreg     PTR unsigned char 
  1525 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  DP              1    1[COMMON] PTR unsigned char 
  1528 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1538 ;;      Params:         0       0       0       0       0
  1539 ;;      Locals:         1       0       0       0       0
  1540 ;;      Temps:          1       0       0       0       0
  1541 ;;      Totals:         2       0       0       0       0
  1542 ;;Total ram usage:        2 bytes
  1543 ;; Hardware stack levels used: 1
  1544 ;; Hardware stack levels required when called: 1
  1545 ;; This function calls:
  1546 ;;		_send0ToDrivers
  1547 ;;		_send1ToDrivers
  1548 ;; This function is called by:
  1549 ;;		_loadDisplay
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553     06BE                     _checkDP:	
  1554                           ;psect for function _checkDP
  1555                           
  1556                           
  1557                           ;incstack = 0
  1558                           ; Regs used in _checkDP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1559                           ;checkDP@DP stored from wreg
  1560     06BE  00F1               	movwf	checkDP@DP
  1561     06BF                     l1215:
  1562                           
  1563                           ;tubes.c: 66:     if ((((*DP))>>(7) & 1)) {
  1564     06BF  0871               	movf	checkDP@DP,w
  1565     06C0  0084               	movwf	4
  1566     06C1  0800               	movf	0,w
  1567     06C2  00F0               	movwf	??_checkDP
  1568     06C3  3007               	movlw	7
  1569     06C4                     u325:
  1570     06C4  1003               	clrc
  1571     06C5  0CF0               	rrf	??_checkDP,f
  1572     06C6  3EFF               	addlw	-1
  1573     06C7  1D03               	skipz
  1574     06C8  2EC4               	goto	u325
  1575     06C9  1C70               	btfss	??_checkDP,0
  1576     06CA  2ECC               	goto	u331
  1577     06CB  2ECD               	goto	u330
  1578     06CC                     u331:
  1579     06CC  2ED9               	goto	l1221
  1580     06CD                     u330:
  1581     06CD                     l1217:
  1582                           
  1583                           ;tubes.c: 68:         *DP = (*DP) << 1;
  1584     06CD  0871               	movf	checkDP@DP,w
  1585     06CE  0084               	movwf	4
  1586     06CF  0800               	movf	0,w
  1587     06D0  00F0               	movwf	??_checkDP
  1588     06D1  0770               	addwf	??_checkDP,w
  1589     06D2  00FF               	movwf	btemp+1
  1590     06D3  0871               	movf	checkDP@DP,w
  1591     06D4  0084               	movwf	4
  1592     06D5  087F               	movf	btemp+1,w
  1593     06D6  0080               	movwf	0
  1594     06D7                     l1219:
  1595                           
  1596                           ;tubes.c: 69:         send1ToDrivers();
  1597     06D7  25A3               	fcall	_send1ToDrivers
  1598                           
  1599                           ;tubes.c: 70:     } else {
  1600     06D8  2EE4               	goto	l207
  1601     06D9                     l1221:
  1602                           
  1603                           ;tubes.c: 72:         *DP = (*DP) << 1;
  1604     06D9  0871               	movf	checkDP@DP,w
  1605     06DA  0084               	movwf	4
  1606     06DB  0800               	movf	0,w
  1607     06DC  00F0               	movwf	??_checkDP
  1608     06DD  0770               	addwf	??_checkDP,w
  1609     06DE  00FF               	movwf	btemp+1
  1610     06DF  0871               	movf	checkDP@DP,w
  1611     06E0  0084               	movwf	4
  1612     06E1  087F               	movf	btemp+1,w
  1613     06E2  0080               	movwf	0
  1614     06E3                     l1223:
  1615                           
  1616                           ;tubes.c: 73:         send0ToDrivers();
  1617     06E3  2599               	fcall	_send0ToDrivers
  1618     06E4                     l207:
  1619     06E4  0008               	return
  1620     06E5                     __end_of_checkDP:
  1621                           
  1622                           	psect	text9
  1623     05A3                     __ptext9:	
  1624 ;; *************** function _send1ToDrivers *****************
  1625 ;; Defined at:
  1626 ;;		line 122 in file "tubes.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;		None
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg, status,2
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1640 ;;      Params:         0       0       0       0       0
  1641 ;;      Locals:         0       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0
  1643 ;;      Totals:         0       0       0       0       0
  1644 ;;Total ram usage:        0 bytes
  1645 ;; Hardware stack levels used: 1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_loadDisplay
  1650 ;;		_checkDP
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654     05A3                     _send1ToDrivers:	
  1655                           ;psect for function _send1ToDrivers
  1656                           
  1657     05A3                     l1161:	
  1658                           ;incstack = 0
  1659                           ; Regs used in _send1ToDrivers: [wreg+status,2]
  1660                           
  1661                           
  1662                           ;tubes.c: 123:     (PORTB_SHADOW |= (1<<0x4));
  1663     05A3  167B               	bsf	_PORTB_SHADOW,4
  1664                           
  1665                           ;tubes.c: 124:     (PORTB_SHADOW |= (1<<0x2));
  1666     05A4  157B               	bsf	_PORTB_SHADOW,2
  1667     05A5                     l1163:
  1668                           
  1669                           ;tubes.c: 125:     PORTB = PORTB_SHADOW;
  1670     05A5  087B               	movf	_PORTB_SHADOW,w
  1671     05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1672     05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1673     05A8  0086               	movwf	6	;volatile
  1674     05A9                     l1165:
  1675                           
  1676                           ;tubes.c: 126:     (PORTB_SHADOW &=(0<<0x2));
  1677     05A9  01FB               	clrf	_PORTB_SHADOW
  1678     05AA                     l1167:
  1679                           
  1680                           ;tubes.c: 127:     PORTB = PORTB_SHADOW;
  1681     05AA  087B               	movf	_PORTB_SHADOW,w
  1682     05AB  0086               	movwf	6	;volatile
  1683     05AC                     l227:
  1684     05AC  0008               	return
  1685     05AD                     __end_of_send1ToDrivers:
  1686                           
  1687                           	psect	text10
  1688     0599                     __ptext10:	
  1689 ;; *************** function _send0ToDrivers *****************
  1690 ;; Defined at:
  1691 ;;		line 131 in file "tubes.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1705 ;;      Params:         0       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0
  1708 ;;      Totals:         0       0       0       0       0
  1709 ;;Total ram usage:        0 bytes
  1710 ;; Hardware stack levels used: 1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_loadDisplay
  1715 ;;		_checkDP
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719     0599                     _send0ToDrivers:	
  1720                           ;psect for function _send0ToDrivers
  1721                           
  1722     0599                     l1169:	
  1723                           ;incstack = 0
  1724                           ; Regs used in _send0ToDrivers: [wreg+status,2]
  1725                           
  1726                           
  1727                           ;tubes.c: 132:     (PORTB_SHADOW &=(0<<0x4));
  1728     0599  01FB               	clrf	_PORTB_SHADOW
  1729     059A                     l1171:
  1730                           
  1731                           ;tubes.c: 133:     (PORTB_SHADOW |= (1<<0x2));
  1732     059A  157B               	bsf	_PORTB_SHADOW,2
  1733     059B                     l1173:
  1734                           
  1735                           ;tubes.c: 134:     PORTB = PORTB_SHADOW;
  1736     059B  087B               	movf	_PORTB_SHADOW,w
  1737     059C  1283               	bcf	3,5	;RP0=0, select bank0
  1738     059D  1303               	bcf	3,6	;RP1=0, select bank0
  1739     059E  0086               	movwf	6	;volatile
  1740     059F                     l1175:
  1741                           
  1742                           ;tubes.c: 135:     (PORTB_SHADOW &=(0<<0x2));
  1743     059F  01FB               	clrf	_PORTB_SHADOW
  1744                           
  1745                           ;tubes.c: 136:     PORTB = PORTB_SHADOW;
  1746     05A0  087B               	movf	_PORTB_SHADOW,w
  1747     05A1  0086               	movwf	6	;volatile
  1748     05A2                     l230:
  1749     05A2  0008               	return
  1750     05A3                     __end_of_send0ToDrivers:
  1751                           
  1752                           	psect	text11
  1753     056E                     __ptext11:	
  1754 ;; *************** function _display *****************
  1755 ;; Defined at:
  1756 ;;		line 85 in file "tubes.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1770 ;;      Params:         0       0       0       0       0
  1771 ;;      Locals:         0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0
  1773 ;;      Totals:         0       0       0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;;		_passTubeNum
  1781 ;;		_displayError666
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785     056E                     _display:	
  1786                           ;psect for function _display
  1787                           
  1788     056E                     l1279:	
  1789                           ;incstack = 0
  1790                           ; Regs used in _display: [wreg]
  1791                           
  1792                           
  1793                           ;tubes.c: 86:     (PORTB_SHADOW |= (1<<0x3));
  1794     056E  15FB               	bsf	_PORTB_SHADOW,3
  1795                           
  1796                           ;tubes.c: 87:     (PORTB_SHADOW |= (1<<0x1));
  1797     056F  14FB               	bsf	_PORTB_SHADOW,1
  1798     0570                     l1281:
  1799                           
  1800                           ;tubes.c: 88:     PORTB = PORTB_SHADOW;
  1801     0570  087B               	movf	_PORTB_SHADOW,w
  1802     0571  1283               	bcf	3,5	;RP0=0, select bank0
  1803     0572  1303               	bcf	3,6	;RP1=0, select bank0
  1804     0573  0086               	movwf	6	;volatile
  1805     0574                     l213:
  1806     0574  0008               	return
  1807     0575                     __end_of_display:
  1808                           
  1809                           	psect	text12
  1810     05D8                     __ptext12:	
  1811 ;; *************** function _I2C_SendACK *****************
  1812 ;; Defined at:
  1813 ;;		line 91 in file "IIC.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		None
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1827 ;;      Params:         0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0
  1830 ;;      Totals:         0       0       0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels used: 1
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_getTime
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840     05D8                     _I2C_SendACK:	
  1841                           ;psect for function _I2C_SendACK
  1842                           
  1843     05D8                     l1365:	
  1844                           ;incstack = 0
  1845                           ; Regs used in _I2C_SendACK: []
  1846                           
  1847                           
  1848                           ;IIC.c: 92:     TRISAbits.TRISA0 = 0;
  1849     05D8  1683               	bsf	3,5	;RP0=1, select bank1
  1850     05D9  1303               	bcf	3,6	;RP1=0, select bank1
  1851     05DA  1005               	bcf	5,0	;volatile
  1852                           
  1853                           ;IIC.c: 93:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1854     05DB  2DDC               	nop2	;2 cycle nop
  1855                           
  1856                           ;IIC.c: 94:     TRISAbits.TRISA1 = 0;
  1857     05DC  1683               	bsf	3,5	;RP0=1, select bank1
  1858     05DD  1303               	bcf	3,6	;RP1=0, select bank1
  1859     05DE  1085               	bcf	5,1	;volatile
  1860                           
  1861                           ;IIC.c: 95:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1862     05DF  2DE0               	nop2	;2 cycle nop
  1863                           
  1864                           ;IIC.c: 96:     TRISAbits.TRISA0 = 1;
  1865     05E0  1683               	bsf	3,5	;RP0=1, select bank1
  1866     05E1  1303               	bcf	3,6	;RP1=0, select bank1
  1867     05E2  1405               	bsf	5,0	;volatile
  1868                           
  1869                           ;IIC.c: 97:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1870     05E3  2DE4               	nop2	;2 cycle nop
  1871     05E4  2DE5               	nop2	;2 cycle nop
  1872     05E5  0000               	nop
  1873     05E6                     l95:
  1874     05E6  0008               	return
  1875     05E7                     __end_of_I2C_SendACK:
  1876                           
  1877                           	psect	text13
  1878     069C                     __ptext13:	
  1879 ;; *************** function _Init *****************
  1880 ;; Defined at:
  1881 ;;		line 57 in file "main.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  1895 ;;      Params:         0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         0       0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 4
  1902 ;; This function calls:
  1903 ;;		_InitI2C
  1904 ;;		_blankTubes
  1905 ;;		_checkRTCType
  1906 ;;		_isRTCRunning
  1907 ;;		_startRTC
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913     069C                     _Init:	
  1914                           ;psect for function _Init
  1915                           
  1916     069C                     l1397:	
  1917                           ;incstack = 0
  1918                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1919                           
  1920                           
  1921                           ;main.c: 58:     CMCON = 0b111;
  1922     069C  3007               	movlw	7
  1923     069D  1283               	bcf	3,5	;RP0=0, select bank0
  1924     069E  1303               	bcf	3,6	;RP1=0, select bank0
  1925     069F  009F               	movwf	31	;volatile
  1926                           
  1927                           ;main.c: 59:     TRISA = 0b00101111;
  1928     06A0  302F               	movlw	47
  1929     06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1930     06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1931     06A3  0085               	movwf	5	;volatile
  1932     06A4                     l1399:
  1933                           
  1934                           ;main.c: 60:     TRISB = 0b00000000;
  1935     06A4  0186               	clrf	6	;volatile
  1936     06A5                     l1401:
  1937                           
  1938                           ;main.c: 61:     OPTION_REG = 0b11011111;
  1939     06A5  30DF               	movlw	223
  1940     06A6  0081               	movwf	1	;volatile
  1941                           
  1942                           ;main.c: 62:     PORTA_SHADOW = 0b00000000;
  1943     06A7  01FC               	clrf	_PORTA_SHADOW
  1944                           
  1945                           ;main.c: 63:     PORTB_SHADOW = 0b00000000;
  1946     06A8  01FB               	clrf	_PORTB_SHADOW
  1947     06A9                     l1403:
  1948                           
  1949                           ;main.c: 64:     PORTB = PORTB_SHADOW;
  1950     06A9  087B               	movf	_PORTB_SHADOW,w
  1951     06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1952     06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1953     06AC  0086               	movwf	6	;volatile
  1954     06AD                     l1405:
  1955                           
  1956                           ;main.c: 65:     flag = 0b00000000;
  1957     06AD  01FD               	clrf	_flag
  1958     06AE                     l1407:
  1959                           
  1960                           ;main.c: 66:     InitI2C();
  1961     06AE  257D               	fcall	_InitI2C
  1962     06AF                     l1409:
  1963                           
  1964                           ;main.c: 67:     blankTubes();
  1965     06AF  2635               	fcall	_blankTubes
  1966     06B0                     l1411:
  1967                           
  1968                           ;main.c: 69:     if(isRTCRunning()) {
  1969     06B0  25BB               	fcall	_isRTCRunning
  1970     06B1  1C03               	btfss	3,0
  1971     06B2  2EB4               	goto	u451
  1972     06B3  2EB5               	goto	u450
  1973     06B4                     u451:
  1974     06B4  2EB7               	goto	l1415
  1975     06B5                     u450:
  1976     06B5                     l1413:
  1977                           
  1978                           ;main.c: 70:         startRTC();
  1979     06B5  261E               	fcall	_startRTC
  1980                           
  1981                           ;main.c: 71:     } else {
  1982     06B6  2EBD               	goto	l61
  1983     06B7                     l1415:
  1984                           
  1985                           ;main.c: 72:         if(checkRTCType()) {
  1986     06B7  26E5               	fcall	_checkRTCType
  1987     06B8  1C03               	btfss	3,0
  1988     06B9  2EBB               	goto	u461
  1989     06BA  2EBC               	goto	u460
  1990     06BB                     u461:
  1991     06BB  2EBD               	goto	l61
  1992     06BC                     u460:
  1993     06BC  2EB5               	goto	l1413
  1994     06BD                     l61:
  1995     06BD  0008               	return
  1996     06BE                     __end_of_Init:
  1997                           
  1998                           	psect	text14
  1999     061E                     __ptext14:	
  2000 ;; *************** function _startRTC *****************
  2001 ;; Defined at:
  2002 ;;		line 68 in file "RTC.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;		None
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2016 ;;      Params:         0       0       0       0       0
  2017 ;;      Locals:         0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0
  2019 ;;      Totals:         0       0       0       0       0
  2020 ;;Total ram usage:        0 bytes
  2021 ;; Hardware stack levels used: 1
  2022 ;; Hardware stack levels required when called: 2
  2023 ;; This function calls:
  2024 ;;		_endWriteRTC
  2025 ;;		_reqWriteRTC
  2026 ;;		_writeDataRTC
  2027 ;; This function is called by:
  2028 ;;		_Init
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032     061E                     _startRTC:	
  2033                           ;psect for function _startRTC
  2034                           
  2035     061E                     l1323:	
  2036                           ;incstack = 0
  2037                           ; Regs used in _startRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2038                           
  2039                           
  2040                           ;RTC.c: 69:     reqWriteRTC(0x00);
  2041     061E  3000               	movlw	0
  2042     061F  2560               	fcall	_reqWriteRTC
  2043                           
  2044                           ;RTC.c: 70:     writeDataRTC(0x00);
  2045     0620  3000               	movlw	0
  2046     0621  2558               	fcall	_writeDataRTC
  2047                           
  2048                           ;RTC.c: 72:     writeDataRTC(0x30);
  2049     0622  3030               	movlw	48
  2050     0623  2558               	fcall	_writeDataRTC
  2051                           
  2052                           ;RTC.c: 73:     writeDataRTC(0x12);
  2053     0624  3012               	movlw	18
  2054     0625  2558               	fcall	_writeDataRTC
  2055                           
  2056                           ;RTC.c: 74:     writeDataRTC(0x28);
  2057     0626  3028               	movlw	40
  2058     0627  2558               	fcall	_writeDataRTC
  2059                           
  2060                           ;RTC.c: 75:     writeDataRTC(0x7);
  2061     0628  3007               	movlw	7
  2062     0629  2558               	fcall	_writeDataRTC
  2063                           
  2064                           ;RTC.c: 76:     writeDataRTC(0x10);
  2065     062A  3010               	movlw	16
  2066     062B  2558               	fcall	_writeDataRTC
  2067     062C                     l1325:
  2068                           
  2069                           ;RTC.c: 77:     endWriteRTC();
  2070     062C  2553               	fcall	_endWriteRTC
  2071     062D                     l1327:
  2072                           
  2073                           ;RTC.c: 79:     reqWriteRTC(0x14);
  2074     062D  3014               	movlw	20
  2075     062E  2560               	fcall	_reqWriteRTC
  2076     062F                     l1329:
  2077                           
  2078                           ;RTC.c: 80:     writeDataRTC(0x00);
  2079     062F  3000               	movlw	0
  2080     0630  2558               	fcall	_writeDataRTC
  2081     0631                     l1331:
  2082                           
  2083                           ;RTC.c: 81:     writeDataRTC(0x00);
  2084     0631  3000               	movlw	0
  2085     0632  2558               	fcall	_writeDataRTC
  2086                           
  2087                           ;RTC.c: 82:     endWriteRTC();
  2088     0633  2553               	fcall	_endWriteRTC
  2089     0634                     l148:
  2090     0634  0008               	return
  2091     0635                     __end_of_startRTC:
  2092                           
  2093                           	psect	text15
  2094     05BB                     __ptext15:	
  2095 ;; *************** function _isRTCRunning *****************
  2096 ;; Defined at:
  2097 ;;		line 60 in file "RTC.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  data            1    6[COMMON] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;		None               void
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2111 ;;      Params:         0       0       0       0       0
  2112 ;;      Locals:         1       0       0       0       0
  2113 ;;      Temps:          1       0       0       0       0
  2114 ;;      Totals:         2       0       0       0       0
  2115 ;;Total ram usage:        2 bytes
  2116 ;; Hardware stack levels used: 1
  2117 ;; Hardware stack levels required when called: 2
  2118 ;; This function calls:
  2119 ;;		_I2C_ReadByte
  2120 ;;		_reqReadRTC
  2121 ;; This function is called by:
  2122 ;;		_Init
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126     05BB                     _isRTCRunning:	
  2127                           ;psect for function _isRTCRunning
  2128                           
  2129     05BB                     l1317:	
  2130                           ;incstack = 0
  2131                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2132                           
  2133                           
  2134                           ;RTC.c: 61:     unsigned char data;;RTC.c: 62:     reqReadRTC(0x00);
  2135     05BB  3000               	movlw	0
  2136     05BC  258F               	fcall	_reqReadRTC
  2137                           
  2138                           ;RTC.c: 63:     data = I2C_ReadByte();
  2139     05BD  270E               	fcall	_I2C_ReadByte
  2140     05BE  00F6               	movwf	isRTCRunning@data
  2141     05BF                     l1319:
  2142                           
  2143                           ;RTC.c: 64:     return ((data)>>(7) & 1);
  2144     05BF  0876               	movf	isRTCRunning@data,w
  2145     05C0  00F5               	movwf	??_isRTCRunning
  2146     05C1  3007               	movlw	7
  2147     05C2                     u395:
  2148     05C2  1003               	clrc
  2149     05C3  0CF5               	rrf	??_isRTCRunning,f
  2150     05C4  3EFF               	addlw	-1
  2151     05C5  1D03               	skipz
  2152     05C6  2DC2               	goto	u395
  2153     05C7  0C75               	rrf	??_isRTCRunning,w
  2154     05C8                     l145:
  2155     05C8  0008               	return
  2156     05C9                     __end_of_isRTCRunning:
  2157                           
  2158                           	psect	text16
  2159     06E5                     __ptext16:	
  2160 ;; *************** function _checkRTCType *****************
  2161 ;; Defined at:
  2162 ;;		line 86 in file "RTC.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  data            1    8[COMMON] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;		None               void
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2176 ;;      Params:         0       0       0       0       0
  2177 ;;      Locals:         1       0       0       0       0
  2178 ;;      Temps:          1       0       0       0       0
  2179 ;;      Totals:         2       0       0       0       0
  2180 ;;Total ram usage:        2 bytes
  2181 ;; Hardware stack levels used: 1
  2182 ;; Hardware stack levels required when called: 3
  2183 ;; This function calls:
  2184 ;;		_readByteRTC
  2185 ;;		_writeByteRTC
  2186 ;; This function is called by:
  2187 ;;		_Init
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191     06E5                     _checkRTCType:	
  2192                           ;psect for function _checkRTCType
  2193                           
  2194     06E5                     l1333:	
  2195                           ;incstack = 0
  2196                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2197                           
  2198                           
  2199                           ;RTC.c: 87:     unsigned char data;;RTC.c: 88:     data = readByteRTC(0x0F);
  2200     06E5  300F               	movlw	15
  2201     06E6  2575               	fcall	_readByteRTC
  2202     06E7  00F8               	movwf	checkRTCType@data
  2203     06E8                     l1335:
  2204                           
  2205                           ;RTC.c: 89:     if(((data)>>(7) & 1)) {
  2206     06E8  0878               	movf	checkRTCType@data,w
  2207     06E9  00F7               	movwf	??_checkRTCType
  2208     06EA  3007               	movlw	7
  2209     06EB                     u405:
  2210     06EB  1003               	clrc
  2211     06EC  0CF7               	rrf	??_checkRTCType,f
  2212     06ED  3EFF               	addlw	-1
  2213     06EE  1D03               	skipz
  2214     06EF  2EEB               	goto	u405
  2215     06F0  1C77               	btfss	??_checkRTCType,0
  2216     06F1  2EF3               	goto	u411
  2217     06F2  2EF4               	goto	u410
  2218     06F3                     u411:
  2219     06F3  2F0C               	goto	l1357
  2220     06F4                     u410:
  2221     06F4                     l1337:
  2222                           
  2223                           ;RTC.c: 92:         (data &=(0<<0));
  2224     06F4  01F8               	clrf	checkRTCType@data
  2225     06F5                     l1339:
  2226                           
  2227                           ;RTC.c: 93:         writeByteRTC(0x0F,data);
  2228     06F5  01F5               	clrf	writeByteRTC@data
  2229     06F6  300F               	movlw	15
  2230     06F7  2567               	fcall	_writeByteRTC
  2231     06F8                     l1341:
  2232                           
  2233                           ;RTC.c: 94:         (data |= (1<<0));
  2234     06F8  1478               	bsf	checkRTCType@data,0
  2235     06F9                     l1343:
  2236                           
  2237                           ;RTC.c: 95:         writeByteRTC(0x0F,data);
  2238     06F9  0878               	movf	checkRTCType@data,w
  2239     06FA  00F5               	movwf	writeByteRTC@data
  2240     06FB  300F               	movlw	15
  2241     06FC  2567               	fcall	_writeByteRTC
  2242     06FD                     l1345:
  2243                           
  2244                           ;RTC.c: 96:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  2245     06FD  2EFE               	nop2	;2 cycle nop
  2246     06FE  2EFF               	nop2	;2 cycle nop
  2247     06FF  0000               	nop
  2248     0700                     l1347:
  2249                           
  2250                           ;RTC.c: 97:         data = readByteRTC(0x0F);
  2251     0700  300F               	movlw	15
  2252     0701  2575               	fcall	_readByteRTC
  2253     0702  00F8               	movwf	checkRTCType@data
  2254     0703                     l1349:
  2255                           
  2256                           ;RTC.c: 98:         if(!((data)>>(0) & 1)) {
  2257     0703  1878               	btfsc	checkRTCType@data,0
  2258     0704  2F06               	goto	u421
  2259     0705  2F07               	goto	u420
  2260     0706                     u421:
  2261     0706  2F0C               	goto	l1357
  2262     0707                     u420:
  2263     0707                     l1351:
  2264                           
  2265                           ;RTC.c: 99:             writeByteRTC(0x0F, 0x00);
  2266     0707  01F5               	clrf	writeByteRTC@data
  2267     0708  300F               	movlw	15
  2268     0709  2567               	fcall	_writeByteRTC
  2269     070A                     l1353:
  2270                           
  2271                           ;RTC.c: 100:             return 1;
  2272     070A  1403               	setc
  2273     070B  2F0D               	goto	l153
  2274     070C                     l1357:
  2275                           
  2276                           ;RTC.c: 103:     return 0;
  2277     070C  1003               	clrc
  2278     070D                     l153:
  2279     070D  0008               	return
  2280     070E                     __end_of_checkRTCType:
  2281                           
  2282                           	psect	text17
  2283     0567                     __ptext17:	
  2284 ;; *************** function _writeByteRTC *****************
  2285 ;; Defined at:
  2286 ;;		line 53 in file "RTC.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  address         1    wreg     unsigned char 
  2289 ;;  data            1    5[COMMON] unsigned char 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  address         1    6[COMMON] unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2301 ;;      Params:         1       0       0       0       0
  2302 ;;      Locals:         1       0       0       0       0
  2303 ;;      Temps:          0       0       0       0       0
  2304 ;;      Totals:         2       0       0       0       0
  2305 ;;Total ram usage:        2 bytes
  2306 ;; Hardware stack levels used: 1
  2307 ;; Hardware stack levels required when called: 2
  2308 ;; This function calls:
  2309 ;;		_endWriteRTC
  2310 ;;		_reqWriteRTC
  2311 ;;		_writeDataRTC
  2312 ;; This function is called by:
  2313 ;;		_checkRTCType
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317     0567                     _writeByteRTC:	
  2318                           ;psect for function _writeByteRTC
  2319                           
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2323                           ;writeByteRTC@address stored from wreg
  2324     0567  00F6               	movwf	writeByteRTC@address
  2325     0568                     l1313:
  2326                           
  2327                           ;RTC.c: 54:     reqWriteRTC(address);
  2328     0568  0876               	movf	writeByteRTC@address,w
  2329     0569  2560               	fcall	_reqWriteRTC
  2330                           
  2331                           ;RTC.c: 55:     writeDataRTC(data);
  2332     056A  0875               	movf	writeByteRTC@data,w
  2333     056B  2558               	fcall	_writeDataRTC
  2334     056C                     l1315:
  2335                           
  2336                           ;RTC.c: 56:     endWriteRTC();
  2337     056C  2553               	fcall	_endWriteRTC
  2338     056D                     l142:
  2339     056D  0008               	return
  2340     056E                     __end_of_writeByteRTC:
  2341                           
  2342                           	psect	text18
  2343     0558                     __ptext18:	
  2344 ;; *************** function _writeDataRTC *****************
  2345 ;; Defined at:
  2346 ;;		line 43 in file "RTC.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  data            1    wreg     unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  data            1    4[COMMON] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2360 ;;      Params:         0       0       0       0       0
  2361 ;;      Locals:         1       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0
  2363 ;;      Totals:         1       0       0       0       0
  2364 ;;Total ram usage:        1 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 1
  2367 ;; This function calls:
  2368 ;;		_I2C_WriteByte
  2369 ;; This function is called by:
  2370 ;;		_writeByteRTC
  2371 ;;		_startRTC
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375     0558                     _writeDataRTC:	
  2376                           ;psect for function _writeDataRTC
  2377                           
  2378                           
  2379                           ;incstack = 0
  2380                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2381                           ;writeDataRTC@data stored from wreg
  2382     0558  00F4               	movwf	writeDataRTC@data
  2383     0559                     l1211:
  2384                           
  2385                           ;RTC.c: 44:     I2C_WriteByte(data);
  2386     0559  0874               	movf	writeDataRTC@data,w
  2387     055A  2739               	fcall	_I2C_WriteByte
  2388     055B                     l136:
  2389     055B  0008               	return
  2390     055C                     __end_of_writeDataRTC:
  2391                           
  2392                           	psect	text19
  2393     0560                     __ptext19:	
  2394 ;; *************** function _reqWriteRTC *****************
  2395 ;; Defined at:
  2396 ;;		line 36 in file "RTC.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  address         1    wreg     unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  address         1    4[COMMON] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2410 ;;      Params:         0       0       0       0       0
  2411 ;;      Locals:         1       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0
  2413 ;;      Totals:         1       0       0       0       0
  2414 ;;Total ram usage:        1 bytes
  2415 ;; Hardware stack levels used: 1
  2416 ;; Hardware stack levels required when called: 1
  2417 ;; This function calls:
  2418 ;;		_I2C_Start
  2419 ;;		_I2C_WriteByte
  2420 ;; This function is called by:
  2421 ;;		_writeByteRTC
  2422 ;;		_startRTC
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426     0560                     _reqWriteRTC:	
  2427                           ;psect for function _reqWriteRTC
  2428                           
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2432                           ;reqWriteRTC@address stored from wreg
  2433     0560  00F4               	movwf	reqWriteRTC@address
  2434     0561                     l1205:
  2435                           
  2436                           ;RTC.c: 37:     I2C_Start();
  2437     0561  25AD               	fcall	_I2C_Start
  2438     0562                     l1207:
  2439                           
  2440                           ;RTC.c: 38:     I2C_WriteByte(0b11010000);
  2441     0562  30D0               	movlw	208
  2442     0563  2739               	fcall	_I2C_WriteByte
  2443     0564                     l1209:
  2444                           
  2445                           ;RTC.c: 39:     I2C_WriteByte(address);
  2446     0564  0874               	movf	reqWriteRTC@address,w
  2447     0565  2739               	fcall	_I2C_WriteByte
  2448     0566                     l133:
  2449     0566  0008               	return
  2450     0567                     __end_of_reqWriteRTC:
  2451                           
  2452                           	psect	text20
  2453     0553                     __ptext20:	
  2454 ;; *************** function _endWriteRTC *****************
  2455 ;; Defined at:
  2456 ;;		line 48 in file "RTC.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2470 ;;      Params:         0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; Hardware stack levels required when called: 1
  2477 ;; This function calls:
  2478 ;;		_I2C_Stop
  2479 ;; This function is called by:
  2480 ;;		_writeByteRTC
  2481 ;;		_startRTC
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485     0553                     _endWriteRTC:	
  2486                           ;psect for function _endWriteRTC
  2487                           
  2488     0553                     l1213:	
  2489                           ;incstack = 0
  2490                           ; Regs used in _endWriteRTC: [status,2+status,0+pclath+cstack]
  2491                           
  2492                           
  2493                           ;RTC.c: 49:     I2C_Stop();
  2494     0553  25E7               	fcall	_I2C_Stop
  2495     0554                     l139:
  2496     0554  0008               	return
  2497     0555                     __end_of_endWriteRTC:
  2498                           
  2499                           	psect	text21
  2500     0575                     __ptext21:	
  2501 ;; *************** function _readByteRTC *****************
  2502 ;; Defined at:
  2503 ;;		line 27 in file "RTC.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  address         1    wreg     unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  address         1    5[COMMON] unsigned char 
  2508 ;;  data            1    6[COMMON] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      unsigned char 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2518 ;;      Params:         0       0       0       0       0
  2519 ;;      Locals:         2       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0
  2521 ;;      Totals:         2       0       0       0       0
  2522 ;;Total ram usage:        2 bytes
  2523 ;; Hardware stack levels used: 1
  2524 ;; Hardware stack levels required when called: 2
  2525 ;; This function calls:
  2526 ;;		_I2C_ReadByte
  2527 ;;		_endReadRTC
  2528 ;;		_reqReadRTC
  2529 ;; This function is called by:
  2530 ;;		_checkRTCType
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534     0575                     _readByteRTC:	
  2535                           ;psect for function _readByteRTC
  2536                           
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2540                           ;readByteRTC@address stored from wreg
  2541     0575  00F5               	movwf	readByteRTC@address
  2542     0576                     l1301:
  2543     0576                     l1303:
  2544                           
  2545                           ;RTC.c: 29:     reqReadRTC(address);
  2546     0576  0875               	movf	readByteRTC@address,w
  2547     0577  258F               	fcall	_reqReadRTC
  2548     0578                     l1305:
  2549                           
  2550                           ;RTC.c: 30:     data = I2C_ReadByte();
  2551     0578  270E               	fcall	_I2C_ReadByte
  2552     0579  00F6               	movwf	readByteRTC@data
  2553     057A                     l1307:
  2554                           
  2555                           ;RTC.c: 31:     endReadRTC();
  2556     057A  2555               	fcall	_endReadRTC
  2557     057B                     l1309:
  2558                           
  2559                           ;RTC.c: 32:     return data;
  2560     057B  0876               	movf	readByteRTC@data,w
  2561     057C                     l130:
  2562     057C  0008               	return
  2563     057D                     __end_of_readByteRTC:
  2564                           
  2565                           	psect	text22
  2566     058F                     __ptext22:	
  2567 ;; *************** function _reqReadRTC *****************
  2568 ;; Defined at:
  2569 ;;		line 4 in file "RTC.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;  address         1    wreg     unsigned char 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  address         1    4[COMMON] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2583 ;;      Params:         0       0       0       0       0
  2584 ;;      Locals:         1       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0
  2586 ;;      Totals:         1       0       0       0       0
  2587 ;;Total ram usage:        1 bytes
  2588 ;; Hardware stack levels used: 1
  2589 ;; Hardware stack levels required when called: 1
  2590 ;; This function calls:
  2591 ;;		_I2C_ReStart
  2592 ;;		_I2C_Start
  2593 ;;		_I2C_WriteByte
  2594 ;; This function is called by:
  2595 ;;		_readByteRTC
  2596 ;;		_isRTCRunning
  2597 ;;		_getTime
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601     058F                     _reqReadRTC:	
  2602                           ;psect for function _reqReadRTC
  2603                           
  2604                           
  2605                           ;incstack = 0
  2606                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2607                           ;reqReadRTC@address stored from wreg
  2608     058F  00F4               	movwf	reqReadRTC@address
  2609     0590                     l1195:
  2610                           
  2611                           ;RTC.c: 5:     I2C_Start();
  2612     0590  25AD               	fcall	_I2C_Start
  2613     0591                     l1197:
  2614                           
  2615                           ;RTC.c: 6:     I2C_WriteByte(0b11010000);
  2616     0591  30D0               	movlw	208
  2617     0592  2739               	fcall	_I2C_WriteByte
  2618     0593                     l1199:
  2619                           
  2620                           ;RTC.c: 7:     I2C_WriteByte(address);
  2621     0593  0874               	movf	reqReadRTC@address,w
  2622     0594  2739               	fcall	_I2C_WriteByte
  2623                           
  2624                           ;RTC.c: 8:     I2C_ReStart();
  2625     0595  25F8               	fcall	_I2C_ReStart
  2626     0596                     l1201:
  2627                           
  2628                           ;RTC.c: 9:     I2C_WriteByte(0b11010001);
  2629     0596  30D1               	movlw	209
  2630     0597  2739               	fcall	_I2C_WriteByte
  2631     0598                     l121:
  2632     0598  0008               	return
  2633     0599                     __end_of_reqReadRTC:
  2634                           
  2635                           	psect	text23
  2636     0739                     __ptext23:	
  2637 ;; *************** function _I2C_WriteByte *****************
  2638 ;; Defined at:
  2639 ;;		line 45 in file "IIC.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  Data            1    wreg     unsigned char 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  Data            1    2[COMMON] unsigned char 
  2644 ;;  i               1    3[COMMON] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;		None               void
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, btemp+1
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2654 ;;      Params:         0       0       0       0       0
  2655 ;;      Locals:         2       0       0       0       0
  2656 ;;      Temps:          2       0       0       0       0
  2657 ;;      Totals:         4       0       0       0       0
  2658 ;;Total ram usage:        4 bytes
  2659 ;; Hardware stack levels used: 1
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_reqReadRTC
  2664 ;;		_reqWriteRTC
  2665 ;;		_writeDataRTC
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669     0739                     _I2C_WriteByte:	
  2670                           ;psect for function _I2C_WriteByte
  2671                           
  2672                           
  2673                           ;incstack = 0
  2674                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  2675                           ;I2C_WriteByte@Data stored from wreg
  2676     0739  00F2               	movwf	I2C_WriteByte@Data
  2677     073A                     l1139:
  2678                           
  2679                           ;IIC.c: 46:     unsigned char i;;IIC.c: 47:     for(i = 0; i<8; i++) {
  2680     073A  01F3               	clrf	I2C_WriteByte@i
  2681     073B                     l85:
  2682                           
  2683                           ;IIC.c: 48:         TRISAbits.TRISA0 = 0;
  2684     073B  1683               	bsf	3,5	;RP0=1, select bank1
  2685     073C  1303               	bcf	3,6	;RP1=0, select bank1
  2686     073D  1005               	bcf	5,0	;volatile
  2687                           
  2688                           ;IIC.c: 49:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2689     073E  2F3F               	nop2	;2 cycle nop
  2690     073F                     l1145:
  2691                           
  2692                           ;IIC.c: 50:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  2693     073F  0A73               	incf	I2C_WriteByte@i,w
  2694     0740  00FF               	movwf	btemp+1
  2695     0741  0872               	movf	I2C_WriteByte@Data,w
  2696     0742  00F0               	movwf	??_I2C_WriteByte
  2697     0743  01F1               	clrf	??_I2C_WriteByte+1
  2698     0744  2F48               	goto	u264
  2699     0745                     u265:
  2700     0745  1003               	clrc
  2701     0746  0DF0               	rlf	??_I2C_WriteByte,f
  2702     0747  0DF1               	rlf	??_I2C_WriteByte+1,f
  2703     0748                     u264:
  2704     0748  0BFF               	decfsz	btemp+1,f
  2705     0749  2F45               	goto	u265
  2706     074A  1BF0               	btfsc	??_I2C_WriteByte,7
  2707     074B  2F4D               	goto	u271
  2708     074C  2F51               	goto	u270
  2709     074D                     u271:
  2710     074D  1683               	bsf	3,5	;RP0=1, select bank1
  2711     074E  1303               	bcf	3,6	;RP1=0, select bank1
  2712     074F  1485               	bsf	5,1	;volatile
  2713     0750  2F54               	goto	u284
  2714     0751                     u270:
  2715     0751  1683               	bsf	3,5	;RP0=1, select bank1
  2716     0752  1303               	bcf	3,6	;RP1=0, select bank1
  2717     0753  1085               	bcf	5,1	;volatile
  2718     0754                     u284:
  2719     0754                     l1147:
  2720                           
  2721                           ;IIC.c: 51:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2722     0754  2F55               	nop2	;2 cycle nop
  2723     0755                     l1149:
  2724                           
  2725                           ;IIC.c: 52:         TRISAbits.TRISA0 = 1;
  2726     0755  1683               	bsf	3,5	;RP0=1, select bank1
  2727     0756  1303               	bcf	3,6	;RP1=0, select bank1
  2728     0757  1405               	bsf	5,0	;volatile
  2729     0758                     l1151:
  2730                           
  2731                           ;IIC.c: 53:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2732     0758  2F59               	nop2	;2 cycle nop
  2733     0759  2F5A               	nop2	;2 cycle nop
  2734     075A  0000               	nop
  2735                           
  2736                           ;IIC.c: 54:     }
  2737     075B  3001               	movlw	1
  2738     075C  00FF               	movwf	btemp+1
  2739     075D  087F               	movf	btemp+1,w
  2740     075E  07F3               	addwf	I2C_WriteByte@i,f
  2741     075F                     l1153:
  2742     075F  3008               	movlw	8
  2743     0760  0273               	subwf	I2C_WriteByte@i,w
  2744     0761  1C03               	skipc
  2745     0762  2F64               	goto	u291
  2746     0763  2F65               	goto	u290
  2747     0764                     u291:
  2748     0764  2F3B               	goto	l85
  2749     0765                     u290:
  2750     0765                     l86:
  2751                           
  2752                           ;IIC.c: 57:     TRISAbits.TRISA0 = 0;
  2753     0765  1683               	bsf	3,5	;RP0=1, select bank1
  2754     0766  1303               	bcf	3,6	;RP1=0, select bank1
  2755     0767  1005               	bcf	5,0	;volatile
  2756                           
  2757                           ;IIC.c: 58:     TRISAbits.TRISA1 = 1;
  2758     0768  1485               	bsf	5,1	;volatile
  2759                           
  2760                           ;IIC.c: 59:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2761     0769  2F6A               	nop2	;2 cycle nop
  2762     076A  2F6B               	nop2	;2 cycle nop
  2763     076B  0000               	nop
  2764                           
  2765                           ;IIC.c: 60:     TRISAbits.TRISA0 = 1;
  2766     076C  1683               	bsf	3,5	;RP0=1, select bank1
  2767     076D  1303               	bcf	3,6	;RP1=0, select bank1
  2768     076E  1405               	bsf	5,0	;volatile
  2769                           
  2770                           ;IIC.c: 61:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2771     076F  2F70               	nop2	;2 cycle nop
  2772     0770  2F71               	nop2	;2 cycle nop
  2773     0771  0000               	nop
  2774     0772                     l1155:
  2775                           
  2776                           ;IIC.c: 72:     return PORTAbits.RA1;;	Return value of _I2C_WriteByte is never used
  2777     0772  1283               	bcf	3,5	;RP0=0, select bank0
  2778     0773  1303               	bcf	3,6	;RP1=0, select bank0
  2779     0774  0805               	movf	5,w	;volatile
  2780     0775                     l87:
  2781     0775  0008               	return
  2782     0776                     __end_of_I2C_WriteByte:
  2783                           
  2784                           	psect	text24
  2785     05AD                     __ptext24:	
  2786 ;; *************** function _I2C_Start *****************
  2787 ;; Defined at:
  2788 ;;		line 13 in file "IIC.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		None
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used: 1
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_reqReadRTC
  2812 ;;		_reqWriteRTC
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816     05AD                     _I2C_Start:	
  2817                           ;psect for function _I2C_Start
  2818                           
  2819     05AD                     l1133:	
  2820                           ;incstack = 0
  2821                           ; Regs used in _I2C_Start: []
  2822                           
  2823                           
  2824                           ;IIC.c: 14:     TRISAbits.TRISA0 = 1;
  2825     05AD  1683               	bsf	3,5	;RP0=1, select bank1
  2826     05AE  1303               	bcf	3,6	;RP1=0, select bank1
  2827     05AF  1405               	bsf	5,0	;volatile
  2828                           
  2829                           ;IIC.c: 15:     TRISAbits.TRISA1 = 1;
  2830     05B0  1485               	bsf	5,1	;volatile
  2831                           
  2832                           ;IIC.c: 16:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2833     05B1  2DB2               	nop2	;2 cycle nop
  2834     05B2  2DB3               	nop2	;2 cycle nop
  2835     05B3  0000               	nop
  2836                           
  2837                           ;IIC.c: 17:     TRISAbits.TRISA1 = 0;
  2838     05B4  1683               	bsf	3,5	;RP0=1, select bank1
  2839     05B5  1303               	bcf	3,6	;RP1=0, select bank1
  2840     05B6  1085               	bcf	5,1	;volatile
  2841                           
  2842                           ;IIC.c: 18:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2843     05B7  2DB8               	nop2	;2 cycle nop
  2844     05B8  2DB9               	nop2	;2 cycle nop
  2845     05B9  0000               	nop
  2846     05BA                     l76:
  2847     05BA  0008               	return
  2848     05BB                     __end_of_I2C_Start:
  2849                           
  2850                           	psect	text25
  2851     05F8                     __ptext25:	
  2852 ;; *************** function _I2C_ReStart *****************
  2853 ;; Defined at:
  2854 ;;		line 22 in file "IIC.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		None
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2868 ;;      Params:         0       0       0       0       0
  2869 ;;      Locals:         0       0       0       0       0
  2870 ;;      Temps:          0       0       0       0       0
  2871 ;;      Totals:         0       0       0       0       0
  2872 ;;Total ram usage:        0 bytes
  2873 ;; Hardware stack levels used: 1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_reqReadRTC
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881     05F8                     _I2C_ReStart:	
  2882                           ;psect for function _I2C_ReStart
  2883                           
  2884     05F8                     l1135:	
  2885                           ;incstack = 0
  2886                           ; Regs used in _I2C_ReStart: []
  2887                           
  2888                           
  2889                           ;IIC.c: 23:     TRISAbits.TRISA0 = 0;
  2890     05F8  1683               	bsf	3,5	;RP0=1, select bank1
  2891     05F9  1303               	bcf	3,6	;RP1=0, select bank1
  2892     05FA  1005               	bcf	5,0	;volatile
  2893                           
  2894                           ;IIC.c: 24:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2895     05FB  2DFC               	nop2	;2 cycle nop
  2896                           
  2897                           ;IIC.c: 25:     TRISAbits.TRISA1 = 1;
  2898     05FC  1683               	bsf	3,5	;RP0=1, select bank1
  2899     05FD  1303               	bcf	3,6	;RP1=0, select bank1
  2900     05FE  1485               	bsf	5,1	;volatile
  2901                           
  2902                           ;IIC.c: 26:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2903     05FF  2E00               	nop2	;2 cycle nop
  2904                           
  2905                           ;IIC.c: 27:     TRISAbits.TRISA0 = 1;
  2906     0600  1683               	bsf	3,5	;RP0=1, select bank1
  2907     0601  1303               	bcf	3,6	;RP1=0, select bank1
  2908     0602  1405               	bsf	5,0	;volatile
  2909                           
  2910                           ;IIC.c: 28:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2911     0603  2E04               	nop2	;2 cycle nop
  2912                           
  2913                           ;IIC.c: 29:     TRISAbits.TRISA1 = 0;
  2914     0604  1683               	bsf	3,5	;RP0=1, select bank1
  2915     0605  1303               	bcf	3,6	;RP1=0, select bank1
  2916     0606  1085               	bcf	5,1	;volatile
  2917                           
  2918                           ;IIC.c: 30:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2919     0607  2E08               	nop2	;2 cycle nop
  2920     0608                     l79:
  2921     0608  0008               	return
  2922     0609                     __end_of_I2C_ReStart:
  2923                           
  2924                           	psect	text26
  2925     0555                     __ptext26:	
  2926 ;; *************** function _endReadRTC *****************
  2927 ;; Defined at:
  2928 ;;		line 21 in file "RTC.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		status,2, status,0, pclath, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2942 ;;      Params:         0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used: 1
  2948 ;; Hardware stack levels required when called: 1
  2949 ;; This function calls:
  2950 ;;		_I2C_SendNACK
  2951 ;;		_I2C_Stop
  2952 ;; This function is called by:
  2953 ;;		_readByteRTC
  2954 ;;		_getTime
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958     0555                     _endReadRTC:	
  2959                           ;psect for function _endReadRTC
  2960                           
  2961     0555                     l1203:	
  2962                           ;incstack = 0
  2963                           ; Regs used in _endReadRTC: [status,2+status,0+pclath+cstack]
  2964                           
  2965                           
  2966                           ;RTC.c: 22:     I2C_SendNACK();
  2967     0555  25C9               	fcall	_I2C_SendNACK
  2968                           
  2969                           ;RTC.c: 23:     I2C_Stop();
  2970     0556  25E7               	fcall	_I2C_Stop
  2971     0557                     l127:
  2972     0557  0008               	return
  2973     0558                     __end_of_endReadRTC:
  2974                           
  2975                           	psect	text27
  2976     05E7                     __ptext27:	
  2977 ;; *************** function _I2C_Stop *****************
  2978 ;; Defined at:
  2979 ;;		line 34 in file "IIC.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		None
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  2993 ;;      Params:         0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0
  2996 ;;      Totals:         0       0       0       0       0
  2997 ;;Total ram usage:        0 bytes
  2998 ;; Hardware stack levels used: 1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_endReadRTC
  3003 ;;		_endWriteRTC
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007     05E7                     _I2C_Stop:	
  3008                           ;psect for function _I2C_Stop
  3009                           
  3010     05E7                     l1137:	
  3011                           ;incstack = 0
  3012                           ; Regs used in _I2C_Stop: []
  3013                           
  3014                           
  3015                           ;IIC.c: 35:     TRISAbits.TRISA0 = 0;
  3016     05E7  1683               	bsf	3,5	;RP0=1, select bank1
  3017     05E8  1303               	bcf	3,6	;RP1=0, select bank1
  3018     05E9  1005               	bcf	5,0	;volatile
  3019                           
  3020                           ;IIC.c: 36:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3021     05EA  2DEB               	nop2	;2 cycle nop
  3022                           
  3023                           ;IIC.c: 37:     TRISAbits.TRISA1 = 0;
  3024     05EB  1683               	bsf	3,5	;RP0=1, select bank1
  3025     05EC  1303               	bcf	3,6	;RP1=0, select bank1
  3026     05ED  1085               	bcf	5,1	;volatile
  3027                           
  3028                           ;IIC.c: 38:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3029     05EE  2DEF               	nop2	;2 cycle nop
  3030                           
  3031                           ;IIC.c: 39:     TRISAbits.TRISA0 = 1;
  3032     05EF  1683               	bsf	3,5	;RP0=1, select bank1
  3033     05F0  1303               	bcf	3,6	;RP1=0, select bank1
  3034     05F1  1405               	bsf	5,0	;volatile
  3035                           
  3036                           ;IIC.c: 40:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3037     05F2  2DF3               	nop2	;2 cycle nop
  3038                           
  3039                           ;IIC.c: 41:     TRISAbits.TRISA1 = 1;
  3040     05F3  1683               	bsf	3,5	;RP0=1, select bank1
  3041     05F4  1303               	bcf	3,6	;RP1=0, select bank1
  3042     05F5  1485               	bsf	5,1	;volatile
  3043                           
  3044                           ;IIC.c: 42:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3045     05F6  2DF7               	nop2	;2 cycle nop
  3046     05F7                     l82:
  3047     05F7  0008               	return
  3048     05F8                     __end_of_I2C_Stop:
  3049                           
  3050                           	psect	text28
  3051     05C9                     __ptext28:	
  3052 ;; *************** function _I2C_SendNACK *****************
  3053 ;; Defined at:
  3054 ;;		line 101 in file "IIC.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;		None
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;		None
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		None
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3068 ;;      Params:         0       0       0       0       0
  3069 ;;      Locals:         0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0
  3071 ;;      Totals:         0       0       0       0       0
  3072 ;;Total ram usage:        0 bytes
  3073 ;; Hardware stack levels used: 1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_endReadRTC
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081     05C9                     _I2C_SendNACK:	
  3082                           ;psect for function _I2C_SendNACK
  3083                           
  3084     05C9                     l1159:	
  3085                           ;incstack = 0
  3086                           ; Regs used in _I2C_SendNACK: []
  3087                           
  3088                           
  3089                           ;IIC.c: 102:     TRISAbits.TRISA0 = 0;
  3090     05C9  1683               	bsf	3,5	;RP0=1, select bank1
  3091     05CA  1303               	bcf	3,6	;RP1=0, select bank1
  3092     05CB  1005               	bcf	5,0	;volatile
  3093                           
  3094                           ;IIC.c: 103:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3095     05CC  2DCD               	nop2	;2 cycle nop
  3096                           
  3097                           ;IIC.c: 104:     TRISAbits.TRISA1 = 1;
  3098     05CD  1683               	bsf	3,5	;RP0=1, select bank1
  3099     05CE  1303               	bcf	3,6	;RP1=0, select bank1
  3100     05CF  1485               	bsf	5,1	;volatile
  3101                           
  3102                           ;IIC.c: 105:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3103     05D0  2DD1               	nop2	;2 cycle nop
  3104                           
  3105                           ;IIC.c: 106:     TRISAbits.TRISA0 = 1;
  3106     05D1  1683               	bsf	3,5	;RP0=1, select bank1
  3107     05D2  1303               	bcf	3,6	;RP1=0, select bank1
  3108     05D3  1405               	bsf	5,0	;volatile
  3109                           
  3110                           ;IIC.c: 107:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3111     05D4  2DD5               	nop2	;2 cycle nop
  3112     05D5  2DD6               	nop2	;2 cycle nop
  3113     05D6  0000               	nop
  3114     05D7                     l98:
  3115     05D7  0008               	return
  3116     05D8                     __end_of_I2C_SendNACK:
  3117                           
  3118                           	psect	text29
  3119     070E                     __ptext29:	
  3120 ;; *************** function _I2C_ReadByte *****************
  3121 ;; Defined at:
  3122 ;;		line 76 in file "IIC.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  i               1    2[COMMON] unsigned char 
  3127 ;;  Data            1    1[COMMON] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0, btemp+1
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3137 ;;      Params:         0       0       0       0       0
  3138 ;;      Locals:         2       0       0       0       0
  3139 ;;      Temps:          1       0       0       0       0
  3140 ;;      Totals:         3       0       0       0       0
  3141 ;;Total ram usage:        3 bytes
  3142 ;; Hardware stack levels used: 1
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_readDataRTC
  3147 ;;		_readByteRTC
  3148 ;;		_isRTCRunning
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152     070E                     _I2C_ReadByte:	
  3153                           ;psect for function _I2C_ReadByte
  3154                           
  3155     070E                     l1177:	
  3156                           ;incstack = 0
  3157                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  3158                           
  3159                           
  3160                           ;IIC.c: 77:     unsigned char i, Data = 0;
  3161     070E  01F1               	clrf	I2C_ReadByte@Data
  3162                           
  3163                           ;IIC.c: 78:     for(i=0; i<8; i++) {
  3164     070F  01F2               	clrf	I2C_ReadByte@i
  3165     0710                     l90:
  3166                           
  3167                           ;IIC.c: 79:         TRISAbits.TRISA0 = 0;
  3168     0710  1683               	bsf	3,5	;RP0=1, select bank1
  3169     0711  1303               	bcf	3,6	;RP1=0, select bank1
  3170     0712  1005               	bcf	5,0	;volatile
  3171                           
  3172                           ;IIC.c: 80:         TRISAbits.TRISA1 = 1;
  3173     0713  1485               	bsf	5,1	;volatile
  3174                           
  3175                           ;IIC.c: 81:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3176     0714  2F15               	nop2	;2 cycle nop
  3177     0715  2F16               	nop2	;2 cycle nop
  3178     0716  0000               	nop
  3179                           
  3180                           ;IIC.c: 82:         TRISAbits.TRISA0 = 1;
  3181     0717  1683               	bsf	3,5	;RP0=1, select bank1
  3182     0718  1303               	bcf	3,6	;RP1=0, select bank1
  3183     0719  1405               	bsf	5,0	;volatile
  3184                           
  3185                           ;IIC.c: 83:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3186     071A  2F1B               	nop2	;2 cycle nop
  3187     071B                     l1183:
  3188                           
  3189                           ;IIC.c: 84:         Data = Data|(PORTAbits.RA1<<(7-i));
  3190     071B  1283               	bcf	3,5	;RP0=0, select bank0
  3191     071C  1303               	bcf	3,6	;RP1=0, select bank0
  3192     071D  0C05               	rrf	5,w	;volatile
  3193     071E  3901               	andlw	1
  3194     071F  00F0               	movwf	??_I2C_ReadByte
  3195     0720  0872               	movf	I2C_ReadByte@i,w
  3196     0721  3C07               	sublw	7
  3197     0722  3E01               	addlw	1
  3198     0723  2F26               	goto	u304
  3199     0724                     u305:
  3200     0724  1003               	clrc
  3201     0725  0DF0               	rlf	??_I2C_ReadByte,f
  3202     0726                     u304:
  3203     0726  3EFF               	addlw	-1
  3204     0727  1D03               	skipz
  3205     0728  2F24               	goto	u305
  3206     0729  0870               	movf	??_I2C_ReadByte,w
  3207     072A  0471               	iorwf	I2C_ReadByte@Data,w
  3208     072B  00F1               	movwf	I2C_ReadByte@Data
  3209     072C                     l1185:
  3210                           
  3211                           ;IIC.c: 85:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3212     072C  2F2D               	nop2	;2 cycle nop
  3213     072D                     l1187:
  3214                           
  3215                           ;IIC.c: 86:     }
  3216     072D  3001               	movlw	1
  3217     072E  00FF               	movwf	btemp+1
  3218     072F  087F               	movf	btemp+1,w
  3219     0730  07F2               	addwf	I2C_ReadByte@i,f
  3220     0731                     l1189:
  3221     0731  3008               	movlw	8
  3222     0732  0272               	subwf	I2C_ReadByte@i,w
  3223     0733  1C03               	skipc
  3224     0734  2F36               	goto	u311
  3225     0735  2F37               	goto	u310
  3226     0736                     u311:
  3227     0736  2F10               	goto	l90
  3228     0737                     u310:
  3229     0737                     l1191:
  3230                           
  3231                           ;IIC.c: 87:     return Data;
  3232     0737  0871               	movf	I2C_ReadByte@Data,w
  3233     0738                     l92:
  3234     0738  0008               	return
  3235     0739                     __end_of_I2C_ReadByte:
  3236                           
  3237                           	psect	text30
  3238     0635                     __ptext30:	
  3239 ;; *************** function _blankTubes *****************
  3240 ;; Defined at:
  3241 ;;		line 96 in file "tubes.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  i               1    1[COMMON] unsigned char 
  3246 ;;  ptr             1    0[COMMON] PTR unsigned char 
  3247 ;;		 -> T0(1), 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3257 ;;      Params:         0       0       0       0       0
  3258 ;;      Locals:         2       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0
  3260 ;;      Totals:         2       0       0       0       0
  3261 ;;Total ram usage:        2 bytes
  3262 ;; Hardware stack levels used: 1
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_Init
  3267 ;;		_passTubeNum
  3268 ;;		_displayError666
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272     0635                     _blankTubes:	
  3273                           ;psect for function _blankTubes
  3274                           
  3275     0635                     l1283:	
  3276                           ;incstack = 0
  3277                           ; Regs used in _blankTubes: [wreg-fsr0h+status,2+status,0+btemp+1]
  3278                           
  3279                           
  3280                           ;tubes.c: 97:     unsigned char *ptr;;tubes.c: 98:     ptr = &T0;
  3281     0635  3022               	movlw	34
  3282     0636  00F0               	movwf	blankTubes@ptr
  3283     0637                     l1285:
  3284                           
  3285                           ;tubes.c: 100:     for(unsigned char i = 0; i < 8; i++) {
  3286     0637  01F1               	clrf	blankTubes@i
  3287     0638                     l1291:
  3288                           
  3289                           ;tubes.c: 101:         *ptr = 10;
  3290     0638  0870               	movf	blankTubes@ptr,w
  3291     0639  0084               	movwf	4
  3292     063A  300A               	movlw	10
  3293     063B  1383               	bcf	3,7	;select IRP bank0
  3294     063C  0080               	movwf	0
  3295     063D                     l1293:
  3296                           
  3297                           ;tubes.c: 102:         ptr++;
  3298     063D  3001               	movlw	1
  3299     063E  00FF               	movwf	btemp+1
  3300     063F  087F               	movf	btemp+1,w
  3301     0640  07F0               	addwf	blankTubes@ptr,f
  3302     0641                     l1295:
  3303                           
  3304                           ;tubes.c: 103:     }
  3305     0641  3001               	movlw	1
  3306     0642  00FF               	movwf	btemp+1
  3307     0643  087F               	movf	btemp+1,w
  3308     0644  07F1               	addwf	blankTubes@i,f
  3309     0645                     l1297:
  3310     0645  3008               	movlw	8
  3311     0646  0271               	subwf	blankTubes@i,w
  3312     0647  1C03               	skipc
  3313     0648  2E4A               	goto	u381
  3314     0649  2E4B               	goto	u380
  3315     064A                     u381:
  3316     064A  2E38               	goto	l1291
  3317     064B                     u380:
  3318     064B                     l1299:
  3319                           
  3320                           ;tubes.c: 104:     leftDP = rightDP = 0x00;
  3321     064B  01F9               	clrf	_rightDP
  3322     064C  01FA               	clrf	_leftDP
  3323     064D                     l221:
  3324     064D  0008               	return
  3325     064E                     __end_of_blankTubes:
  3326                           
  3327                           	psect	text31
  3328     057D                     __ptext31:	
  3329 ;; *************** function _InitI2C *****************
  3330 ;; Defined at:
  3331 ;;		line 4 in file "IIC.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		None
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON  BANK0h  BANK0l   BANK1   BANK2
  3345 ;;      Params:         0       0       0       0       0
  3346 ;;      Locals:         0       0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0
  3348 ;;      Totals:         0       0       0       0       0
  3349 ;;Total ram usage:        0 bytes
  3350 ;; Hardware stack levels used: 1
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_Init
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358     057D                     _InitI2C:	
  3359                           ;psect for function _InitI2C
  3360                           
  3361     057D                     l961:	
  3362                           ;incstack = 0
  3363                           ; Regs used in _InitI2C: []
  3364                           
  3365                           
  3366                           ;IIC.c: 5:     TRISAbits.TRISA0 = 0;
  3367     057D  1683               	bsf	3,5	;RP0=1, select bank1
  3368     057E  1303               	bcf	3,6	;RP1=0, select bank1
  3369     057F  1005               	bcf	5,0	;volatile
  3370                           
  3371                           ;IIC.c: 6:     TRISAbits.TRISA1 = 0;
  3372     0580  1085               	bcf	5,1	;volatile
  3373                           
  3374                           ;IIC.c: 8:     PORTAbits.RA1 = 0;
  3375     0581  1283               	bcf	3,5	;RP0=0, select bank0
  3376     0582  1303               	bcf	3,6	;RP1=0, select bank0
  3377     0583  1085               	bcf	5,1	;volatile
  3378                           
  3379                           ;IIC.c: 9:     PORTAbits.RA0 = 0;
  3380     0584  1005               	bcf	5,0	;volatile
  3381     0585                     l73:
  3382     0585  0008               	return
  3383     0586                     __end_of_InitI2C:
  3384     007E                     btemp	set	126	;btemp
  3385     007E                     wtemp0	set	126
  3386                           
  3387                           	psect	config
  3388                           
  3389                           ;Config register CONFIG @ 0x2007
  3390                           ;	Oscillator Selection bits
  3391                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  3392                           ;	Watchdog Timer Enable bit
  3393                           ;	WDTE = OFF, WDT disabled
  3394                           ;	Power-up Timer Enable bit
  3395                           ;	PWRTE = OFF, PWRT disabled
  3396                           ;	RA5/MCLR/VPP Pin Function Select bit
  3397                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  3398                           ;	Brown-out Detect Enable bit
  3399                           ;	BOREN = OFF, BOD disabled
  3400                           ;	Low-Voltage Programming Enable bit
  3401                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3402                           ;	Data EE Memory Code Protection bit
  3403                           ;	CPD = OFF, Data memory code protection off
  3404                           ;	Flash Program Memory Code Protection bit
  3405                           ;	CP = OFF, Code protection off
  3406     2007                     	org	8199
  3407     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0h           70     18      18
    BANK0l            2      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    blankTubes@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> T0(BITBANK0l[1]), 

    checkDP@DP	PTR unsigned char  size(1) Largest target is 1
		 -> loadDisplay@LDP(COMMON[1]), loadDisplay@RDP(COMMON[1]), 

    loadDisplay@tubePtr	PTR unsigned char  size(1) Largest target is 1
		 -> T7(BITBANK0h[1]), 


Critical Paths under _main in COMMON

    _getTime->_passTubeNum
    _readDataRTC->_I2C_ReadByte
    _passTubeNum->_loadDisplay
    _loadDisplay->_checkDP
    _Init->_checkRTCType
    _startRTC->_reqWriteRTC
    _startRTC->_writeDataRTC
    _isRTCRunning->_reqReadRTC
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte

Critical Paths under _main in BANK0h

    _main->_getTime
    _getTime->_passTubeNum

Critical Paths under _main in BANK0l

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3739
                               _Init
                            _display
                            _getTime
                        _loadDisplay
                          _preLoadWL
 ---------------------------------------------------------------------------------
 (1) _preLoadWL                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTime                                              9     9      0    1938
                                              9 BANK0h     9     9      0
                        _I2C_SendACK
                         _endReadRTC
                        _passTubeNum
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (2) _swapNibbles                                          4     4      0      44
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0     137
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
 ---------------------------------------------------------------------------------
 (2) _passTubeNum                                         10     1      9    1372
                                              8 COMMON     1     1      0
                                              0 BANK0h     9     0      9
                         _blankTubes
                            _display
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (1) _loadDisplay                                          6     6      0     398
                                              2 COMMON     6     6      0
                            _checkDP
                              _latch
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (2) _latch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkDP                                              2     2      0     176
                                              0 COMMON     2     2      0
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (2) _send1ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _send0ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_SendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0    1403
                            _InitI2C
                         _blankTubes
                       _checkRTCType
                       _isRTCRunning
                           _startRTC
 ---------------------------------------------------------------------------------
 (2) _startRTC                                             0     0      0     224
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _isRTCRunning                                         2     2      0     249
                                              5 COMMON     2     2      0
                       _I2C_ReadByte
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _checkRTCType                                         2     2      0     860
                                              7 COMMON     2     2      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (3) _writeByteRTC                                         2     1      1     496
                                              5 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (3) _writeDataRTC                                         1     1      0     112
                                              4 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _reqWriteRTC                                          1     1      0     112
                                              4 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _readByteRTC                                          2     2      0     272
                                              5 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _reqReadRTC                                           1     1      0     112
                                              4 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteByte                                        4     4      0      90
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_SendNACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadByte                                         3     3      0     114
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _blankTubes                                           2     2      0      70
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
     _InitI2C
     _blankTubes
     _checkRTCType
       _readByteRTC
         _I2C_ReadByte
         _endReadRTC
           _I2C_SendNACK
           _I2C_Stop
         _reqReadRTC
           _I2C_ReStart
           _I2C_Start
           _I2C_WriteByte
       _writeByteRTC
         _endWriteRTC
           _I2C_Stop
         _reqWriteRTC
           _I2C_Start
           _I2C_WriteByte
         _writeDataRTC
           _I2C_WriteByte
     _isRTCRunning
       _I2C_ReadByte
       _reqReadRTC
     _startRTC
       _endWriteRTC
       _reqWriteRTC
       _writeDataRTC
   _display
   _getTime
     _I2C_SendACK
     _endReadRTC
     _passTubeNum
       _blankTubes
       _display
       _loadDisplay
         _checkDP
           _send0ToDrivers
           _send1ToDrivers
         _latch
         _send0ToDrivers
         _send1ToDrivers
     _readDataRTC
       _I2C_ReadByte
     _reqReadRTC
     _swapNibbles
   _loadDisplay
   _preLoadWL

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0h              46     12      12       3       25.7%
BANK0l               2      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            30      0       0       6        0.0%
BANK2               30      0       0       7        0.0%
ABS                  0      0      20       8        0.0%
BITBANK0h           46      0       0       9        0.0%
BITBANK0l            2      0       0      10        0.0%
BITBANK1            50      0       0      11        0.0%
DATA                 0      0      20      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Oct 28 04:57:47 2023

            _swapNibbles 064E                       l50 0678                       l44 0674  
                     l61 06BD                       l45 066E                       l64 0666  
                     l73 0585                       l90 0710                       l82 05F7  
                     l92 0738                       l76 05BA                       _T0 0022  
                     l85 073B                       _T1 0023                       l86 0765  
                     _T2 0024                       l79 0608                       l87 0775  
                     l95 05E6                       _T3 0025                       _T4 0026  
                     _T5 0027                       l98 05D7                       _T6 0028  
                     _T7 0029                      l121 0598                      l130 057C  
                    l210 058E                      l202 07B6                      l124 055F  
                    l221 064D                      l133 0566                      l213 0574  
                    l142 056D                      l230 05A2                      l127 0557  
                    l207 06E4                      l136 055B                      l153 070D  
                    l145 05C8                      l233 069B                      l139 0554  
                    l227 05AC                      l148 0634                      l156 07F8  
                    l191 061D                      l961 057D                      u310 0737  
                    u311 0736                      u304 0726                      u305 0724  
                    u410 06F4                      u330 06CD                      u411 06F3  
                    u331 06CC                      u420 0707                      u340 078B  
                    u500 067C                      u421 0706                      u405 06EB  
                    u325 06C4                      u341 078A                      u501 067B  
                    u270 0751                      u350 079C                      u271 074D  
                    u351 079B                      u264 0748                      u360 07A4  
                    u265 0745                      u361 07A3                      u290 0765  
                    u450 06B5                      u370 07B5                      u291 0764  
                    u451 06B4                      u371 07B4                      u435 0652  
                    u380 064B                      u284 0754                      u460 06BC  
                    u381 064A                      u461 06BB                      u445 065E  
                    u470 066E                      u471 066D                      u480 0672  
                    u481 0671                      u490 0678                      u395 05C2  
                    u491 0677                      fsr0 0004                      indf 0000  
    loadDisplay@numIndex 0075                     l1101 0616                     l1103 0618  
                   l1201 0596                     l1105 061C                     l1203 0555  
                   l1211 0559                     l1133 05AD                     l1301 0576  
                   l1213 0553                     l1205 0561                     l1221 06D9  
                   l1135 05F8                     l1151 0758                     l1303 0576  
                   l1207 0562                     l1223 06E3                     l1215 06BF  
                   l1231 058C                     l1137 05E7                     l1153 075F  
                   l1145 073F                     l1305 0578                     l1209 0564  
                   l1313 0568                     l1401 06A5                     l1161 05A3  
                   l1217 06CD                     l1225 0586                     l1241 077D  
                   l1233 0776                     l1155 0772                     l1147 0754  
                   l1139 073A                     l1307 057A                     l1315 056C  
                   l1331 0631                     l1323 061E                     l1411 06B0  
                   l1403 06A9                     l1171 059A                     l1163 05A5  
                   l1219 06D7                     l1227 0587                     l1251 0782  
                   l1243 077F                     l1235 077C                     l1091 060D  
                   l1149 0755                     l1309 057B                     l1341 06F8  
                   l1333 06E5                     l1317 05BB                     l1325 062C  
                   l1413 06B5                     l1405 06AD                     l1173 059B  
                   l1165 05A9                     l1229 058B                     l1261 0796  
                   l1253 078B                     l1245 0781                     l1421 07BD  
                   l1093 060F                     l1191 0737                     l1183 071B  
                   l1159 05C9                     l1351 0707                     l1343 06F9  
                   l1335 06E8                     l1319 05BF                     l1327 062D  
                   l1415 06B7                     l1407 06AE                     l1175 059F  
                   l1167 05AA                     l1271 07A9                     l1263 079C  
                   l1255 078D                     l1431 07CD                     l1423 07BE  
                   l1095 0610                     l1185 072C                     l1177 070E  
                   l1353 070A                     l1345 06FD                     l1337 06F4  
                   l1329 062F                     l1409 06AF                     l1281 0570  
                   l1169 0599                     l1273 07AB                     l1265 07A4  
                   l1257 078E                     l1361 064F                     l1441 07E5  
                   l1433 07D3                     l1425 07C3                     l1097 0612  
                   l1089 0609                     l1291 0638                     l1283 0635  
                   l1187 072D                     l1195 0590                     l1347 0700  
                   l1339 06F5                     l1275 07AF                     l1267 07A6  
                   l1259 0792                     l1435 07D6                     l1427 07C7  
                   l1419 07B7                     l1099 0614                     l1443 0667  
                   l1293 063D                     l1285 0637                     l1189 0731  
                   l1197 0591                     l1349 0703                     l1357 070C  
                   l1365 05D8                     l1277 07B5                     l1269 07A7  
                   l1381 068B                     l1373 0682                     l1437 07DC  
                   l1429 07C8                     l1453 067C                     l1445 0668  
                   l1295 0641                     l1199 0593                     l1279 056E  
                   l1391 0695                     l1383 068D                     l1375 0683  
                   l1367 055C                     l1439 07DF                     l1455 067D  
                   l1297 0645                     l1393 0697                     l1385 068F  
                   l1377 0687                     l1369 055E                     l1457 067E  
                   l1449 0672                     l1299 064B                     l1395 069A  
                   l1387 0691                     l1379 0689                     l1397 069C  
                   l1389 0693                     l1399 06A4          readByteRTC@data 0076  
                   _Init 069C                     _flag 007D                     _main 0667  
                   btemp 007E         __end_of_I2C_Stop 05F8             ?_loadDisplay 0070  
                   start 0000             ?_readDataRTC 0070          __end_of_InitI2C 0586  
       getTime@tensHours 0038             ?_readByteRTC 0070                    ?_Init 0070  
                  ?_main 0070                    _CMCON 001F     loadDisplay@tubeIndex 0074  
                  _PORTB 0006          __end_of_checkDP 06E5                    _TRISA 0085  
                  _TRISB 0086        passTubeNum@tmpLDP 0031        passTubeNum@tmpRDP 0032  
   __end_of_isRTCRunning 05C9          __end_of_getTime 07F9             _I2C_ReadByte 070E  
        __end_of_display 0575                    _latch 0586             _I2C_SendNACK 05C9  
      __end_of_I2C_Start 05BB                    status 0003                    wtemp0 007E  
       ??_send0ToDrivers 0070             ?_passTubeNum 002A         ??_send1ToDrivers 0070  
        __initialization 07F9             __end_of_Init 06BE             __end_of_main 0681  
                 ??_Init 0079                   ??_main 0079             ?_reqWriteRTC 0070  
           _writeDataRTC 0558                   ?_latch 0070             _writeByteRTC 0567  
       checkRTCType@data 0078                ??_InitI2C 0070     getTime@singleMinutes 0034  
   getTime@singleSeconds 0033        reqReadRTC@address 0074                   _leftDP 007A  
              ??_checkDP 0070           loadDisplay@LDP 0076           loadDisplay@RDP 0077  
              ??_getTime 0079             _checkRTCType 06E5                ??_display 0070  
              ?_I2C_Stop 0070         __end_of_startRTC 0635  __end_of__initialization 07FE  
         __pcstackBANK0h 002A           __pcstackCOMMON 0070            _I2C_WriteByte 0739  
           ?_swapNibbles 0070            __end_of_latch 058F       getTime@tensMinutes 0037  
     getTime@tensSeconds 0036               ??_I2C_Stop 0070       getTime@singleHours 0035  
                ??_latch 0070               _blankTubes 0635               _endReadRTC 0555  
           _isRTCRunning 05BB               __pmaintext 0667           ?_I2C_WriteByte 0070  
       writeDataRTC@data 0074          swapNibbles@data 0073            ??_I2C_ReStart 0070  
          ??_I2C_SendACK 0070       readByteRTC@address 0075                  _InitI2C 057D  
              _I2C_Start 05AD         I2C_ReadByte@Data 0071                ?_startRTC 0070  
                _checkDP 06BE                  __ptext0 0000                  __ptext1 0609  
                __ptext2 07B7                  __ptext3 064E                  _getTime 07B7  
                __ptext4 055C                  __ptext5 0681                  __ptext6 0776  
                __ptext7 0586                  __ptext8 06BE                  __ptext9 05A3  
                _display 056E               _reqReadRTC 058F                  _rightDP 0079  
    __end_of_I2C_ReStart 0609      __end_of_I2C_SendACK 05E7        __end_of_preLoadWL 061E  
   end_of_initialization 07FE            blankTubes@ptr 0070              ?_blankTubes 0070  
             ?_I2C_Start 0070          ??_I2C_WriteByte 0070              ?_endReadRTC 0070  
             ??_startRTC 0075                _PORTAbits 0005            ??_endWriteRTC 0070  
              _TRISAbits 0085       reqWriteRTC@address 0074       loadDisplay@dispNum 0072  
     loadDisplay@tubePtr 0073      writeByteRTC@address 0076              _I2C_ReStart 05F8  
            _I2C_SendACK 05D8              ?_reqReadRTC 0070      start_initialization 07F9  
    __end_of_endWriteRTC 0555            ??_loadDisplay 0072              ??_I2C_Start 0070  
          ??_readDataRTC 0073            ??_readByteRTC 0075           I2C_WriteByte@i 0073  
            __pbssCOMMON 0079                ___latbits 0000            ?_I2C_ReadByte 0070  
          ?_I2C_SendNACK 0070                 ?_InitI2C 0070            ??_passTubeNum 0078  
          I2C_ReadByte@i 0072      __end_of_loadDisplay 07B7                 ?_checkDP 0070  
    __end_of_readDataRTC 0560                 ?_getTime 0070                 ?_display 0070  
              checkDP@DP 0071         writeByteRTC@data 0075          readDataRTC@data 0073  
          ??_reqWriteRTC 0074            ?_writeDataRTC 0070      __end_of_readByteRTC 057D  
            _endWriteRTC 0553                 _I2C_Stop 05E7           ??_I2C_ReadByte 0070  
         ??_I2C_SendNACK 0070            ?_writeByteRTC 0075                _preLoadWL 0609  
           ??_blankTubes 0070             ??_endReadRTC 0070           _send0ToDrivers 0599  
    __end_of_passTubeNum 069C            ?_checkRTCType 0070           _send1ToDrivers 05A3  
         ??_writeDataRTC 0074         isRTCRunning@data 0076       __end_of_blankTubes 064E  
         getTime@minutes 003A           getTime@seconds 0039           ??_writeByteRTC 0076  
     __end_of_endReadRTC 0558          passTubeNum@tmp0 0030          passTubeNum@tmp1 002F  
        passTubeNum@tmp2 002E          passTubeNum@tmp3 002D          passTubeNum@tmp4 002C  
        passTubeNum@tmp5 002B          passTubeNum@tmp6 002A          passTubeNum@tmp7 0078  
    __end_of_reqWriteRTC 0567               ?_preLoadWL 0070              _loadDisplay 0776  
  __end_of_I2C_WriteByte 0776              _readDataRTC 055C   __end_of_send0ToDrivers 05A3  
          ??_swapNibbles 0070              _readByteRTC 0575   __end_of_send1ToDrivers 05AD  
         ??_checkRTCType 0077             ?_I2C_ReStart 0070             ?_I2C_SendACK 0070  
           ??_reqReadRTC 0074                 __ptext10 0599                 __ptext11 056E  
               __ptext20 0553                 __ptext12 05D8                 __ptext21 0575  
               __ptext13 069C                 __ptext30 0635                 __ptext22 058F  
               __ptext14 061E                 __ptext31 057D                 __ptext23 0739  
               __ptext15 05BB                 __ptext24 05AD                 __ptext16 06E5  
               __ptext25 05F8                 __ptext17 0567                 __ptext26 0555  
               __ptext18 0558                 __ptext27 05E7                 __ptext19 0560  
               __ptext28 05C9                 __ptext29 070E             _PORTA_SHADOW 007C  
           _PORTB_SHADOW 007B              blankTubes@i 0071            ?_isRTCRunning 0070  
            _passTubeNum 0681     __end_of_I2C_ReadByte 0739       __end_of_reqReadRTC 0599  
   __end_of_I2C_SendNACK 05D8          ?_send0ToDrivers 0070                 _startRTC 061E  
        ?_send1ToDrivers 0070      __end_of_swapNibbles 0667              _reqWriteRTC 0560  
            ??_preLoadWL 0070           ??_isRTCRunning 0075     __end_of_writeDataRTC 055C  
   __end_of_writeByteRTC 056E             getTime@hours 003B               _OPTION_REG 0081  
           ?_endWriteRTC 0070     __end_of_checkRTCType 070E        I2C_WriteByte@Data 0072  
