

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Nov 03 17:02:32 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	nvBANK0hhh,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0hhh,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK0l,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0hhh,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    61                           	dabs	1,0x27,1,_T5
    62                           	dabs	1,0x24,1,_T2
    63                           	dabs	1,0x28,1,_T6
    64                           	dabs	1,0x26,1,_T4
    65                           	dabs	1,0x25,1,_T3
    66                           	dabs	1,0x23,1,_T1
    67                           	dabs	1,0x22,1,_T0
    68                           	dabs	1,0x29,1,_T7
    69                           	dabs	1,0x7E,2
    70     0000                     
    71                           ; Generated 12/10/2023 GMT
    72                           ; 
    73                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC16F628A Definitions
   103                           ; 
   104                           ; SFR Addresses
   105     0000                     	;# 
   106     0001                     	;# 
   107     0002                     	;# 
   108     0003                     	;# 
   109     0004                     	;# 
   110     0005                     	;# 
   111     0006                     	;# 
   112     000A                     	;# 
   113     000B                     	;# 
   114     000C                     	;# 
   115     000E                     	;# 
   116     000E                     	;# 
   117     000F                     	;# 
   118     0010                     	;# 
   119     0011                     	;# 
   120     0012                     	;# 
   121     0015                     	;# 
   122     0015                     	;# 
   123     0016                     	;# 
   124     0017                     	;# 
   125     0018                     	;# 
   126     0019                     	;# 
   127     001A                     	;# 
   128     001F                     	;# 
   129     0081                     	;# 
   130     0085                     	;# 
   131     0086                     	;# 
   132     008C                     	;# 
   133     008E                     	;# 
   134     0092                     	;# 
   135     0098                     	;# 
   136     0099                     	;# 
   137     009A                     	;# 
   138     009B                     	;# 
   139     009C                     	;# 
   140     009D                     	;# 
   141     009F                     	;# 
   142     0000                     	;# 
   143     0001                     	;# 
   144     0002                     	;# 
   145     0003                     	;# 
   146     0004                     	;# 
   147     0005                     	;# 
   148     0006                     	;# 
   149     000A                     	;# 
   150     000B                     	;# 
   151     000C                     	;# 
   152     000E                     	;# 
   153     000E                     	;# 
   154     000F                     	;# 
   155     0010                     	;# 
   156     0011                     	;# 
   157     0012                     	;# 
   158     0015                     	;# 
   159     0015                     	;# 
   160     0016                     	;# 
   161     0017                     	;# 
   162     0018                     	;# 
   163     0019                     	;# 
   164     001A                     	;# 
   165     001F                     	;# 
   166     0081                     	;# 
   167     0085                     	;# 
   168     0086                     	;# 
   169     008C                     	;# 
   170     008E                     	;# 
   171     0092                     	;# 
   172     0098                     	;# 
   173     0099                     	;# 
   174     009A                     	;# 
   175     009B                     	;# 
   176     009C                     	;# 
   177     009D                     	;# 
   178     009F                     	;# 
   179     0000                     	;# 
   180     0001                     	;# 
   181     0002                     	;# 
   182     0003                     	;# 
   183     0004                     	;# 
   184     0005                     	;# 
   185     0006                     	;# 
   186     000A                     	;# 
   187     000B                     	;# 
   188     000C                     	;# 
   189     000E                     	;# 
   190     000E                     	;# 
   191     000F                     	;# 
   192     0010                     	;# 
   193     0011                     	;# 
   194     0012                     	;# 
   195     0015                     	;# 
   196     0015                     	;# 
   197     0016                     	;# 
   198     0017                     	;# 
   199     0018                     	;# 
   200     0019                     	;# 
   201     001A                     	;# 
   202     001F                     	;# 
   203     0081                     	;# 
   204     0085                     	;# 
   205     0086                     	;# 
   206     008C                     	;# 
   207     008E                     	;# 
   208     0092                     	;# 
   209     0098                     	;# 
   210     0099                     	;# 
   211     009A                     	;# 
   212     009B                     	;# 
   213     009C                     	;# 
   214     009D                     	;# 
   215     009F                     	;# 
   216     0000                     	;# 
   217     0001                     	;# 
   218     0002                     	;# 
   219     0003                     	;# 
   220     0004                     	;# 
   221     0005                     	;# 
   222     0006                     	;# 
   223     000A                     	;# 
   224     000B                     	;# 
   225     000C                     	;# 
   226     000E                     	;# 
   227     000E                     	;# 
   228     000F                     	;# 
   229     0010                     	;# 
   230     0011                     	;# 
   231     0012                     	;# 
   232     0015                     	;# 
   233     0015                     	;# 
   234     0016                     	;# 
   235     0017                     	;# 
   236     0018                     	;# 
   237     0019                     	;# 
   238     001A                     	;# 
   239     001F                     	;# 
   240     0081                     	;# 
   241     0085                     	;# 
   242     0086                     	;# 
   243     008C                     	;# 
   244     008E                     	;# 
   245     0092                     	;# 
   246     0098                     	;# 
   247     0099                     	;# 
   248     009A                     	;# 
   249     009B                     	;# 
   250     009C                     	;# 
   251     009D                     	;# 
   252     009F                     	;# 
   253     0000                     	;# 
   254     0001                     	;# 
   255     0002                     	;# 
   256     0003                     	;# 
   257     0004                     	;# 
   258     0005                     	;# 
   259     0006                     	;# 
   260     000A                     	;# 
   261     000B                     	;# 
   262     000C                     	;# 
   263     000E                     	;# 
   264     000E                     	;# 
   265     000F                     	;# 
   266     0010                     	;# 
   267     0011                     	;# 
   268     0012                     	;# 
   269     0015                     	;# 
   270     0015                     	;# 
   271     0016                     	;# 
   272     0017                     	;# 
   273     0018                     	;# 
   274     0019                     	;# 
   275     001A                     	;# 
   276     001F                     	;# 
   277     0081                     	;# 
   278     0085                     	;# 
   279     0086                     	;# 
   280     008C                     	;# 
   281     008E                     	;# 
   282     0092                     	;# 
   283     0098                     	;# 
   284     0099                     	;# 
   285     009A                     	;# 
   286     009B                     	;# 
   287     009C                     	;# 
   288     009D                     	;# 
   289     009F                     	;# 
   290     0000                     	;# 
   291     0001                     	;# 
   292     0002                     	;# 
   293     0003                     	;# 
   294     0004                     	;# 
   295     0005                     	;# 
   296     0006                     	;# 
   297     000A                     	;# 
   298     000B                     	;# 
   299     000C                     	;# 
   300     000E                     	;# 
   301     000E                     	;# 
   302     000F                     	;# 
   303     0010                     	;# 
   304     0011                     	;# 
   305     0012                     	;# 
   306     0015                     	;# 
   307     0015                     	;# 
   308     0016                     	;# 
   309     0017                     	;# 
   310     0018                     	;# 
   311     0019                     	;# 
   312     001A                     	;# 
   313     001F                     	;# 
   314     0081                     	;# 
   315     0085                     	;# 
   316     0086                     	;# 
   317     008C                     	;# 
   318     008E                     	;# 
   319     0092                     	;# 
   320     0098                     	;# 
   321     0099                     	;# 
   322     009A                     	;# 
   323     009B                     	;# 
   324     009C                     	;# 
   325     009D                     	;# 
   326     009F                     	;# 
   327                           
   328                           	psect	text0
   329     0000                     __ptext0:
   330     0005                     _PORTAbits	set	5
   331     0006                     _PORTB	set	6
   332     001F                     _CMCON	set	31
   333     0085                     _TRISAbits	set	133
   334     0081                     _OPTION_REG	set	129
   335     0086                     _TRISB	set	134
   336     0085                     _TRISA	set	133
   337                           
   338                           	psect	nvBANK0hhh
   339     0036                     __pnvBANK0hhh:
   340     0036                     _Flag:
   341     0036                     	ds	1
   342                           
   343                           	psect	cinit
   344     07F0                     start_initialization:	
   345                           ; #config settings
   346                           
   347     07F0                     __initialization:
   348                           
   349                           ; Clear objects allocated to BANK0hhh
   350     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   351     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   352     07F2  01B0               	clrf	__pbssBANK0hhh& (0+127)
   353     07F3  01B1               	clrf	(__pbssBANK0hhh+1)& (0+127)
   354     07F4  01B2               	clrf	(__pbssBANK0hhh+2)& (0+127)
   355     07F5  01B3               	clrf	(__pbssBANK0hhh+3)& (0+127)
   356                           
   357                           ; Clear objects allocated to BANK0l
   358     07F6  01B4               	clrf	__pbssBANK0l& (0+127)
   359     07F7  01B5               	clrf	(__pbssBANK0l+1)& (0+127)
   360                           
   361                           ; Clear objects allocated to BANK1
   362     07F8  1683               	bsf	3,5	;RP0=1, select bank1
   363     07F9  01A0               	clrf	__pbssBANK1& (0+127)
   364     07FA  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   365     07FB  01A2               	clrf	(__pbssBANK1+2)& (0+127)
   366     07FC  01A3               	clrf	(__pbssBANK1+3)& (0+127)
   367     07FD  01A4               	clrf	(__pbssBANK1+4)& (0+127)
   368     07FE                     end_of_initialization:	
   369                           ;End of C runtime variable initialization code
   370                           
   371     07FE                     __end_of__initialization:
   372     07FE  0183               	clrf	3
   373     07FF  2E43               	ljmp	_main	;jump to C main() function
   374                           
   375                           	psect	bssBANK0hhh
   376     0030                     __pbssBANK0hhh:
   377     0030                     _oldSeconds:
   378     0030                     	ds	1
   379     0031                     _rightDP:
   380     0031                     	ds	1
   381     0032                     _leftDP:
   382     0032                     	ds	1
   383     0033                     _ErrFlag:
   384     0033                     	ds	1
   385                           
   386                           	psect	bssBANK0l
   387     0034                     __pbssBANK0l:
   388     0034                     _blankStart:
   389     0034                     	ds	1
   390     0035                     _PORTB_SHADOW:
   391     0035                     	ds	1
   392                           
   393                           	psect	bssBANK1
   394     00A0                     __pbssBANK1:
   395     00A0                     _incMax:
   396     00A0                     	ds	1
   397     00A1                     _incMin:
   398     00A1                     	ds	1
   399     00A2                     _blankEnd:
   400     00A2                     	ds	1
   401     00A3                     _PORTA_SHADOW:
   402     00A3                     	ds	1
   403     00A4                     _Flag2:
   404     00A4                     	ds	1
   405                           
   406                           	psect	cstackCOMMON
   407     0070                     __pcstackCOMMON:
   408     0070                     ?_isRTCRunning:
   409     0070                     ?_checkRTCType:	
   410                           ; 1 bit 
   411                           
   412     0070                     ?_Init:	
   413                           ; 1 bit 
   414                           
   415     0070                     ?_preLoadWL:	
   416                           ; 1 bytes @ 0x0
   417                           
   418     0070                     ??_preLoadWL:	
   419                           ; 1 bytes @ 0x0
   420                           
   421     0070                     ?_loadDisplay:	
   422                           ; 1 bytes @ 0x0
   423                           
   424     0070                     ?_settingsMenu:	
   425                           ; 1 bytes @ 0x0
   426                           
   427     0070                     ?_getTime:	
   428                           ; 1 bytes @ 0x0
   429                           
   430     0070                     ?_buttons:	
   431                           ; 1 bytes @ 0x0
   432                           
   433     0070                     ??_buttons:	
   434                           ; 1 bytes @ 0x0
   435                           
   436     0070                     ?_displayError:	
   437                           ; 1 bytes @ 0x0
   438                           
   439     0070                     ?_InitI2C:	
   440                           ; 1 bytes @ 0x0
   441                           
   442     0070                     ??_InitI2C:	
   443                           ; 1 bytes @ 0x0
   444                           
   445     0070                     ?_InitTubes:	
   446                           ; 1 bytes @ 0x0
   447                           
   448     0070                     ?_startRTC:	
   449                           ; 1 bytes @ 0x0
   450                           
   451     0070                     ?_getDate:	
   452                           ; 1 bytes @ 0x0
   453                           
   454     0070                     ?_blankTubes:	
   455                           ; 1 bytes @ 0x0
   456                           
   457     0070                     ??_blankTubes:	
   458                           ; 1 bytes @ 0x0
   459                           
   460     0070                     ?_display:	
   461                           ; 1 bytes @ 0x0
   462                           
   463     0070                     ??_display:	
   464                           ; 1 bytes @ 0x0
   465                           
   466     0070                     ?_checkDP:	
   467                           ; 1 bytes @ 0x0
   468                           
   469     0070                     ??_checkDP:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0070                     ?_send1ToDrivers:	
   473                           ; 1 bytes @ 0x0
   474                           
   475     0070                     ??_send1ToDrivers:	
   476                           ; 1 bytes @ 0x0
   477                           
   478     0070                     ?_send0ToDrivers:	
   479                           ; 1 bytes @ 0x0
   480                           
   481     0070                     ??_send0ToDrivers:	
   482                           ; 1 bytes @ 0x0
   483                           
   484     0070                     ?_latch:	
   485                           ; 1 bytes @ 0x0
   486                           
   487     0070                     ??_latch:	
   488                           ; 1 bytes @ 0x0
   489                           
   490     0070                     ?_hourFormatSetting:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0070                     ?_hoursSetting:	
   494                           ; 1 bytes @ 0x0
   495                           
   496     0070                     ?_minuteSetting:	
   497                           ; 1 bytes @ 0x0
   498                           
   499     0070                     ?_blankingSetting:	
   500                           ; 1 bytes @ 0x0
   501                           
   502     0070                     ?_unblankingSetting:	
   503                           ; 1 bytes @ 0x0
   504                           
   505     0070                     ?_timeAdjSetting:	
   506                           ; 1 bytes @ 0x0
   507                           
   508     0070                     ??_timeAdjSetting:	
   509                           ; 1 bytes @ 0x0
   510                           
   511     0070                     ?_daySetting:	
   512                           ; 1 bytes @ 0x0
   513                           
   514     0070                     ?_monthSetting:	
   515                           ; 1 bytes @ 0x0
   516                           
   517     0070                     ?_yearSetting:	
   518                           ; 1 bytes @ 0x0
   519                           
   520     0070                     ?_dateFormatSetting:	
   521                           ; 1 bytes @ 0x0
   522                           
   523     0070                     ?_brightnessSetting:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0070                     ??_brightnessSetting:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0070                     ?_incDecBCD:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0070                     ??_incDecBCD:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     ?_main:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0070                     ?_swapNibbles:	
   539                           ; 1 bytes @ 0x0
   540                           
   541     0070                     ??_swapNibbles:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0070                     ?_I2C_Start:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0070                     ??_I2C_Start:	
   548                           ; 1 bytes @ 0x0
   549                           
   550     0070                     ?_I2C_ReStart:	
   551                           ; 1 bytes @ 0x0
   552                           
   553     0070                     ??_I2C_ReStart:	
   554                           ; 1 bytes @ 0x0
   555                           
   556     0070                     ?_I2C_Stop:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0070                     ??_I2C_Stop:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?_I2C_WriteByte:	
   563                           ; 1 bytes @ 0x0
   564                           
   565     0070                     ??_I2C_WriteByte:	
   566                           ; 1 bytes @ 0x0
   567                           
   568     0070                     ?_I2C_ReadByte:	
   569                           ; 1 bytes @ 0x0
   570                           
   571     0070                     ??_I2C_ReadByte:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     ?_I2C_SendACK:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ??_I2C_SendACK:	
   578                           ; 1 bytes @ 0x0
   579                           
   580     0070                     ?_I2C_SendNACK:	
   581                           ; 1 bytes @ 0x0
   582                           
   583     0070                     ??_I2C_SendNACK:	
   584                           ; 1 bytes @ 0x0
   585                           
   586     0070                     ?_reqReadRTC:	
   587                           ; 1 bytes @ 0x0
   588                           
   589     0070                     ?_readDataRTC:	
   590                           ; 1 bytes @ 0x0
   591                           
   592     0070                     ?_endReadRTC:	
   593                           ; 1 bytes @ 0x0
   594                           
   595     0070                     ??_endReadRTC:	
   596                           ; 1 bytes @ 0x0
   597                           
   598     0070                     ?_readByteRTC:	
   599                           ; 1 bytes @ 0x0
   600                           
   601     0070                     ?_reqWriteRTC:	
   602                           ; 1 bytes @ 0x0
   603                           
   604     0070                     ?_writeDataRTC:	
   605                           ; 1 bytes @ 0x0
   606                           
   607     0070                     ?_endWriteRTC:	
   608                           ; 1 bytes @ 0x0
   609                           
   610     0070                     ??_endWriteRTC:	
   611                           ; 1 bytes @ 0x0
   612                           
   613     0070                     blankTubes@ptr:	
   614                           ; 1 bytes @ 0x0
   615                           
   616                           
   617                           ; 1 bytes @ 0x0
   618     0070                     	ds	1
   619     0071                     I2C_WriteByte@Data:
   620     0071                     I2C_ReadByte@data:	
   621                           ; 1 bytes @ 0x1
   622                           
   623     0071                     checkDP@DP:	
   624                           ; 1 bytes @ 0x1
   625                           
   626     0071                     blankTubes@i:	
   627                           ; 1 bytes @ 0x1
   628                           
   629     0071                     buttons@timer:	
   630                           ; 1 bytes @ 0x1
   631                           
   632                           
   633                           ; 2 bytes @ 0x1
   634     0071                     	ds	1
   635     0072                     ??_loadDisplay:
   636     0072                     I2C_WriteByte@timer:	
   637                           ; 1 bytes @ 0x2
   638                           
   639     0072                     I2C_ReadByte@i:	
   640                           ; 1 bytes @ 0x2
   641                           
   642     0072                     loadDisplay@dispNum:	
   643                           ; 1 bytes @ 0x2
   644                           
   645                           
   646                           ; 1 bytes @ 0x2
   647     0072                     	ds	1
   648     0073                     ??_readDataRTC:
   649     0073                     swapNibbles@data:	
   650                           ; 1 bytes @ 0x3
   651                           
   652     0073                     I2C_WriteByte@i:	
   653                           ; 1 bytes @ 0x3
   654                           
   655     0073                     readDataRTC@data:	
   656                           ; 1 bytes @ 0x3
   657                           
   658     0073                     loadDisplay@tubePtr:	
   659                           ; 1 bytes @ 0x3
   660                           
   661                           
   662                           ; 1 bytes @ 0x3
   663     0073                     	ds	1
   664     0074                     ??_reqReadRTC:
   665     0074                     ??_reqWriteRTC:	
   666                           ; 1 bytes @ 0x4
   667                           
   668     0074                     ??_writeDataRTC:	
   669                           ; 1 bytes @ 0x4
   670                           
   671     0074                     reqReadRTC@address:	
   672                           ; 1 bytes @ 0x4
   673                           
   674     0074                     reqWriteRTC@address:	
   675                           ; 1 bytes @ 0x4
   676                           
   677     0074                     writeDataRTC@data:	
   678                           ; 1 bytes @ 0x4
   679                           
   680     0074                     loadDisplay@tubeIndex:	
   681                           ; 1 bytes @ 0x4
   682                           
   683                           
   684                           ; 1 bytes @ 0x4
   685     0074                     	ds	1
   686     0075                     ??_readByteRTC:
   687     0075                     ?_writeByteRTC:	
   688                           ; 1 bytes @ 0x5
   689                           
   690     0075                     readByteRTC@address:	
   691                           ; 1 bytes @ 0x5
   692                           
   693     0075                     writeByteRTC@data:	
   694                           ; 1 bytes @ 0x5
   695                           
   696     0075                     loadDisplay@numIndex:	
   697                           ; 1 bytes @ 0x5
   698                           
   699                           
   700                           ; 1 bytes @ 0x5
   701     0075                     	ds	1
   702     0076                     ??_writeByteRTC:
   703     0076                     readByteRTC@data:	
   704                           ; 1 bytes @ 0x6
   705                           
   706     0076                     writeByteRTC@address:	
   707                           ; 1 bytes @ 0x6
   708                           
   709     0076                     loadDisplay@LDP:	
   710                           ; 1 bytes @ 0x6
   711                           
   712                           
   713                           ; 1 bytes @ 0x6
   714     0076                     	ds	1
   715     0077                     ??_isRTCRunning:
   716     0077                     ??_checkRTCType:	
   717                           ; 1 bytes @ 0x7
   718                           
   719     0077                     loadDisplay@RDP:	
   720                           ; 1 bytes @ 0x7
   721                           
   722                           
   723                           ; 1 bytes @ 0x7
   724     0077                     	ds	1
   725     0078                     ??_displayError:
   726     0078                     ??_InitTubes:	
   727                           ; 1 bytes @ 0x8
   728                           
   729     0078                     ??_getDate:	
   730                           ; 1 bytes @ 0x8
   731                           
   732     0078                     ??_hourFormatSetting:	
   733                           ; 1 bytes @ 0x8
   734                           
   735     0078                     ??_hoursSetting:	
   736                           ; 1 bytes @ 0x8
   737                           
   738     0078                     ??_minuteSetting:	
   739                           ; 1 bytes @ 0x8
   740                           
   741     0078                     ??_blankingSetting:	
   742                           ; 1 bytes @ 0x8
   743                           
   744     0078                     ??_unblankingSetting:	
   745                           ; 1 bytes @ 0x8
   746                           
   747     0078                     ??_daySetting:	
   748                           ; 1 bytes @ 0x8
   749                           
   750     0078                     ??_monthSetting:	
   751                           ; 1 bytes @ 0x8
   752                           
   753     0078                     ??_yearSetting:	
   754                           ; 1 bytes @ 0x8
   755                           
   756     0078                     ??_dateFormatSetting:	
   757                           ; 1 bytes @ 0x8
   758                           
   759     0078                     isRTCRunning@data:	
   760                           ; 1 bytes @ 0x8
   761                           
   762     0078                     checkRTCType@data:	
   763                           ; 1 bytes @ 0x8
   764                           
   765     0078                     getDate@day:	
   766                           ; 1 bytes @ 0x8
   767                           
   768                           
   769                           ; 1 bytes @ 0x8
   770     0078                     	ds	1
   771     0079                     ??_startRTC:
   772     0079                     getDate@month:	
   773                           ; 1 bytes @ 0x9
   774                           
   775     0079                     hoursSetting@hours:	
   776                           ; 1 bytes @ 0x9
   777                           
   778     0079                     minuteSetting@minutes:	
   779                           ; 1 bytes @ 0x9
   780                           
   781     0079                     daySetting@day:	
   782                           ; 1 bytes @ 0x9
   783                           
   784     0079                     monthSetting@month:	
   785                           ; 1 bytes @ 0x9
   786                           
   787     0079                     yearSetting@year:	
   788                           ; 1 bytes @ 0x9
   789                           
   790                           
   791                           ; 1 bytes @ 0x9
   792     0079                     	ds	1
   793     007A                     ??_settingsMenu:
   794     007A                     startRTC@clockTest:	
   795                           ; 1 bytes @ 0xA
   796                           
   797     007A                     getDate@year:	
   798                           ; 1 bytes @ 0xA
   799                           
   800                           
   801                           ; 1 bytes @ 0xA
   802     007A                     	ds	1
   803     007B                     ??_getTime:
   804     007B                     startRTC@RTCaddress:	
   805                           ; 1 bytes @ 0xB
   806                           
   807                           
   808                           ; 1 bytes @ 0xB
   809     007B                     	ds	1
   810     007C                     ??_Init:
   811     007C                     settingsMenu@menu:	
   812                           ; 1 bytes @ 0xC
   813                           
   814                           
   815                           ; 1 bytes @ 0xC
   816     007C                     	ds	2
   817                           
   818                           	psect	cstackBANK0hhh
   819     002A                     __pcstackBANK0hhh:
   820     002A                     getTime@minutes:
   821                           
   822                           ; 1 bytes @ 0x0
   823     002A                     	ds	1
   824     002B                     getTime@hours:
   825                           
   826                           ; 1 bytes @ 0x1
   827     002B                     	ds	1
   828     002C                     getTime@seconds:
   829                           
   830                           ; 1 bytes @ 0x2
   831     002C                     	ds	1
   832     002D                     ??_main:
   833                           
   834                           ; 1 bytes @ 0x3
   835     002D                     	ds	3
   836                           
   837                           	psect	maintext
   838     0643                     __pmaintext:	
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 41 in file "main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  btn             1    0        unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : B00/0
   855 ;;		On exit  : 300/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
   858 ;;      Params:         0       0       0       0       0
   859 ;;      Locals:         0       0       0       0       0
   860 ;;      Temps:          0       3       0       0       0
   861 ;;      Totals:         0       3       0       0       0
   862 ;;Total ram usage:        3 bytes
   863 ;; Hardware stack levels required when called: 6
   864 ;; This function calls:
   865 ;;		_Init
   866 ;;		_buttons
   867 ;;		_displayError
   868 ;;		_getTime
   869 ;;		_loadDisplay
   870 ;;		_preLoadWL
   871 ;;		_settingsMenu
   872 ;; This function is called by:
   873 ;;		Startup code after reset
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877     0643                     _main:	
   878                           ;psect for function _main
   879                           
   880                           
   881                           ;main.c: 42:     Init();
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   885     0643  2410               	fcall	_Init
   886     0644  2E55               	goto	l2337
   887     0645                     l2339:
   888                           
   889                           ;main.c: 46:             preLoadWL();
   890     0645  23B6               	fcall	_preLoadWL
   891                           
   892                           ;main.c: 47:             loadDisplay();
   893     0646  2675               	fcall	_loadDisplay
   894                           
   895                           ;main.c: 48:             _delay((unsigned long)((4000)*(4000000/4000.0)));
   896     0647  3015               	movlw	21
   897     0648  1283               	bcf	3,5	;RP0=0, select bank0
   898     0649  1303               	bcf	3,6	;RP1=0, select bank0
   899     064A  00AF               	movwf	??_main+2
   900     064B  304B               	movlw	75
   901     064C  00AE               	movwf	??_main+1
   902     064D  30BE               	movlw	190
   903     064E  00AD               	movwf	??_main
   904     064F                     u1437:
   905     064F  0BAD               	decfsz	??_main,f
   906     0650  2E4F               	goto	u1437
   907     0651  0BAE               	decfsz	??_main+1,f
   908     0652  2E4F               	goto	u1437
   909     0653  0BAF               	decfsz	??_main+2,f
   910     0654  2E4F               	goto	u1437
   911     0655                     l2337:
   912                           
   913                           ;main.c: 45:         if (((Flag)>>(0) & 1)) {
   914     0655  1283               	bcf	3,5	;RP0=0, select bank0
   915     0656  1303               	bcf	3,6	;RP1=0, select bank0
   916     0657  1836               	btfsc	_Flag,0
   917     0658  2E45               	goto	l2339
   918     0659  0836               	movf	_Flag,w
   919     065A  00AD               	movwf	??_main
   920     065B  3002               	movlw	2
   921     065C                     u1395:
   922     065C  1003               	clrc
   923     065D  0CAD               	rrf	??_main,f
   924     065E  3EFF               	addlw	-1
   925     065F  1D03               	skipz
   926     0660  2E5C               	goto	u1395
   927     0661  1C2D               	btfss	??_main,0
   928     0662  2E66               	goto	l2353
   929                           
   930                           ;main.c: 51:             settingsMenu(0);
   931     0663  3000               	movlw	0
   932     0664  251F               	fcall	_settingsMenu
   933     0665  2E55               	goto	l2337
   934     0666                     l2353:
   935                           
   936                           ;main.c: 57:             if(!(((ErrFlag)>>(1) & 1))) {
   937     0666  0833               	movf	_ErrFlag,w
   938     0667  00AD               	movwf	??_main
   939     0668  3001               	movlw	1
   940     0669                     u1415:
   941     0669  1003               	clrc
   942     066A  0CAD               	rrf	??_main,f
   943     066B  3EFF               	addlw	-1
   944     066C  1D03               	skipz
   945     066D  2E69               	goto	u1415
   946     066E  182D               	btfsc	??_main,0
   947     066F  2E73               	goto	l2359
   948                           
   949                           ;main.c: 58:                 getTime();
   950     0670  2786               	fcall	_getTime
   951                           
   952                           ;main.c: 59:                 buttons();
   953     0671  26F4               	fcall	_buttons
   954                           
   955                           ;main.c: 60:             } else {
   956     0672  2E55               	goto	l2337
   957     0673                     l2359:
   958                           
   959                           ;main.c: 61:                 displayError();
   960     0673  23E0               	fcall	_displayError
   961     0674  2E55               	goto	l2337
   962     0675                     __end_of_main:
   963                           
   964                           	psect	text1
   965     051F                     __ptext1:	
   966 ;; *************** function _settingsMenu *****************
   967 ;; Defined at:
   968 ;;		line 11 in file "settings.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  menu            1    wreg     unsigned char 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  menu            1   12[COMMON] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 300/0
   979 ;;		On exit  : 300/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
   982 ;;      Params:         0       0       0       0       0
   983 ;;      Locals:         1       0       0       0       0
   984 ;;      Temps:          2       0       0       0       0
   985 ;;      Totals:         3       0       0       0       0
   986 ;;Total ram usage:        3 bytes
   987 ;; Hardware stack levels used: 1
   988 ;; Hardware stack levels required when called: 4
   989 ;; This function calls:
   990 ;;		_blankingSetting
   991 ;;		_brightnessSetting
   992 ;;		_dateFormatSetting
   993 ;;		_daySetting
   994 ;;		_hourFormatSetting
   995 ;;		_hoursSetting
   996 ;;		_minuteSetting
   997 ;;		_monthSetting
   998 ;;		_timeAdjSetting
   999 ;;		_unblankingSetting
  1000 ;;		_yearSetting
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006     051F                     _settingsMenu:	
  1007                           ;psect for function _settingsMenu
  1008                           
  1009                           
  1010                           ;incstack = 0
  1011                           ; Regs used in _settingsMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1012                           ;settingsMenu@menu stored from wreg
  1013     051F  00FC               	movwf	settingsMenu@menu
  1014                           
  1015                           ;settings.c: 12:     switch(menu) {
  1016     0520  2D2D               	goto	l2271
  1017     0521                     l2255:
  1018                           
  1019                           ;settings.c: 15:             hourFormatSetting();
  1020     0521  25E3               	fcall	_hourFormatSetting
  1021                           
  1022                           ;settings.c: 16:             hoursSetting();
  1023     0522  2497               	fcall	_hoursSetting
  1024                           
  1025                           ;settings.c: 17:             minuteSetting();
  1026     0523  24B9               	fcall	_minuteSetting
  1027                           
  1028                           ;settings.c: 18:             blankingSetting();
  1029     0524  2431               	fcall	_blankingSetting
  1030                           
  1031                           ;settings.c: 19:             unblankingSetting();
  1032     0525  2566               	fcall	_unblankingSetting
  1033                           
  1034                           ;settings.c: 20:             timeAdjSetting();
  1035     0526  22FA               	fcall	_timeAdjSetting
  1036     0527                     l2259:
  1037                           
  1038                           ;settings.c: 23:             daySetting();
  1039     0527  2475               	fcall	_daySetting
  1040                           
  1041                           ;settings.c: 24:             monthSetting();
  1042     0528  24DB               	fcall	_monthSetting
  1043                           
  1044                           ;settings.c: 25:             yearSetting();
  1045     0529  24FD               	fcall	_yearSetting
  1046                           
  1047                           ;settings.c: 26:             dateFormatSetting();
  1048     052A  2453               	fcall	_dateFormatSetting
  1049     052B                     l2267:
  1050                           
  1051                           ;settings.c: 28:             brightnessSetting();
  1052     052B  22F9               	fcall	_brightnessSetting
  1053     052C  0008               	return
  1054     052D                     l2271:
  1055     052D  087C               	movf	settingsMenu@menu,w
  1056     052E  00FA               	movwf	??_settingsMenu
  1057     052F  01FB               	clrf	??_settingsMenu+1
  1058                           
  1059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1060                           ; Switch size 1, requested type "simple"
  1061                           ; Number of cases is 1, Range of values is 0 to 0
  1062                           ; switch strategies available:
  1063                           ; Name         Instructions Cycles
  1064                           ; simple_byte            4     3 (average)
  1065                           ; direct_byte            7     6 (fixed)
  1066                           ; jumptable            260     6 (fixed)
  1067                           ;	Chosen strategy is simple_byte
  1068     0530  087B               	movf	??_settingsMenu+1,w
  1069     0531  3A00               	xorlw	0	; case 0
  1070     0532  1903               	skipnz
  1071     0533  2D35               	goto	l2381
  1072     0534  2D40               	goto	l376
  1073     0535                     l2381:
  1074                           
  1075                           ; Switch size 1, requested type "simple"
  1076                           ; Number of cases is 3, Range of values is 0 to 2
  1077                           ; switch strategies available:
  1078                           ; Name         Instructions Cycles
  1079                           ; direct_byte            9     6 (fixed)
  1080                           ; simple_byte           10     6 (average)
  1081                           ; jumptable            260     6 (fixed)
  1082                           ;	Chosen strategy is simple_byte
  1083     0535  087A               	movf	??_settingsMenu,w
  1084     0536  3A00               	xorlw	0	; case 0
  1085     0537  1903               	skipnz
  1086     0538  2D21               	goto	l2255
  1087     0539  3A01               	xorlw	1	; case 1
  1088     053A  1903               	skipnz
  1089     053B  2D27               	goto	l2259
  1090     053C  3A03               	xorlw	3	; case 2
  1091     053D  1903               	skipnz
  1092     053E  2D2B               	goto	l2267
  1093     053F  2D40               	goto	l376
  1094     0540                     l376:
  1095     0540  0008               	return
  1096     0541                     __end_of_settingsMenu:
  1097                           
  1098                           	psect	text2
  1099     04FD                     __ptext2:	
  1100 ;; *************** function _yearSetting *****************
  1101 ;; Defined at:
  1102 ;;		line 112 in file "settings.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  year            1    9[COMMON] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1116 ;;      Params:         0       0       0       0       0
  1117 ;;      Locals:         1       0       0       0       0
  1118 ;;      Temps:          1       0       0       0       0
  1119 ;;      Totals:         2       0       0       0       0
  1120 ;;Total ram usage:        2 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; Hardware stack levels required when called: 3
  1123 ;; This function calls:
  1124 ;;		_buttons
  1125 ;;		_incDecBCD
  1126 ;;		_loadDisplay
  1127 ;;		_readByteRTC
  1128 ;;		_swapNibbles
  1129 ;;		_writeByteRTC
  1130 ;; This function is called by:
  1131 ;;		_settingsMenu
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135     04FD                     _yearSetting:	
  1136                           ;psect for function _yearSetting
  1137                           
  1138                           
  1139                           ;settings.c: 113:     unsigned char year;;settings.c: 114:     year = readByteRTC(0x01);
  1140                           
  1141                           ;incstack = 0
  1142                           ; Regs used in _yearSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1143     04FD  3001               	movlw	1
  1144     04FE  2326               	fcall	_readByteRTC
  1145     04FF  00F9               	movwf	yearSetting@year
  1146                           
  1147                           ;settings.c: 115:     T6 = 6;
  1148     0500  3006               	movlw	6
  1149     0501  1283               	bcf	3,5	;RP0=0, select bank0
  1150     0502  1303               	bcf	3,6	;RP1=0, select bank0
  1151     0503  00A8               	movwf	40
  1152     0504                     l2181:
  1153                           
  1154                           ;settings.c: 117:         T1 = (swapNibbles(year) & 0x0F);
  1155     0504  0879               	movf	yearSetting@year,w
  1156     0505  23F7               	fcall	_swapNibbles
  1157     0506  390F               	andlw	15
  1158     0507  1283               	bcf	3,5	;RP0=0, select bank0
  1159     0508  1303               	bcf	3,6	;RP1=0, select bank0
  1160     0509  00A3               	movwf	35
  1161                           
  1162                           ;settings.c: 118:         T0 = (year & 0x0F);
  1163     050A  0879               	movf	yearSetting@year,w
  1164     050B  390F               	andlw	15
  1165     050C  00A2               	movwf	34
  1166                           
  1167                           ;settings.c: 119:         loadDisplay();
  1168     050D  2675               	fcall	_loadDisplay
  1169                           
  1170                           ;settings.c: 120:         buttons();
  1171     050E  26F4               	fcall	_buttons
  1172                           
  1173                           ;settings.c: 121:         incDecBCD();
  1174     050F  22F8               	fcall	_incDecBCD
  1175                           
  1176                           ;settings.c: 122:     } while (!((Flag)>>(3) & 1));
  1177     0510  0836               	movf	_Flag,w
  1178     0511  00F8               	movwf	??_yearSetting
  1179     0512  3003               	movlw	3
  1180     0513                     u1255:
  1181     0513  1003               	clrc
  1182     0514  0CF8               	rrf	??_yearSetting,f
  1183     0515  3EFF               	addlw	-1
  1184     0516  1D03               	skipz
  1185     0517  2D13               	goto	u1255
  1186     0518  1C78               	btfss	??_yearSetting,0
  1187     0519  2D04               	goto	l2181
  1188                           
  1189                           ;settings.c: 123:     writeByteRTC(0x06, year);
  1190     051A  0879               	movf	yearSetting@year,w
  1191     051B  00F5               	movwf	writeByteRTC@data
  1192     051C  3006               	movlw	6
  1193     051D  231F               	fcall	_writeByteRTC
  1194     051E  0008               	return
  1195     051F                     __end_of_yearSetting:
  1196                           
  1197                           	psect	text3
  1198     0566                     __ptext3:	
  1199 ;; *************** function _unblankingSetting *****************
  1200 ;; Defined at:
  1201 ;;		line 154 in file "settings.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1215 ;;      Params:         0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0
  1217 ;;      Temps:          1       0       0       0       0
  1218 ;;      Totals:         1       0       0       0       0
  1219 ;;Total ram usage:        1 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; Hardware stack levels required when called: 3
  1222 ;; This function calls:
  1223 ;;		_buttons
  1224 ;;		_incDecBCD
  1225 ;;		_loadDisplay
  1226 ;;		_readByteRTC
  1227 ;;		_swapNibbles
  1228 ;;		_writeByteRTC
  1229 ;; This function is called by:
  1230 ;;		_settingsMenu
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234     0566                     _unblankingSetting:	
  1235                           ;psect for function _unblankingSetting
  1236                           
  1237                           
  1238                           ;settings.c: 155:     blankEnd = readByteRTC(0x15);
  1239                           
  1240                           ;incstack = 0
  1241                           ; Regs used in _unblankingSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1242     0566  3015               	movlw	21
  1243     0567  2326               	fcall	_readByteRTC
  1244     0568  1683               	bsf	3,5	;RP0=1, select bank1
  1245     0569  1303               	bcf	3,6	;RP1=0, select bank1
  1246     056A  00A2               	movwf	_blankEnd^(0+128)
  1247                           
  1248                           ;settings.c: 156:     T6 = 9;
  1249     056B  3009               	movlw	9
  1250     056C  1283               	bcf	3,5	;RP0=0, select bank0
  1251     056D  00A8               	movwf	40
  1252     056E                     l2127:
  1253                           
  1254                           ;settings.c: 158:         T1 = (swapNibbles(blankEnd) & 0x0F);
  1255     056E  1683               	bsf	3,5	;RP0=1, select bank1
  1256     056F  0822               	movf	_blankEnd^(0+128),w
  1257     0570  23F7               	fcall	_swapNibbles
  1258     0571  390F               	andlw	15
  1259     0572  1283               	bcf	3,5	;RP0=0, select bank0
  1260     0573  1303               	bcf	3,6	;RP1=0, select bank0
  1261     0574  00A3               	movwf	35
  1262                           
  1263                           ;settings.c: 159:         T0 = (blankEnd & 0x0F);
  1264     0575  1683               	bsf	3,5	;RP0=1, select bank1
  1265     0576  0822               	movf	_blankEnd^(0+128),w
  1266     0577  390F               	andlw	15
  1267     0578  1283               	bcf	3,5	;RP0=0, select bank0
  1268     0579  00A2               	movwf	34
  1269                           
  1270                           ;settings.c: 160:         loadDisplay();
  1271     057A  2675               	fcall	_loadDisplay
  1272                           
  1273                           ;settings.c: 161:         buttons();
  1274     057B  26F4               	fcall	_buttons
  1275                           
  1276                           ;settings.c: 162:         incDecBCD();
  1277     057C  22F8               	fcall	_incDecBCD
  1278                           
  1279                           ;settings.c: 163:     } while (!((Flag)>>(3) & 1));
  1280     057D  0836               	movf	_Flag,w
  1281     057E  00F8               	movwf	??_unblankingSetting
  1282     057F  3003               	movlw	3
  1283     0580                     u1195:
  1284     0580  1003               	clrc
  1285     0581  0CF8               	rrf	??_unblankingSetting,f
  1286     0582  3EFF               	addlw	-1
  1287     0583  1D03               	skipz
  1288     0584  2D80               	goto	u1195
  1289     0585  1C78               	btfss	??_unblankingSetting,0
  1290     0586  2D6E               	goto	l2127
  1291                           
  1292                           ;settings.c: 164:     writeByteRTC(0x15, blankEnd);
  1293     0587  1683               	bsf	3,5	;RP0=1, select bank1
  1294     0588  0822               	movf	_blankEnd^(0+128),w
  1295     0589  00F5               	movwf	writeByteRTC@data
  1296     058A  3015               	movlw	21
  1297     058B  231F               	fcall	_writeByteRTC
  1298     058C  0008               	return
  1299     058D                     __end_of_unblankingSetting:
  1300                           
  1301                           	psect	text4
  1302     02FA                     __ptext4:	
  1303 ;; *************** function _timeAdjSetting *****************
  1304 ;; Defined at:
  1305 ;;		line 167 in file "settings.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		None
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1319 ;;      Params:         0       0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0
  1322 ;;      Totals:         0       0       0       0       0
  1323 ;;Total ram usage:        0 bytes
  1324 ;; Hardware stack levels used: 1
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_settingsMenu
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332     02FA                     _timeAdjSetting:	
  1333                           ;psect for function _timeAdjSetting
  1334                           
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in _timeAdjSetting: []
  1338     02FA  0008               	return
  1339     02FB                     __end_of_timeAdjSetting:
  1340                           
  1341                           	psect	text5
  1342     04DB                     __ptext5:	
  1343 ;; *************** function _monthSetting *****************
  1344 ;; Defined at:
  1345 ;;		line 98 in file "settings.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  month           1    9[COMMON] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1359 ;;      Params:         0       0       0       0       0
  1360 ;;      Locals:         1       0       0       0       0
  1361 ;;      Temps:          1       0       0       0       0
  1362 ;;      Totals:         2       0       0       0       0
  1363 ;;Total ram usage:        2 bytes
  1364 ;; Hardware stack levels used: 1
  1365 ;; Hardware stack levels required when called: 3
  1366 ;; This function calls:
  1367 ;;		_buttons
  1368 ;;		_incDecBCD
  1369 ;;		_loadDisplay
  1370 ;;		_readByteRTC
  1371 ;;		_swapNibbles
  1372 ;;		_writeByteRTC
  1373 ;; This function is called by:
  1374 ;;		_settingsMenu
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378     04DB                     _monthSetting:	
  1379                           ;psect for function _monthSetting
  1380                           
  1381                           
  1382                           ;settings.c: 99:     unsigned char month;;settings.c: 100:     month = readByteRTC(0x01)
      +                          ;
  1383                           
  1384                           ;incstack = 0
  1385                           ; Regs used in _monthSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1386     04DB  3001               	movlw	1
  1387     04DC  2326               	fcall	_readByteRTC
  1388     04DD  00F9               	movwf	monthSetting@month
  1389                           
  1390                           ;settings.c: 101:     T6 = 5;
  1391     04DE  3005               	movlw	5
  1392     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1393     04E0  1303               	bcf	3,6	;RP1=0, select bank0
  1394     04E1  00A8               	movwf	40
  1395     04E2                     l2163:
  1396                           
  1397                           ;settings.c: 103:         T1 = (swapNibbles(month) & 0x0F);
  1398     04E2  0879               	movf	monthSetting@month,w
  1399     04E3  23F7               	fcall	_swapNibbles
  1400     04E4  390F               	andlw	15
  1401     04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1402     04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1403     04E7  00A3               	movwf	35
  1404                           
  1405                           ;settings.c: 104:         T0 = (month & 0x0F);
  1406     04E8  0879               	movf	monthSetting@month,w
  1407     04E9  390F               	andlw	15
  1408     04EA  00A2               	movwf	34
  1409                           
  1410                           ;settings.c: 105:         loadDisplay();
  1411     04EB  2675               	fcall	_loadDisplay
  1412                           
  1413                           ;settings.c: 106:         buttons();
  1414     04EC  26F4               	fcall	_buttons
  1415                           
  1416                           ;settings.c: 107:         incDecBCD();
  1417     04ED  22F8               	fcall	_incDecBCD
  1418                           
  1419                           ;settings.c: 108:     } while (!((Flag)>>(3) & 1));
  1420     04EE  0836               	movf	_Flag,w
  1421     04EF  00F8               	movwf	??_monthSetting
  1422     04F0  3003               	movlw	3
  1423     04F1                     u1235:
  1424     04F1  1003               	clrc
  1425     04F2  0CF8               	rrf	??_monthSetting,f
  1426     04F3  3EFF               	addlw	-1
  1427     04F4  1D03               	skipz
  1428     04F5  2CF1               	goto	u1235
  1429     04F6  1C78               	btfss	??_monthSetting,0
  1430     04F7  2CE2               	goto	l2163
  1431                           
  1432                           ;settings.c: 109:     writeByteRTC(0x05, month);
  1433     04F8  0879               	movf	monthSetting@month,w
  1434     04F9  00F5               	movwf	writeByteRTC@data
  1435     04FA  3005               	movlw	5
  1436     04FB  231F               	fcall	_writeByteRTC
  1437     04FC  0008               	return
  1438     04FD                     __end_of_monthSetting:
  1439                           
  1440                           	psect	text6
  1441     04B9                     __ptext6:	
  1442 ;; *************** function _minuteSetting *****************
  1443 ;; Defined at:
  1444 ;;		line 70 in file "settings.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  minutes         1    9[COMMON] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1458 ;;      Params:         0       0       0       0       0
  1459 ;;      Locals:         1       0       0       0       0
  1460 ;;      Temps:          1       0       0       0       0
  1461 ;;      Totals:         2       0       0       0       0
  1462 ;;Total ram usage:        2 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; Hardware stack levels required when called: 3
  1465 ;; This function calls:
  1466 ;;		_buttons
  1467 ;;		_incDecBCD
  1468 ;;		_loadDisplay
  1469 ;;		_readByteRTC
  1470 ;;		_swapNibbles
  1471 ;;		_writeByteRTC
  1472 ;; This function is called by:
  1473 ;;		_settingsMenu
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477     04B9                     _minuteSetting:	
  1478                           ;psect for function _minuteSetting
  1479                           
  1480                           
  1481                           ;settings.c: 71:     unsigned char minutes;;settings.c: 72:     minutes = readByteRTC(0x
      +                          01);
  1482                           
  1483                           ;incstack = 0
  1484                           ; Regs used in _minuteSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1485     04B9  3001               	movlw	1
  1486     04BA  2326               	fcall	_readByteRTC
  1487     04BB  00F9               	movwf	minuteSetting@minutes
  1488                           
  1489                           ;settings.c: 73:     T6 = 3;
  1490     04BC  3003               	movlw	3
  1491     04BD  1283               	bcf	3,5	;RP0=0, select bank0
  1492     04BE  1303               	bcf	3,6	;RP1=0, select bank0
  1493     04BF  00A8               	movwf	40
  1494     04C0                     l2091:
  1495                           
  1496                           ;settings.c: 75:         T1 = (swapNibbles(minutes) & 0x0F);
  1497     04C0  0879               	movf	minuteSetting@minutes,w
  1498     04C1  23F7               	fcall	_swapNibbles
  1499     04C2  390F               	andlw	15
  1500     04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1501     04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1502     04C5  00A3               	movwf	35
  1503                           
  1504                           ;settings.c: 76:         T0 = (minutes & 0x0F);
  1505     04C6  0879               	movf	minuteSetting@minutes,w
  1506     04C7  390F               	andlw	15
  1507     04C8  00A2               	movwf	34
  1508                           
  1509                           ;settings.c: 77:         loadDisplay();
  1510     04C9  2675               	fcall	_loadDisplay
  1511                           
  1512                           ;settings.c: 78:         buttons();
  1513     04CA  26F4               	fcall	_buttons
  1514                           
  1515                           ;settings.c: 79:         incDecBCD();
  1516     04CB  22F8               	fcall	_incDecBCD
  1517                           
  1518                           ;settings.c: 80:     } while (!((Flag)>>(3) & 1));
  1519     04CC  0836               	movf	_Flag,w
  1520     04CD  00F8               	movwf	??_minuteSetting
  1521     04CE  3003               	movlw	3
  1522     04CF                     u1155:
  1523     04CF  1003               	clrc
  1524     04D0  0CF8               	rrf	??_minuteSetting,f
  1525     04D1  3EFF               	addlw	-1
  1526     04D2  1D03               	skipz
  1527     04D3  2CCF               	goto	u1155
  1528     04D4  1C78               	btfss	??_minuteSetting,0
  1529     04D5  2CC0               	goto	l2091
  1530                           
  1531                           ;settings.c: 81:     writeByteRTC(0x01, minutes);
  1532     04D6  0879               	movf	minuteSetting@minutes,w
  1533     04D7  00F5               	movwf	writeByteRTC@data
  1534     04D8  3001               	movlw	1
  1535     04D9  231F               	fcall	_writeByteRTC
  1536     04DA  0008               	return
  1537     04DB                     __end_of_minuteSetting:
  1538                           
  1539                           	psect	text7
  1540     0497                     __ptext7:	
  1541 ;; *************** function _hoursSetting *****************
  1542 ;; Defined at:
  1543 ;;		line 56 in file "settings.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  hours           1    9[COMMON] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 300/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1557 ;;      Params:         0       0       0       0       0
  1558 ;;      Locals:         1       0       0       0       0
  1559 ;;      Temps:          1       0       0       0       0
  1560 ;;      Totals:         2       0       0       0       0
  1561 ;;Total ram usage:        2 bytes
  1562 ;; Hardware stack levels used: 1
  1563 ;; Hardware stack levels required when called: 3
  1564 ;; This function calls:
  1565 ;;		_buttons
  1566 ;;		_incDecBCD
  1567 ;;		_loadDisplay
  1568 ;;		_readByteRTC
  1569 ;;		_swapNibbles
  1570 ;;		_writeByteRTC
  1571 ;; This function is called by:
  1572 ;;		_settingsMenu
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576     0497                     _hoursSetting:	
  1577                           ;psect for function _hoursSetting
  1578                           
  1579                           
  1580                           ;settings.c: 57:     unsigned char hours;;settings.c: 58:     hours = readByteRTC(0x02);
  1581                           
  1582                           ;incstack = 0
  1583                           ; Regs used in _hoursSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1584     0497  3002               	movlw	2
  1585     0498  2326               	fcall	_readByteRTC
  1586     0499  00F9               	movwf	hoursSetting@hours
  1587                           
  1588                           ;settings.c: 59:     T6 = 2;
  1589     049A  3002               	movlw	2
  1590     049B  1283               	bcf	3,5	;RP0=0, select bank0
  1591     049C  1303               	bcf	3,6	;RP1=0, select bank0
  1592     049D  00A8               	movwf	40
  1593     049E                     l2073:
  1594                           
  1595                           ;settings.c: 61:         T1 = (swapNibbles(hours) & 0x0F);
  1596     049E  0879               	movf	hoursSetting@hours,w
  1597     049F  23F7               	fcall	_swapNibbles
  1598     04A0  390F               	andlw	15
  1599     04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1600     04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1601     04A3  00A3               	movwf	35
  1602                           
  1603                           ;settings.c: 62:         T0 = (hours & 0x0F);
  1604     04A4  0879               	movf	hoursSetting@hours,w
  1605     04A5  390F               	andlw	15
  1606     04A6  00A2               	movwf	34
  1607                           
  1608                           ;settings.c: 63:         loadDisplay();
  1609     04A7  2675               	fcall	_loadDisplay
  1610                           
  1611                           ;settings.c: 64:         buttons();
  1612     04A8  26F4               	fcall	_buttons
  1613                           
  1614                           ;settings.c: 65:         incDecBCD();
  1615     04A9  22F8               	fcall	_incDecBCD
  1616                           
  1617                           ;settings.c: 66:     } while (!((Flag)>>(3) & 1));
  1618     04AA  0836               	movf	_Flag,w
  1619     04AB  00F8               	movwf	??_hoursSetting
  1620     04AC  3003               	movlw	3
  1621     04AD                     u1135:
  1622     04AD  1003               	clrc
  1623     04AE  0CF8               	rrf	??_hoursSetting,f
  1624     04AF  3EFF               	addlw	-1
  1625     04B0  1D03               	skipz
  1626     04B1  2CAD               	goto	u1135
  1627     04B2  1C78               	btfss	??_hoursSetting,0
  1628     04B3  2C9E               	goto	l2073
  1629                           
  1630                           ;settings.c: 67:     writeByteRTC(0x02, hours);
  1631     04B4  0879               	movf	hoursSetting@hours,w
  1632     04B5  00F5               	movwf	writeByteRTC@data
  1633     04B6  3002               	movlw	2
  1634     04B7  231F               	fcall	_writeByteRTC
  1635     04B8  0008               	return
  1636     04B9                     __end_of_hoursSetting:
  1637                           
  1638                           	psect	text8
  1639     05E3                     __ptext8:	
  1640 ;; *************** function _hourFormatSetting *****************
  1641 ;; Defined at:
  1642 ;;		line 34 in file "settings.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 300/0
  1653 ;;		On exit  : 300/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1656 ;;      Params:         0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0
  1659 ;;      Totals:         1       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels used: 1
  1662 ;; Hardware stack levels required when called: 3
  1663 ;; This function calls:
  1664 ;;		_blankTubes
  1665 ;;		_buttons
  1666 ;;		_loadDisplay
  1667 ;; This function is called by:
  1668 ;;		_settingsMenu
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672     05E3                     _hourFormatSetting:	
  1673                           ;psect for function _hourFormatSetting
  1674                           
  1675                           
  1676                           ;settings.c: 35:     blankTubes();
  1677                           
  1678                           ;incstack = 0
  1679                           ; Regs used in _hourFormatSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1680     05E3  23C9               	fcall	_blankTubes
  1681                           
  1682                           ;settings.c: 36:     T7 = 0;
  1683     05E4  01A9               	clrf	41
  1684                           
  1685                           ;settings.c: 37:     T6 = 1;
  1686     05E5  01A8               	clrf	40
  1687     05E6  0AA8               	incf	40,f
  1688     05E7                     l2051:
  1689                           
  1690                           ;settings.c: 39:         if(((Flag2)>>(2) & 1)) {
  1691     05E7  1683               	bsf	3,5	;RP0=1, select bank1
  1692     05E8  0824               	movf	_Flag2^(0+128),w
  1693     05E9  00F8               	movwf	??_hourFormatSetting
  1694     05EA  3002               	movlw	2
  1695     05EB                     u1085:
  1696     05EB  1003               	clrc
  1697     05EC  0CF8               	rrf	??_hourFormatSetting,f
  1698     05ED  3EFF               	addlw	-1
  1699     05EE  1D03               	skipz
  1700     05EF  2DEB               	goto	u1085
  1701     05F0  1C78               	btfss	??_hourFormatSetting,0
  1702     05F1  2DF7               	goto	l2057
  1703                           
  1704                           ;settings.c: 40:             T1 = 1;
  1705     05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1706     05F3  01A3               	clrf	35
  1707     05F4  0AA3               	incf	35,f
  1708                           
  1709                           ;settings.c: 41:             T0 = 2;
  1710     05F5  3002               	movlw	2
  1711     05F6  2DFB               	goto	L1
  1712     05F7                     l2057:	
  1713                           ;settings.c: 42:         } else {
  1714                           
  1715                           
  1716                           ;settings.c: 43:             T1 = 2;
  1717     05F7  3002               	movlw	2
  1718     05F8  1283               	bcf	3,5	;RP0=0, select bank0
  1719     05F9  00A3               	movwf	35
  1720                           
  1721                           ;settings.c: 44:             T0 = 4;
  1722     05FA  3004               	movlw	4
  1723     05FB                     L1:
  1724     05FB  00A2               	movwf	34
  1725                           
  1726                           ;settings.c: 46:         loadDisplay();
  1727     05FC  2675               	fcall	_loadDisplay
  1728                           
  1729                           ;settings.c: 47:         buttons();
  1730     05FD  26F4               	fcall	_buttons
  1731                           
  1732                           ;settings.c: 48:         if(((Flag)>>(0) & 1)) {
  1733     05FE  1C36               	btfss	_Flag,0
  1734     05FF  2E05               	goto	l2067
  1735                           
  1736                           ;settings.c: 49:             ((Flag2) ^= (1<<2));
  1737     0600  3004               	movlw	4
  1738     0601  00FF               	movwf	127
  1739     0602  087F               	movf	127,w
  1740     0603  1683               	bsf	3,5	;RP0=1, select bank1
  1741     0604  06A4               	xorwf	_Flag2^(0+128),f
  1742     0605                     l2067:
  1743                           
  1744                           ;settings.c: 51:     } while (!((Flag)>>(3) & 1));
  1745     0605  1283               	bcf	3,5	;RP0=0, select bank0
  1746     0606  0836               	movf	_Flag,w
  1747     0607  00F8               	movwf	??_hourFormatSetting
  1748     0608  3003               	movlw	3
  1749     0609                     u1115:
  1750     0609  1003               	clrc
  1751     060A  0CF8               	rrf	??_hourFormatSetting,f
  1752     060B  3EFF               	addlw	-1
  1753     060C  1D03               	skipz
  1754     060D  2E09               	goto	u1115
  1755     060E  1878               	btfsc	??_hourFormatSetting,0
  1756     060F  0008               	return
  1757     0610  2DE7               	goto	l2051
  1758     0611                     __end_of_hourFormatSetting:
  1759                           
  1760                           	psect	text9
  1761     0475                     __ptext9:	
  1762 ;; *************** function _daySetting *****************
  1763 ;; Defined at:
  1764 ;;		line 84 in file "settings.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  day             1    9[COMMON] unsigned char 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1778 ;;      Params:         0       0       0       0       0
  1779 ;;      Locals:         1       0       0       0       0
  1780 ;;      Temps:          1       0       0       0       0
  1781 ;;      Totals:         2       0       0       0       0
  1782 ;;Total ram usage:        2 bytes
  1783 ;; Hardware stack levels used: 1
  1784 ;; Hardware stack levels required when called: 3
  1785 ;; This function calls:
  1786 ;;		_buttons
  1787 ;;		_incDecBCD
  1788 ;;		_loadDisplay
  1789 ;;		_readByteRTC
  1790 ;;		_swapNibbles
  1791 ;;		_writeByteRTC
  1792 ;; This function is called by:
  1793 ;;		_settingsMenu
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797     0475                     _daySetting:	
  1798                           ;psect for function _daySetting
  1799                           
  1800                           
  1801                           ;settings.c: 85:     unsigned char day;;settings.c: 86:     day = readByteRTC(0x04);
  1802                           
  1803                           ;incstack = 0
  1804                           ; Regs used in _daySetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1805     0475  3004               	movlw	4
  1806     0476  2326               	fcall	_readByteRTC
  1807     0477  00F9               	movwf	daySetting@day
  1808                           
  1809                           ;settings.c: 87:     T6 = 4;
  1810     0478  3004               	movlw	4
  1811     0479  1283               	bcf	3,5	;RP0=0, select bank0
  1812     047A  1303               	bcf	3,6	;RP1=0, select bank0
  1813     047B  00A8               	movwf	40
  1814     047C                     l2145:
  1815                           
  1816                           ;settings.c: 89:         T1 = (swapNibbles(day) & 0x0F);
  1817     047C  0879               	movf	daySetting@day,w
  1818     047D  23F7               	fcall	_swapNibbles
  1819     047E  390F               	andlw	15
  1820     047F  1283               	bcf	3,5	;RP0=0, select bank0
  1821     0480  1303               	bcf	3,6	;RP1=0, select bank0
  1822     0481  00A3               	movwf	35
  1823                           
  1824                           ;settings.c: 90:         T0 = (day & 0x0F);
  1825     0482  0879               	movf	daySetting@day,w
  1826     0483  390F               	andlw	15
  1827     0484  00A2               	movwf	34
  1828                           
  1829                           ;settings.c: 91:         loadDisplay();
  1830     0485  2675               	fcall	_loadDisplay
  1831                           
  1832                           ;settings.c: 92:         buttons();
  1833     0486  26F4               	fcall	_buttons
  1834                           
  1835                           ;settings.c: 93:         incDecBCD();
  1836     0487  22F8               	fcall	_incDecBCD
  1837                           
  1838                           ;settings.c: 94:     } while (!((Flag)>>(3) & 1));
  1839     0488  0836               	movf	_Flag,w
  1840     0489  00F8               	movwf	??_daySetting
  1841     048A  3003               	movlw	3
  1842     048B                     u1215:
  1843     048B  1003               	clrc
  1844     048C  0CF8               	rrf	??_daySetting,f
  1845     048D  3EFF               	addlw	-1
  1846     048E  1D03               	skipz
  1847     048F  2C8B               	goto	u1215
  1848     0490  1C78               	btfss	??_daySetting,0
  1849     0491  2C7C               	goto	l2145
  1850                           
  1851                           ;settings.c: 95:     writeByteRTC(0x04, day);
  1852     0492  0879               	movf	daySetting@day,w
  1853     0493  00F5               	movwf	writeByteRTC@data
  1854     0494  3004               	movlw	4
  1855     0495  231F               	fcall	_writeByteRTC
  1856     0496  0008               	return
  1857     0497                     __end_of_daySetting:
  1858                           
  1859                           	psect	text10
  1860     0453                     __ptext10:	
  1861 ;; *************** function _dateFormatSetting *****************
  1862 ;; Defined at:
  1863 ;;		line 126 in file "settings.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 300/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1877 ;;      Params:         0       0       0       0       0
  1878 ;;      Locals:         0       0       0       0       0
  1879 ;;      Temps:          1       0       0       0       0
  1880 ;;      Totals:         1       0       0       0       0
  1881 ;;Total ram usage:        1 bytes
  1882 ;; Hardware stack levels used: 1
  1883 ;; Hardware stack levels required when called: 3
  1884 ;; This function calls:
  1885 ;;		_buttons
  1886 ;;		_loadDisplay
  1887 ;; This function is called by:
  1888 ;;		_settingsMenu
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892     0453                     _dateFormatSetting:	
  1893                           ;psect for function _dateFormatSetting
  1894                           
  1895                           
  1896                           ;settings.c: 127:     T6 = 7;
  1897                           
  1898                           ;incstack = 0
  1899                           ; Regs used in _dateFormatSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1900     0453  3007               	movlw	7
  1901     0454  1283               	bcf	3,5	;RP0=0, select bank0
  1902     0455  1303               	bcf	3,6	;RP1=0, select bank0
  1903     0456  00A8               	movwf	40
  1904     0457                     l2197:
  1905                           
  1906                           ;settings.c: 129:         T1 = 0;
  1907     0457  01A3               	clrf	35
  1908                           
  1909                           ;settings.c: 130:         T0 = ((Flag2)>>(1) & 1);
  1910     0458  1683               	bsf	3,5	;RP0=1, select bank1
  1911     0459  0824               	movf	_Flag2^(0+128),w
  1912     045A  00F8               	movwf	??_dateFormatSetting
  1913     045B  1003               	clrc
  1914     045C  0C78               	rrf	??_dateFormatSetting,w
  1915     045D  3901               	andlw	1
  1916     045E  1283               	bcf	3,5	;RP0=0, select bank0
  1917     045F  00A2               	movwf	34
  1918                           
  1919                           ;settings.c: 132:         loadDisplay();
  1920     0460  2675               	fcall	_loadDisplay
  1921                           
  1922                           ;settings.c: 133:         buttons();
  1923     0461  26F4               	fcall	_buttons
  1924                           
  1925                           ;settings.c: 134:         if(((Flag)>>(0) & 1)) {
  1926     0462  1C36               	btfss	_Flag,0
  1927     0463  2C69               	goto	l2209
  1928                           
  1929                           ;settings.c: 135:             ((Flag2) ^= (1<<1));
  1930     0464  3002               	movlw	2
  1931     0465  00FF               	movwf	127
  1932     0466  087F               	movf	127,w
  1933     0467  1683               	bsf	3,5	;RP0=1, select bank1
  1934     0468  06A4               	xorwf	_Flag2^(0+128),f
  1935     0469                     l2209:
  1936                           
  1937                           ;settings.c: 137:     } while (!((Flag)>>(3) & 1));
  1938     0469  1283               	bcf	3,5	;RP0=0, select bank0
  1939     046A  0836               	movf	_Flag,w
  1940     046B  00F8               	movwf	??_dateFormatSetting
  1941     046C  3003               	movlw	3
  1942     046D                     u1285:
  1943     046D  1003               	clrc
  1944     046E  0CF8               	rrf	??_dateFormatSetting,f
  1945     046F  3EFF               	addlw	-1
  1946     0470  1D03               	skipz
  1947     0471  2C6D               	goto	u1285
  1948     0472  1878               	btfsc	??_dateFormatSetting,0
  1949     0473  0008               	return
  1950     0474  2C57               	goto	l2197
  1951     0475                     __end_of_dateFormatSetting:
  1952                           
  1953                           	psect	text11
  1954     02F9                     __ptext11:	
  1955 ;; *************** function _brightnessSetting *****************
  1956 ;; Defined at:
  1957 ;;		line 171 in file "settings.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;		None
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		None
  1966 ;; Tracked objects:
  1967 ;;		On entry : 300/0
  1968 ;;		On exit  : 300/0
  1969 ;;		Unchanged: 300/0
  1970 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  1971 ;;      Params:         0       0       0       0       0
  1972 ;;      Locals:         0       0       0       0       0
  1973 ;;      Temps:          0       0       0       0       0
  1974 ;;      Totals:         0       0       0       0       0
  1975 ;;Total ram usage:        0 bytes
  1976 ;; Hardware stack levels used: 1
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_settingsMenu
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984     02F9                     _brightnessSetting:	
  1985                           ;psect for function _brightnessSetting
  1986                           
  1987                           
  1988                           ;incstack = 0
  1989                           ; Regs used in _brightnessSetting: []
  1990     02F9  0008               	return
  1991     02FA                     __end_of_brightnessSetting:
  1992                           
  1993                           	psect	text12
  1994     0431                     __ptext12:	
  1995 ;; *************** function _blankingSetting *****************
  1996 ;; Defined at:
  1997 ;;		line 141 in file "settings.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2011 ;;      Params:         0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0
  2013 ;;      Temps:          1       0       0       0       0
  2014 ;;      Totals:         1       0       0       0       0
  2015 ;;Total ram usage:        1 bytes
  2016 ;; Hardware stack levels used: 1
  2017 ;; Hardware stack levels required when called: 3
  2018 ;; This function calls:
  2019 ;;		_buttons
  2020 ;;		_incDecBCD
  2021 ;;		_loadDisplay
  2022 ;;		_readByteRTC
  2023 ;;		_swapNibbles
  2024 ;;		_writeByteRTC
  2025 ;; This function is called by:
  2026 ;;		_settingsMenu
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030     0431                     _blankingSetting:	
  2031                           ;psect for function _blankingSetting
  2032                           
  2033                           
  2034                           ;settings.c: 142:     blankStart = readByteRTC(0x14);
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _blankingSetting: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2038     0431  3014               	movlw	20
  2039     0432  2326               	fcall	_readByteRTC
  2040     0433  1283               	bcf	3,5	;RP0=0, select bank0
  2041     0434  1303               	bcf	3,6	;RP1=0, select bank0
  2042     0435  00B4               	movwf	_blankStart
  2043                           
  2044                           ;settings.c: 143:     T6 = 8;
  2045     0436  3008               	movlw	8
  2046     0437  00A8               	movwf	40
  2047     0438                     l2109:
  2048                           
  2049                           ;settings.c: 145:         T1 = (swapNibbles(blankStart) & 0x0F);
  2050     0438  0834               	movf	_blankStart,w
  2051     0439  23F7               	fcall	_swapNibbles
  2052     043A  390F               	andlw	15
  2053     043B  1283               	bcf	3,5	;RP0=0, select bank0
  2054     043C  1303               	bcf	3,6	;RP1=0, select bank0
  2055     043D  00A3               	movwf	35
  2056                           
  2057                           ;settings.c: 146:         T0 = (blankStart & 0x0F);
  2058     043E  0834               	movf	_blankStart,w
  2059     043F  390F               	andlw	15
  2060     0440  00A2               	movwf	34
  2061                           
  2062                           ;settings.c: 147:         loadDisplay();
  2063     0441  2675               	fcall	_loadDisplay
  2064                           
  2065                           ;settings.c: 148:         buttons();
  2066     0442  26F4               	fcall	_buttons
  2067                           
  2068                           ;settings.c: 149:         incDecBCD();
  2069     0443  22F8               	fcall	_incDecBCD
  2070                           
  2071                           ;settings.c: 150:     } while (!((Flag)>>(3) & 1));
  2072     0444  0836               	movf	_Flag,w
  2073     0445  00F8               	movwf	??_blankingSetting
  2074     0446  3003               	movlw	3
  2075     0447                     u1175:
  2076     0447  1003               	clrc
  2077     0448  0CF8               	rrf	??_blankingSetting,f
  2078     0449  3EFF               	addlw	-1
  2079     044A  1D03               	skipz
  2080     044B  2C47               	goto	u1175
  2081     044C  1C78               	btfss	??_blankingSetting,0
  2082     044D  2C38               	goto	l2109
  2083                           
  2084                           ;settings.c: 151:     writeByteRTC(0x14, blankStart);
  2085     044E  0834               	movf	_blankStart,w
  2086     044F  00F5               	movwf	writeByteRTC@data
  2087     0450  3014               	movlw	20
  2088     0451  231F               	fcall	_writeByteRTC
  2089     0452  0008               	return
  2090     0453                     __end_of_blankingSetting:
  2091                           
  2092                           	psect	text13
  2093     02F8                     __ptext13:	
  2094 ;; *************** function _incDecBCD *****************
  2095 ;; Defined at:
  2096 ;;		line 206 in file "settings.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		None
  2105 ;; Tracked objects:
  2106 ;;		On entry : 300/0
  2107 ;;		On exit  : 300/0
  2108 ;;		Unchanged: 300/0
  2109 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2110 ;;      Params:         0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0
  2113 ;;      Totals:         0       0       0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_hoursSetting
  2120 ;;		_minuteSetting
  2121 ;;		_daySetting
  2122 ;;		_monthSetting
  2123 ;;		_yearSetting
  2124 ;;		_blankingSetting
  2125 ;;		_unblankingSetting
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129     02F8                     _incDecBCD:	
  2130                           ;psect for function _incDecBCD
  2131                           
  2132                           
  2133                           ;incstack = 0
  2134                           ; Regs used in _incDecBCD: []
  2135     02F8  0008               	return
  2136     02F9                     __end_of_incDecBCD:
  2137                           
  2138                           	psect	text14
  2139     06F4                     __ptext14:	
  2140 ;; *************** function _buttons *****************
  2141 ;; Defined at:
  2142 ;;		line 176 in file "settings.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  timer           2    1[COMMON] unsigned int 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, btemp+1
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 300/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2156 ;;      Params:         0       0       0       0       0
  2157 ;;      Locals:         2       0       0       0       0
  2158 ;;      Temps:          1       0       0       0       0
  2159 ;;      Totals:         3       0       0       0       0
  2160 ;;Total ram usage:        3 bytes
  2161 ;; Hardware stack levels used: 1
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;;		_hourFormatSetting
  2167 ;;		_hoursSetting
  2168 ;;		_minuteSetting
  2169 ;;		_daySetting
  2170 ;;		_monthSetting
  2171 ;;		_yearSetting
  2172 ;;		_dateFormatSetting
  2173 ;;		_blankingSetting
  2174 ;;		_unblankingSetting
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178     06F4                     _buttons:	
  2179                           ;psect for function _buttons
  2180                           
  2181                           
  2182                           ;settings.c: 177:     Flag &= 0b11110000;
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _buttons: [wreg+status,2+status,0+btemp+1]
  2186     06F4  30F0               	movlw	240
  2187     06F5  00FF               	movwf	127
  2188     06F6  087F               	movf	127,w
  2189     06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2190     06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2191     06F9  05B6               	andwf	_Flag,f
  2192                           
  2193                           ;settings.c: 178:     unsigned int timer = 0;
  2194     06FA  01F1               	clrf	buttons@timer
  2195     06FB  01F2               	clrf	buttons@timer+1
  2196                           
  2197                           ;settings.c: 179:     if(PORTAbits.RA2) {
  2198     06FC  1905               	btfsc	5,2	;volatile
  2199     06FD  2F0C               	goto	l1873
  2200     06FE  2F1B               	goto	l434
  2201     06FF                     l1871:
  2202                           
  2203                           ;settings.c: 182:             timer++;
  2204     06FF  3001               	movlw	1
  2205     0700  07F1               	addwf	buttons@timer,f
  2206     0701  1803               	skipnc
  2207     0702  0AF2               	incf	buttons@timer+1,f
  2208     0703  3000               	movlw	0
  2209     0704  07F2               	addwf	buttons@timer+1,f
  2210                           
  2211                           ;settings.c: 183:             _delay((unsigned long)((1)*(4000000/4000.0)));
  2212     0705  30C7               	movlw	199
  2213     0706  00F0               	movwf	??_buttons
  2214     0707                     u1447:
  2215     0707  2F08               	nop2
  2216     0708  0BF0               	decfsz	??_buttons,f
  2217     0709  2F07               	goto	u1447
  2218     070A  2F0B               	nop2
  2219     070B  2F0C               	nop2
  2220     070C                     l1873:
  2221                           
  2222                           ;settings.c: 181:         while(PORTAbits.RA2) {
  2223     070C  1283               	bcf	3,5	;RP0=0, select bank0
  2224     070D  1303               	bcf	3,6	;RP1=0, select bank0
  2225     070E  1905               	btfsc	5,2	;volatile
  2226     070F  2EFF               	goto	l1871
  2227                           
  2228                           ;settings.c: 186:         if(timer < 500) {
  2229     0710  3001               	movlw	1
  2230     0711  0272               	subwf	buttons@timer+1,w
  2231     0712  30F4               	movlw	244
  2232     0713  1903               	skipnz
  2233     0714  0271               	subwf	buttons@timer,w
  2234     0715  1803               	skipnc
  2235     0716  2F19               	goto	l438
  2236                           
  2237                           ;settings.c: 187:             ((Flag) |= (1<<0));
  2238     0717  1436               	bsf	_Flag,0
  2239                           
  2240                           ;settings.c: 188:         } else {
  2241     0718  0008               	return
  2242     0719                     l438:
  2243                           
  2244                           ;settings.c: 189:             ((Flag) |= (1<<1));
  2245     0719  14B6               	bsf	_Flag,1
  2246     071A  0008               	return
  2247     071B                     l434:
  2248     071B  1D85               	btfss	5,3	;volatile
  2249     071C  0008               	return
  2250     071D                     l1883:
  2251                           
  2252                           ;settings.c: 193:         while(PORTAbits.RA3) {
  2253     071D  1283               	bcf	3,5	;RP0=0, select bank0
  2254     071E  1303               	bcf	3,6	;RP1=0, select bank0
  2255     071F  1D85               	btfss	5,3	;volatile
  2256     0720  2F2F               	goto	l1885
  2257                           
  2258                           ;settings.c: 194:             timer++;
  2259     0721  3001               	movlw	1
  2260     0722  07F1               	addwf	buttons@timer,f
  2261     0723  1803               	skipnc
  2262     0724  0AF2               	incf	buttons@timer+1,f
  2263     0725  3000               	movlw	0
  2264     0726  07F2               	addwf	buttons@timer+1,f
  2265                           
  2266                           ;settings.c: 195:             _delay((unsigned long)((1)*(4000000/4000.0)));
  2267     0727  30C7               	movlw	199
  2268     0728  00F0               	movwf	??_buttons
  2269     0729                     u1457:
  2270     0729  2F2A               	nop2
  2271     072A  0BF0               	decfsz	??_buttons,f
  2272     072B  2F29               	goto	u1457
  2273     072C  2F2D               	nop2
  2274     072D  2F2E               	nop2
  2275     072E  2F1D               	goto	l1883
  2276     072F                     l1885:
  2277                           
  2278                           ;settings.c: 198:         if(timer < 500) {
  2279     072F  3001               	movlw	1
  2280     0730  0272               	subwf	buttons@timer+1,w
  2281     0731  30F4               	movlw	244
  2282     0732  1903               	skipnz
  2283     0733  0271               	subwf	buttons@timer,w
  2284     0734  1803               	skipnc
  2285     0735  2F38               	goto	l445
  2286                           
  2287                           ;settings.c: 199:             ((Flag) |= (1<<2));
  2288     0736  1536               	bsf	_Flag,2
  2289                           
  2290                           ;settings.c: 200:         } else {
  2291     0737  0008               	return
  2292     0738                     l445:
  2293                           
  2294                           ;settings.c: 201:             ((Flag) |= (1<<3));
  2295     0738  15B6               	bsf	_Flag,3
  2296     0739  0008               	return
  2297     073A                     __end_of_buttons:
  2298                           
  2299                           	psect	text15
  2300     03B6                     __ptext15:	
  2301 ;; *************** function _preLoadWL *****************
  2302 ;; Defined at:
  2303 ;;		line 25 in file "tubes.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2
  2312 ;; Tracked objects:
  2313 ;;		On entry : 300/0
  2314 ;;		On exit  : 300/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2317 ;;      Params:         0       0       0       0       0
  2318 ;;      Locals:         0       0       0       0       0
  2319 ;;      Temps:          0       0       0       0       0
  2320 ;;      Totals:         0       0       0       0       0
  2321 ;;Total ram usage:        0 bytes
  2322 ;; Hardware stack levels used: 1
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330     03B6                     _preLoadWL:	
  2331                           ;psect for function _preLoadWL
  2332                           
  2333                           
  2334                           ;tubes.c: 26:     T7 = 1;
  2335                           
  2336                           ;incstack = 0
  2337                           ; Regs used in _preLoadWL: [wreg+status,2]
  2338     03B6  01A9               	clrf	41
  2339     03B7  0AA9               	incf	41,f
  2340                           
  2341                           ;tubes.c: 27:     T6 = 10;
  2342     03B8  300A               	movlw	10
  2343     03B9  00A8               	movwf	40
  2344                           
  2345                           ;tubes.c: 28:     T5 = 0;
  2346     03BA  01A7               	clrf	39
  2347                           
  2348                           ;tubes.c: 29:     T4 = 4;
  2349     03BB  3004               	movlw	4
  2350     03BC  00A6               	movwf	38
  2351                           
  2352                           ;tubes.c: 30:     T3 = 8;
  2353     03BD  3008               	movlw	8
  2354     03BE  00A5               	movwf	37
  2355                           
  2356                           ;tubes.c: 31:     T2 = 5;
  2357     03BF  3005               	movlw	5
  2358     03C0  00A4               	movwf	36
  2359                           
  2360                           ;tubes.c: 32:     T1 = 9;
  2361     03C1  3009               	movlw	9
  2362     03C2  00A3               	movwf	35
  2363                           
  2364                           ;tubes.c: 33:     T0 = 6;
  2365     03C3  3006               	movlw	6
  2366     03C4  00A2               	movwf	34
  2367                           
  2368                           ;tubes.c: 34:     leftDP = 0x00;
  2369     03C5  01B2               	clrf	_leftDP
  2370                           
  2371                           ;tubes.c: 35:     rightDP = 0x00;
  2372     03C6  01B1               	clrf	_rightDP
  2373                           
  2374                           ;tubes.c: 36:     ((rightDP) |= (1<<6));
  2375     03C7  1731               	bsf	_rightDP,6
  2376     03C8  0008               	return
  2377     03C9                     __end_of_preLoadWL:
  2378                           
  2379                           	psect	text16
  2380     0786                     __ptext16:	
  2381 ;; *************** function _getTime *****************
  2382 ;; Defined at:
  2383 ;;		line 132 in file "RTC.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  seconds         1    2[BANK0h] unsigned char 
  2388 ;;  hours           1    1[BANK0h] unsigned char 
  2389 ;;  minutes         1    0[BANK0h] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 300/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2399 ;;      Params:         0       0       0       0       0
  2400 ;;      Locals:         0       3       0       0       0
  2401 ;;      Temps:          3       0       0       0       0
  2402 ;;      Totals:         3       3       0       0       0
  2403 ;;Total ram usage:        6 bytes
  2404 ;; Hardware stack levels used: 1
  2405 ;; Hardware stack levels required when called: 4
  2406 ;; This function calls:
  2407 ;;		_I2C_SendACK
  2408 ;;		_endReadRTC
  2409 ;;		_getDate
  2410 ;;		_loadDisplay
  2411 ;;		_readByteRTC
  2412 ;;		_readDataRTC
  2413 ;;		_reqReadRTC
  2414 ;;		_swapNibbles
  2415 ;; This function is called by:
  2416 ;;		_main
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420     0786                     _getTime:	
  2421                           ;psect for function _getTime
  2422                           
  2423                           
  2424                           ;RTC.c: 133:     unsigned char seconds, minutes, hours;;RTC.c: 138:     seconds = readBy
      +                          teRTC(0x00);
  2425                           
  2426                           ;incstack = 0
  2427                           ; Regs used in _getTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2428     0786  3000               	movlw	0
  2429     0787  2326               	fcall	_readByteRTC
  2430     0788  1283               	bcf	3,5	;RP0=0, select bank0
  2431     0789  1303               	bcf	3,6	;RP1=0, select bank0
  2432     078A  00AC               	movwf	getTime@seconds
  2433                           
  2434                           ;RTC.c: 140:     if(((seconds)>>(7) & 1)) {
  2435     078B  082C               	movf	getTime@seconds,w
  2436     078C  00FB               	movwf	??_getTime
  2437     078D  3007               	movlw	7
  2438     078E                     u1325:
  2439     078E  1003               	clrc
  2440     078F  0CFB               	rrf	??_getTime,f
  2441     0790  3EFF               	addlw	-1
  2442     0791  1D03               	skipz
  2443     0792  2F8E               	goto	u1325
  2444     0793  1C7B               	btfss	??_getTime,0
  2445     0794  2F97               	goto	l2283
  2446                           
  2447                           ;RTC.c: 141:         ((ErrFlag) |= (1<<1));
  2448     0795  14B3               	bsf	_ErrFlag,1
  2449                           
  2450                           ;RTC.c: 142:     } else {
  2451     0796  0008               	return
  2452     0797                     l2283:
  2453                           
  2454                           ;RTC.c: 144:         if(seconds != oldSeconds) {
  2455     0797  082C               	movf	getTime@seconds,w
  2456     0798  0630               	xorwf	_oldSeconds,w
  2457     0799  1903               	skipnz
  2458     079A  0008               	return
  2459                           
  2460                           ;RTC.c: 145:             if(seconds == 0b00110000) {
  2461     079B  3030               	movlw	48
  2462     079C  062C               	xorwf	getTime@seconds,w
  2463     079D  1D03               	btfss	3,2
  2464     079E  2FAE               	goto	l2291
  2465                           
  2466                           ;RTC.c: 146:                 getDate();
  2467     079F  25B6               	fcall	_getDate
  2468                           
  2469                           ;RTC.c: 147:                 _delay((unsigned long)((4000)*(4000000/4000.0)));
  2470     07A0  3015               	movlw	21
  2471     07A1  00FD               	movwf	??_getTime+2
  2472     07A2  304B               	movlw	75
  2473     07A3  00FC               	movwf	??_getTime+1
  2474     07A4  30BE               	movlw	190
  2475     07A5  00FB               	movwf	??_getTime
  2476     07A6                     u1467:
  2477     07A6  0BFB               	decfsz	??_getTime,f
  2478     07A7  2FA6               	goto	u1467
  2479     07A8  0BFC               	decfsz	??_getTime+1,f
  2480     07A9  2FA6               	goto	u1467
  2481     07AA  0BFD               	decfsz	??_getTime+2,f
  2482     07AB  2FA6               	goto	u1467
  2483     07AC  0000               	nop
  2484                           
  2485                           ;RTC.c: 148:             } else if (seconds == 0b01011001) {
  2486     07AD  0008               	return
  2487     07AE                     l2291:
  2488     07AE  3059               	movlw	89
  2489     07AF  062C               	xorwf	getTime@seconds,w
  2490     07B0  1903               	btfsc	3,2
  2491     07B1  0008               	return
  2492                           
  2493                           ;RTC.c: 151:                 reqReadRTC(0x00);
  2494     07B2  3000               	movlw	0
  2495     07B3  2338               	fcall	_reqReadRTC
  2496                           
  2497                           ;RTC.c: 152:                 seconds = readDataRTC();
  2498     07B4  2308               	fcall	_readDataRTC
  2499     07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2500     07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2501     07B7  00AC               	movwf	getTime@seconds
  2502                           
  2503                           ;RTC.c: 153:                 I2C_SendACK();
  2504     07B8  2385               	fcall	_I2C_SendACK
  2505                           
  2506                           ;RTC.c: 154:                 minutes = readDataRTC();
  2507     07B9  2308               	fcall	_readDataRTC
  2508     07BA  1283               	bcf	3,5	;RP0=0, select bank0
  2509     07BB  1303               	bcf	3,6	;RP1=0, select bank0
  2510     07BC  00AA               	movwf	getTime@minutes
  2511                           
  2512                           ;RTC.c: 155:                 I2C_SendACK();
  2513     07BD  2385               	fcall	_I2C_SendACK
  2514                           
  2515                           ;RTC.c: 156:                 hours = readDataRTC();
  2516     07BE  2308               	fcall	_readDataRTC
  2517     07BF  1283               	bcf	3,5	;RP0=0, select bank0
  2518     07C0  1303               	bcf	3,6	;RP1=0, select bank0
  2519     07C1  00AB               	movwf	getTime@hours
  2520                           
  2521                           ;RTC.c: 157:                 endReadRTC();
  2522     07C2  22FD               	fcall	_endReadRTC
  2523                           
  2524                           ;RTC.c: 158:                 T0 = (seconds & 0x0F);
  2525     07C3  1283               	bcf	3,5	;RP0=0, select bank0
  2526     07C4  1303               	bcf	3,6	;RP1=0, select bank0
  2527     07C5  082C               	movf	getTime@seconds,w
  2528     07C6  390F               	andlw	15
  2529     07C7  00A2               	movwf	34
  2530                           
  2531                           ;RTC.c: 159:                 T1 = (swapNibbles(seconds) & 0x0F);
  2532     07C8  082C               	movf	getTime@seconds,w
  2533     07C9  23F7               	fcall	_swapNibbles
  2534     07CA  390F               	andlw	15
  2535     07CB  1283               	bcf	3,5	;RP0=0, select bank0
  2536     07CC  1303               	bcf	3,6	;RP1=0, select bank0
  2537     07CD  00A3               	movwf	35
  2538                           
  2539                           ;RTC.c: 160:                 T3 = (minutes & 0x0F);
  2540     07CE  082A               	movf	getTime@minutes,w
  2541     07CF  390F               	andlw	15
  2542     07D0  00A5               	movwf	37
  2543                           
  2544                           ;RTC.c: 161:                 T4 = (swapNibbles(minutes) & 0x0F);
  2545     07D1  082A               	movf	getTime@minutes,w
  2546     07D2  23F7               	fcall	_swapNibbles
  2547     07D3  390F               	andlw	15
  2548     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  2549     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  2550     07D6  00A6               	movwf	38
  2551                           
  2552                           ;RTC.c: 162:                 T6 = (hours & 0x0F);
  2553     07D7  082B               	movf	getTime@hours,w
  2554     07D8  390F               	andlw	15
  2555     07D9  00A8               	movwf	40
  2556                           
  2557                           ;RTC.c: 163:                 T7 = (swapNibbles(hours) & 0x0F);
  2558     07DA  082B               	movf	getTime@hours,w
  2559     07DB  23F7               	fcall	_swapNibbles
  2560     07DC  390F               	andlw	15
  2561     07DD  1283               	bcf	3,5	;RP0=0, select bank0
  2562     07DE  1303               	bcf	3,6	;RP1=0, select bank0
  2563     07DF  00A9               	movwf	41
  2564                           
  2565                           ;RTC.c: 164:                 T2 = T5 = 10;
  2566     07E0  300A               	movlw	10
  2567     07E1  00A7               	movwf	39
  2568     07E2  00A4               	movwf	36
  2569                           
  2570                           ;RTC.c: 166:                 if(((seconds)>>(0) & 1)) {
  2571     07E3  1C2C               	btfss	getTime@seconds,0
  2572     07E4  2FE9               	goto	l2325
  2573                           
  2574                           ;RTC.c: 167:                     leftDP = 0x00;
  2575     07E5  01B2               	clrf	_leftDP
  2576                           
  2577                           ;RTC.c: 168:                     rightDP = 0x24;
  2578     07E6  3024               	movlw	36
  2579     07E7  00B1               	movwf	_rightDP
  2580                           
  2581                           ;RTC.c: 171:                 } else {
  2582     07E8  2FEC               	goto	l2329
  2583     07E9                     l2325:
  2584                           
  2585                           ;RTC.c: 172:                     leftDP = 0x24;
  2586     07E9  3024               	movlw	36
  2587     07EA  00B2               	movwf	_leftDP
  2588                           
  2589                           ;RTC.c: 173:                     rightDP = 0x00;
  2590     07EB  01B1               	clrf	_rightDP
  2591     07EC                     l2329:
  2592                           
  2593                           ;RTC.c: 178:                 loadDisplay();
  2594     07EC  2675               	fcall	_loadDisplay
  2595                           
  2596                           ;RTC.c: 179:                 oldSeconds = seconds;
  2597     07ED  082C               	movf	getTime@seconds,w
  2598     07EE  00B0               	movwf	_oldSeconds
  2599     07EF  0008               	return
  2600     07F0                     __end_of_getTime:
  2601                           
  2602                           	psect	text17
  2603     05B6                     __ptext17:	
  2604 ;; *************** function _getDate *****************
  2605 ;; Defined at:
  2606 ;;		line 185 in file "RTC.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  year            1   10[COMMON] unsigned char 
  2611 ;;  month           1    9[COMMON] unsigned char 
  2612 ;;  day             1    8[COMMON] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 300/0
  2619 ;;		On exit  : 300/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0       0
  2623 ;;      Locals:         3       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0
  2625 ;;      Totals:         3       0       0       0       0
  2626 ;;Total ram usage:        3 bytes
  2627 ;; Hardware stack levels used: 1
  2628 ;; Hardware stack levels required when called: 3
  2629 ;; This function calls:
  2630 ;;		_I2C_SendACK
  2631 ;;		_endReadRTC
  2632 ;;		_loadDisplay
  2633 ;;		_readDataRTC
  2634 ;;		_reqReadRTC
  2635 ;;		_swapNibbles
  2636 ;; This function is called by:
  2637 ;;		_getTime
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641     05B6                     _getDate:	
  2642                           ;psect for function _getDate
  2643                           
  2644                           
  2645                           ;RTC.c: 186:     unsigned char day, month, year;;RTC.c: 189:     reqReadRTC(0x04);
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _getDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2649     05B6  3004               	movlw	4
  2650     05B7  2338               	fcall	_reqReadRTC
  2651                           
  2652                           ;RTC.c: 190:     day = readDataRTC();
  2653     05B8  2308               	fcall	_readDataRTC
  2654     05B9  00F8               	movwf	getDate@day
  2655                           
  2656                           ;RTC.c: 191:     I2C_SendACK();
  2657     05BA  2385               	fcall	_I2C_SendACK
  2658                           
  2659                           ;RTC.c: 192:     month = readDataRTC();
  2660     05BB  2308               	fcall	_readDataRTC
  2661     05BC  00F9               	movwf	getDate@month
  2662                           
  2663                           ;RTC.c: 193:     I2C_SendACK();
  2664     05BD  2385               	fcall	_I2C_SendACK
  2665                           
  2666                           ;RTC.c: 194:     year = readDataRTC();
  2667     05BE  2308               	fcall	_readDataRTC
  2668     05BF  00FA               	movwf	getDate@year
  2669                           
  2670                           ;RTC.c: 195:     endReadRTC();
  2671     05C0  22FD               	fcall	_endReadRTC
  2672                           
  2673                           ;RTC.c: 196:     T7 = (swapNibbles(day) & 0x0F);
  2674     05C1  0878               	movf	getDate@day,w
  2675     05C2  23F7               	fcall	_swapNibbles
  2676     05C3  390F               	andlw	15
  2677     05C4  1283               	bcf	3,5	;RP0=0, select bank0
  2678     05C5  1303               	bcf	3,6	;RP1=0, select bank0
  2679     05C6  00A9               	movwf	41
  2680                           
  2681                           ;RTC.c: 197:     T6 = (day & 0x0F);
  2682     05C7  0878               	movf	getDate@day,w
  2683     05C8  390F               	andlw	15
  2684     05C9  00A8               	movwf	40
  2685                           
  2686                           ;RTC.c: 198:     T4 = (swapNibbles(month) & 0x0F);
  2687     05CA  0879               	movf	getDate@month,w
  2688     05CB  23F7               	fcall	_swapNibbles
  2689     05CC  390F               	andlw	15
  2690     05CD  1283               	bcf	3,5	;RP0=0, select bank0
  2691     05CE  1303               	bcf	3,6	;RP1=0, select bank0
  2692     05CF  00A6               	movwf	38
  2693                           
  2694                           ;RTC.c: 199:     T3 = (month & 0x0F);
  2695     05D0  0879               	movf	getDate@month,w
  2696     05D1  390F               	andlw	15
  2697     05D2  00A5               	movwf	37
  2698                           
  2699                           ;RTC.c: 200:     T1 = (swapNibbles(year) & 0x0F);
  2700     05D3  087A               	movf	getDate@year,w
  2701     05D4  23F7               	fcall	_swapNibbles
  2702     05D5  390F               	andlw	15
  2703     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  2704     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  2705     05D8  00A3               	movwf	35
  2706                           
  2707                           ;RTC.c: 201:     T0 = (year & 0x0F);
  2708     05D9  087A               	movf	getDate@year,w
  2709     05DA  390F               	andlw	15
  2710     05DB  00A2               	movwf	34
  2711                           
  2712                           ;RTC.c: 202:     T2 = T5 = 10;
  2713     05DC  300A               	movlw	10
  2714     05DD  00A7               	movwf	39
  2715     05DE  00A4               	movwf	36
  2716                           
  2717                           ;RTC.c: 203:     leftDP = rightDP = 0x00;
  2718     05DF  01B1               	clrf	_rightDP
  2719     05E0  01B2               	clrf	_leftDP
  2720                           
  2721                           ;RTC.c: 205:     loadDisplay();
  2722     05E1  2675               	fcall	_loadDisplay
  2723     05E2  0008               	return
  2724     05E3                     __end_of_getDate:
  2725                           
  2726                           	psect	text18
  2727     03F7                     __ptext18:	
  2728 ;; *************** function _swapNibbles *****************
  2729 ;; Defined at:
  2730 ;;		line 93 in file "main.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  data            1    wreg     unsigned char 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  data            1    3[COMMON] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      unsigned char 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2744 ;;      Params:         0       0       0       0       0
  2745 ;;      Locals:         1       0       0       0       0
  2746 ;;      Temps:          3       0       0       0       0
  2747 ;;      Totals:         4       0       0       0       0
  2748 ;;Total ram usage:        4 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_getTime
  2754 ;;		_getDate
  2755 ;;		_hoursSetting
  2756 ;;		_minuteSetting
  2757 ;;		_daySetting
  2758 ;;		_monthSetting
  2759 ;;		_yearSetting
  2760 ;;		_blankingSetting
  2761 ;;		_unblankingSetting
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765     03F7                     _swapNibbles:	
  2766                           ;psect for function _swapNibbles
  2767                           
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _swapNibbles: [wreg+status,2+status,0]
  2771                           ;swapNibbles@data stored from wreg
  2772     03F7  00F3               	movwf	swapNibbles@data
  2773                           
  2774                           ;main.c: 94:     return ((data & 0x0F) << 4 | (data & 0xF0) >> 4);
  2775     03F8  0873               	movf	swapNibbles@data,w
  2776     03F9  00F0               	movwf	??_swapNibbles
  2777     03FA  3004               	movlw	4
  2778     03FB                     u985:
  2779     03FB  1003               	clrc
  2780     03FC  0CF0               	rrf	??_swapNibbles,f
  2781     03FD  3EFF               	addlw	-1
  2782     03FE  1D03               	skipz
  2783     03FF  2BFB               	goto	u985
  2784     0400  300F               	movlw	15
  2785     0401  0570               	andwf	??_swapNibbles,w
  2786     0402  00F1               	movwf	??_swapNibbles+1
  2787     0403  0873               	movf	swapNibbles@data,w
  2788     0404  390F               	andlw	15
  2789     0405  00F2               	movwf	??_swapNibbles+2
  2790     0406  3003               	movlw	3
  2791     0407                     u995:
  2792     0407  1003               	clrc
  2793     0408  0DF2               	rlf	??_swapNibbles+2,f
  2794     0409  3EFF               	addlw	-1
  2795     040A  1D03               	skipz
  2796     040B  2C07               	goto	u995
  2797     040C  1003               	clrc
  2798     040D  0D72               	rlf	??_swapNibbles+2,w
  2799     040E  0471               	iorwf	??_swapNibbles+1,w
  2800     040F  0008               	return
  2801     0410                     __end_of_swapNibbles:
  2802                           
  2803                           	psect	text19
  2804     0308                     __ptext19:	
  2805 ;; *************** function _readDataRTC *****************
  2806 ;; Defined at:
  2807 ;;		line 16 in file "RTC.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  data            1    3[COMMON] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      unsigned char 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2821 ;;      Params:         0       0       0       0       0
  2822 ;;      Locals:         1       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0
  2824 ;;      Totals:         1       0       0       0       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; Hardware stack levels required when called: 1
  2828 ;; This function calls:
  2829 ;;		_I2C_ReadByte
  2830 ;; This function is called by:
  2831 ;;		_getTime
  2832 ;;		_getDate
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836     0308                     _readDataRTC:	
  2837                           ;psect for function _readDataRTC
  2838                           
  2839                           
  2840                           ;RTC.c: 17:     unsigned char data;;RTC.c: 18:     data = I2C_ReadByte();
  2841                           
  2842                           ;incstack = 0
  2843                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2844     0308  258D               	fcall	_I2C_ReadByte
  2845     0309  00F3               	movwf	readDataRTC@data
  2846                           
  2847                           ;RTC.c: 19:     return data;
  2848     030A  0873               	movf	readDataRTC@data,w
  2849     030B  0008               	return
  2850     030C                     __end_of_readDataRTC:
  2851                           
  2852                           	psect	text20
  2853     0385                     __ptext20:	
  2854 ;; *************** function _I2C_SendACK *****************
  2855 ;; Defined at:
  2856 ;;		line 97 in file "IIC.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		None
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2870 ;;      Params:         0       0       0       0       0
  2871 ;;      Locals:         0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0
  2873 ;;      Totals:         0       0       0       0       0
  2874 ;;Total ram usage:        0 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_getTime
  2880 ;;		_getDate
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884     0385                     _I2C_SendACK:	
  2885                           ;psect for function _I2C_SendACK
  2886                           
  2887                           
  2888                           ;IIC.c: 98:     TRISAbits.TRISA0 = 0;
  2889                           
  2890                           ;incstack = 0
  2891                           ; Regs used in _I2C_SendACK: []
  2892     0385  1683               	bsf	3,5	;RP0=1, select bank1
  2893     0386  1303               	bcf	3,6	;RP1=0, select bank1
  2894     0387  1005               	bcf	5,0	;volatile
  2895                           
  2896                           ;IIC.c: 99:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2897     0388  2B89               	nop2	;2 cycle nop
  2898                           
  2899                           ;IIC.c: 100:     TRISAbits.TRISA1 = 0;
  2900     0389  1683               	bsf	3,5	;RP0=1, select bank1
  2901     038A  1303               	bcf	3,6	;RP1=0, select bank1
  2902     038B  1085               	bcf	5,1	;volatile
  2903                           
  2904                           ;IIC.c: 101:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  2905     038C  2B8D               	nop2	;2 cycle nop
  2906                           
  2907                           ;IIC.c: 102:     TRISAbits.TRISA0 = 1;
  2908     038D  1683               	bsf	3,5	;RP0=1, select bank1
  2909     038E  1303               	bcf	3,6	;RP1=0, select bank1
  2910     038F  1405               	bsf	5,0	;volatile
  2911                           
  2912                           ;IIC.c: 103:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  2913     0390  2B91               	nop2	;2 cycle nop
  2914     0391  2B92               	nop2	;2 cycle nop
  2915     0392  0000               	nop
  2916     0393  0008               	return
  2917     0394                     __end_of_I2C_SendACK:
  2918                           
  2919                           	psect	text21
  2920     0410                     __ptext21:	
  2921 ;; *************** function _Init *****************
  2922 ;; Defined at:
  2923 ;;		line 68 in file "main.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;		None
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : B00/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  2937 ;;      Params:         0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0
  2940 ;;      Totals:         0       0       0       0       0
  2941 ;;Total ram usage:        0 bytes
  2942 ;; Hardware stack levels used: 1
  2943 ;; Hardware stack levels required when called: 5
  2944 ;; This function calls:
  2945 ;;		_InitI2C
  2946 ;;		_InitTubes
  2947 ;;		_checkRTCType
  2948 ;;		_isRTCRunning
  2949 ;;		_startRTC
  2950 ;; This function is called by:
  2951 ;;		_main
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955     0410                     _Init:	
  2956                           ;psect for function _Init
  2957                           
  2958                           
  2959                           ;main.c: 69:     CMCON = 0b111;
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2963     0410  3007               	movlw	7
  2964     0411  009F               	movwf	31	;volatile
  2965                           
  2966                           ;main.c: 70:     TRISA = 0b00101111;
  2967     0412  302F               	movlw	47
  2968     0413  1683               	bsf	3,5	;RP0=1, select bank1
  2969     0414  0085               	movwf	5	;volatile
  2970                           
  2971                           ;main.c: 71:     TRISB = 0b00000000;
  2972     0415  0186               	clrf	6	;volatile
  2973                           
  2974                           ;main.c: 72:     OPTION_REG = 0b11011111;
  2975     0416  30DF               	movlw	223
  2976     0417  0081               	movwf	1	;volatile
  2977                           
  2978                           ;main.c: 73:     PORTA_SHADOW = 0x00;
  2979     0418  01A3               	clrf	_PORTA_SHADOW^(0+128)
  2980                           
  2981                           ;main.c: 74:     PORTB_SHADOW = 0x00;
  2982     0419  1283               	bcf	3,5	;RP0=0, select bank0
  2983     041A  01B5               	clrf	_PORTB_SHADOW
  2984                           
  2985                           ;main.c: 75:     PORTB = PORTB_SHADOW;
  2986     041B  0835               	movf	_PORTB_SHADOW,w
  2987     041C  0086               	movwf	6	;volatile
  2988                           
  2989                           ;main.c: 76:     Flag = 0x10;
  2990     041D  3010               	movlw	16
  2991     041E  00B6               	movwf	_Flag
  2992                           
  2993                           ;main.c: 77:     Flag2 = 0x00;
  2994     041F  1683               	bsf	3,5	;RP0=1, select bank1
  2995     0420  01A4               	clrf	_Flag2^(0+128)
  2996                           
  2997                           ;main.c: 78:     ErrFlag = 0x00;
  2998     0421  1283               	bcf	3,5	;RP0=0, select bank0
  2999     0422  01B3               	clrf	_ErrFlag
  3000                           
  3001                           ;main.c: 79:     InitI2C();
  3002     0423  2311               	fcall	_InitI2C
  3003                           
  3004                           ;main.c: 80:     InitTubes();
  3005     0424  2300               	fcall	_InitTubes
  3006                           
  3007                           ;main.c: 82:     if(isRTCRunning()) {
  3008     0425  234D               	fcall	_isRTCRunning
  3009     0426  1C03               	btfss	3,0
  3010     0427  2C2D               	goto	l2231
  3011                           
  3012                           ;main.c: 83:         ((Flag) |= (1<<4));
  3013     0428  1283               	bcf	3,5	;RP0=0, select bank0
  3014     0429  1303               	bcf	3,6	;RP1=0, select bank0
  3015     042A  1636               	bsf	_Flag,4
  3016     042B                     l2229:
  3017                           
  3018                           ;main.c: 84:         startRTC();
  3019     042B  26AE               	fcall	_startRTC
  3020                           
  3021                           ;main.c: 85:     } else {
  3022     042C  0008               	return
  3023     042D                     l2231:
  3024                           
  3025                           ;main.c: 86:         if(checkRTCType()) {
  3026     042D  2611               	fcall	_checkRTCType
  3027     042E  1C03               	btfss	3,0
  3028     042F  0008               	return
  3029     0430  2C2B               	goto	l2229
  3030     0431                     __end_of_Init:
  3031                           
  3032                           	psect	text22
  3033     06AE                     __ptext22:	
  3034 ;; *************** function _startRTC *****************
  3035 ;; Defined at:
  3036 ;;		line 69 in file "RTC.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  RTCaddress      1   11[COMMON] unsigned char 
  3041 ;;  clockTest       1   10[COMMON] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 300/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3051 ;;      Params:         0       0       0       0       0
  3052 ;;      Locals:         2       0       0       0       0
  3053 ;;      Temps:          1       0       0       0       0
  3054 ;;      Totals:         3       0       0       0       0
  3055 ;;Total ram usage:        3 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 4
  3058 ;; This function calls:
  3059 ;;		_displayError
  3060 ;;		_endWriteRTC
  3061 ;;		_readByteRTC
  3062 ;;		_reqWriteRTC
  3063 ;;		_writeDataRTC
  3064 ;; This function is called by:
  3065 ;;		_Init
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069     06AE                     _startRTC:	
  3070                           ;psect for function _startRTC
  3071                           
  3072                           
  3073                           ;RTC.c: 70:     unsigned char clockTest, RTCaddress;;RTC.c: 71:     reqWriteRTC(0x00);
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _startRTC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3077     06AE  3000               	movlw	0
  3078     06AF  2318               	fcall	_reqWriteRTC
  3079                           
  3080                           ;RTC.c: 72:     writeDataRTC(0x00);
  3081     06B0  3000               	movlw	0
  3082     06B1  2304               	fcall	_writeDataRTC
  3083                           
  3084                           ;RTC.c: 74:     writeDataRTC(0x30);
  3085     06B2  3030               	movlw	48
  3086     06B3  2304               	fcall	_writeDataRTC
  3087                           
  3088                           ;RTC.c: 75:     writeDataRTC(0x12);
  3089     06B4  3012               	movlw	18
  3090     06B5  2304               	fcall	_writeDataRTC
  3091                           
  3092                           ;RTC.c: 76:     endWriteRTC();
  3093     06B6  22FB               	fcall	_endWriteRTC
  3094                           
  3095                           ;RTC.c: 77:     reqWriteRTC(0x04);
  3096     06B7  3004               	movlw	4
  3097     06B8  2318               	fcall	_reqWriteRTC
  3098                           
  3099                           ;RTC.c: 78:     writeDataRTC(0x28);
  3100     06B9  3028               	movlw	40
  3101     06BA  2304               	fcall	_writeDataRTC
  3102                           
  3103                           ;RTC.c: 79:     writeDataRTC(0x7);
  3104     06BB  3007               	movlw	7
  3105     06BC  2304               	fcall	_writeDataRTC
  3106                           
  3107                           ;RTC.c: 80:     writeDataRTC(0x10);
  3108     06BD  3010               	movlw	16
  3109     06BE  2304               	fcall	_writeDataRTC
  3110                           
  3111                           ;RTC.c: 81:     endWriteRTC();
  3112     06BF  22FB               	fcall	_endWriteRTC
  3113                           
  3114                           ;RTC.c: 83:     reqWriteRTC(0x14);
  3115     06C0  3014               	movlw	20
  3116     06C1  2318               	fcall	_reqWriteRTC
  3117                           
  3118                           ;RTC.c: 84:     writeDataRTC(0x00);
  3119     06C2  3000               	movlw	0
  3120     06C3  2304               	fcall	_writeDataRTC
  3121                           
  3122                           ;RTC.c: 85:     writeDataRTC(0x00);
  3123     06C4  3000               	movlw	0
  3124     06C5  2304               	fcall	_writeDataRTC
  3125                           
  3126                           ;RTC.c: 86:     endWriteRTC();
  3127     06C6  22FB               	fcall	_endWriteRTC
  3128                           
  3129                           ;RTC.c: 88:     if(((Flag)>>(4) & 1)) {
  3130     06C7  1283               	bcf	3,5	;RP0=0, select bank0
  3131     06C8  1303               	bcf	3,6	;RP1=0, select bank0
  3132     06C9  0836               	movf	_Flag,w
  3133     06CA  00F9               	movwf	??_startRTC
  3134     06CB  3004               	movlw	4
  3135     06CC                     u1015:
  3136     06CC  1003               	clrc
  3137     06CD  0CF9               	rrf	??_startRTC,f
  3138     06CE  3EFF               	addlw	-1
  3139     06CF  1D03               	skipz
  3140     06D0  2ECC               	goto	u1015
  3141     06D1  1C79               	btfss	??_startRTC,0
  3142     06D2  2ED5               	goto	l1975
  3143                           
  3144                           ;RTC.c: 89:         RTCaddress = 0x00;
  3145     06D3  01FB               	clrf	startRTC@RTCaddress
  3146                           
  3147                           ;RTC.c: 90:     } else {
  3148     06D4  2ED7               	goto	l1977
  3149     06D5                     l1975:
  3150                           
  3151                           ;RTC.c: 91:         RTCaddress = 0x0F;
  3152     06D5  300F               	movlw	15
  3153     06D6  00FB               	movwf	startRTC@RTCaddress
  3154     06D7                     l1977:
  3155                           
  3156                           ;RTC.c: 94:     clockTest = readByteRTC(RTCaddress);
  3157     06D7  087B               	movf	startRTC@RTCaddress,w
  3158     06D8  2326               	fcall	_readByteRTC
  3159     06D9  00FA               	movwf	startRTC@clockTest
  3160                           
  3161                           ;RTC.c: 95:     if(!((clockTest)>>(7) & 1)) {
  3162     06DA  087A               	movf	startRTC@clockTest,w
  3163     06DB  00F9               	movwf	??_startRTC
  3164     06DC  3007               	movlw	7
  3165     06DD                     u1035:
  3166     06DD  1003               	clrc
  3167     06DE  0CF9               	rrf	??_startRTC,f
  3168     06DF  3EFF               	addlw	-1
  3169     06E0  1D03               	skipz
  3170     06E1  2EDD               	goto	u1035
  3171     06E2  1879               	btfsc	??_startRTC,0
  3172     06E3  2EEF               	goto	l193
  3173                           
  3174                           ;RTC.c: 96:         ((ErrFlag) &= ~(1<<1));
  3175     06E4  30FD               	movlw	253
  3176     06E5  00FF               	movwf	127
  3177     06E6  087F               	movf	127,w
  3178     06E7  1283               	bcf	3,5	;RP0=0, select bank0
  3179     06E8  1303               	bcf	3,6	;RP1=0, select bank0
  3180     06E9  05B3               	andwf	_ErrFlag,f
  3181                           
  3182                           ;RTC.c: 97:         ((ErrFlag) &= ~(1<<0));
  3183     06EA  30FE               	movlw	254
  3184     06EB  00FF               	movwf	127
  3185     06EC  087F               	movf	127,w
  3186     06ED  05B3               	andwf	_ErrFlag,f
  3187                           
  3188                           ;RTC.c: 98:     } else {
  3189     06EE  0008               	return
  3190     06EF                     l193:
  3191                           
  3192                           ;RTC.c: 100:         ((ErrFlag) |= (1<<1));
  3193     06EF  1283               	bcf	3,5	;RP0=0, select bank0
  3194     06F0  1303               	bcf	3,6	;RP1=0, select bank0
  3195     06F1  14B3               	bsf	_ErrFlag,1
  3196                           
  3197                           ;RTC.c: 101:         displayError();
  3198     06F2  23E0               	fcall	_displayError
  3199     06F3  0008               	return
  3200     06F4                     __end_of_startRTC:
  3201                           
  3202                           	psect	text23
  3203     03E0                     __ptext23:	
  3204 ;; *************** function _displayError *****************
  3205 ;; Defined at:
  3206 ;;		line 115 in file "tubes.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 300/0
  3217 ;;		On exit  : 300/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3220 ;;      Params:         0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0
  3222 ;;      Temps:          1       0       0       0       0
  3223 ;;      Totals:         1       0       0       0       0
  3224 ;;Total ram usage:        1 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 3
  3227 ;; This function calls:
  3228 ;;		_blankTubes
  3229 ;;		_loadDisplay
  3230 ;; This function is called by:
  3231 ;;		_main
  3232 ;;		_startRTC
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236     03E0                     _displayError:	
  3237                           ;psect for function _displayError
  3238                           
  3239                           
  3240                           ;tubes.c: 116:     blankTubes();
  3241                           
  3242                           ;incstack = 0
  3243                           ; Regs used in _displayError: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3244     03E0  23C9               	fcall	_blankTubes
  3245                           
  3246                           ;tubes.c: 117:     if(((ErrFlag)>>(1) & 1)) {
  3247     03E1  0833               	movf	_ErrFlag,w
  3248     03E2  00F8               	movwf	??_displayError
  3249     03E3  3001               	movlw	1
  3250     03E4                     u955:
  3251     03E4  1003               	clrc
  3252     03E5  0CF8               	rrf	??_displayError,f
  3253     03E6  3EFF               	addlw	-1
  3254     03E7  1D03               	skipz
  3255     03E8  2BE4               	goto	u955
  3256     03E9  1C78               	btfss	??_displayError,0
  3257     03EA  2BF3               	goto	l295
  3258                           
  3259                           ;tubes.c: 118:         T0 = T1 = T2 = 6;
  3260     03EB  3006               	movlw	6
  3261     03EC                     L2:
  3262     03EC  00A4               	movwf	36
  3263     03ED  00A3               	movwf	35
  3264     03EE  00A2               	movwf	34
  3265                           
  3266                           ;tubes.c: 119:         leftDP = rightDP = 0x00;
  3267     03EF  01B1               	clrf	_rightDP
  3268     03F0  01B2               	clrf	_leftDP
  3269                           
  3270                           ;tubes.c: 120:         loadDisplay();
  3271     03F1  2675               	fcall	_loadDisplay
  3272                           
  3273                           ;tubes.c: 121:     } else if (((ErrFlag)>>(0) & 1)) {
  3274     03F2  0008               	return
  3275     03F3                     l295:
  3276     03F3  1C33               	btfss	_ErrFlag,0
  3277     03F4  0008               	return
  3278                           
  3279                           ;tubes.c: 122:         T0 = T1 = T2 = 9;
  3280     03F5  3009               	movlw	9
  3281     03F6  2BEC               	goto	L2
  3282     03F7                     __end_of_displayError:
  3283                           
  3284                           	psect	text24
  3285     034D                     __ptext24:	
  3286 ;; *************** function _isRTCRunning *****************
  3287 ;; Defined at:
  3288 ;;		line 62 in file "RTC.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  data            1    8[COMMON] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;		None               void
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 300/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3302 ;;      Params:         0       0       0       0       0
  3303 ;;      Locals:         1       0       0       0       0
  3304 ;;      Temps:          1       0       0       0       0
  3305 ;;      Totals:         2       0       0       0       0
  3306 ;;Total ram usage:        2 bytes
  3307 ;; Hardware stack levels used: 1
  3308 ;; Hardware stack levels required when called: 3
  3309 ;; This function calls:
  3310 ;;		_readByteRTC
  3311 ;; This function is called by:
  3312 ;;		_Init
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316     034D                     _isRTCRunning:	
  3317                           ;psect for function _isRTCRunning
  3318                           
  3319                           
  3320                           ;RTC.c: 63:     unsigned char data;;RTC.c: 64:     data = readByteRTC(0x00);
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3324     034D  3000               	movlw	0
  3325     034E  2326               	fcall	_readByteRTC
  3326     034F  00F8               	movwf	isRTCRunning@data
  3327                           
  3328                           ;RTC.c: 65:     return ((data)>>(7) & 1);
  3329     0350  0878               	movf	isRTCRunning@data,w
  3330     0351  00F7               	movwf	??_isRTCRunning
  3331     0352  3007               	movlw	7
  3332     0353                     u1005:
  3333     0353  1003               	clrc
  3334     0354  0CF7               	rrf	??_isRTCRunning,f
  3335     0355  3EFF               	addlw	-1
  3336     0356  1D03               	skipz
  3337     0357  2B53               	goto	u1005
  3338     0358  0C77               	rrf	??_isRTCRunning,w
  3339     0359  0008               	return
  3340     035A                     __end_of_isRTCRunning:
  3341                           
  3342                           	psect	text25
  3343     0611                     __ptext25:	
  3344 ;; *************** function _checkRTCType *****************
  3345 ;; Defined at:
  3346 ;;		line 106 in file "RTC.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  data            1    8[COMMON] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;		None               void
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3360 ;;      Params:         0       0       0       0       0
  3361 ;;      Locals:         1       0       0       0       0
  3362 ;;      Temps:          1       0       0       0       0
  3363 ;;      Totals:         2       0       0       0       0
  3364 ;;Total ram usage:        2 bytes
  3365 ;; Hardware stack levels used: 1
  3366 ;; Hardware stack levels required when called: 3
  3367 ;; This function calls:
  3368 ;;		_readByteRTC
  3369 ;;		_writeByteRTC
  3370 ;; This function is called by:
  3371 ;;		_Init
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375     0611                     _checkRTCType:	
  3376                           ;psect for function _checkRTCType
  3377                           
  3378                           
  3379                           ;RTC.c: 107:     unsigned char data;;RTC.c: 108:     data = readByteRTC(0x0F);
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3383     0611  300F               	movlw	15
  3384     0612  2326               	fcall	_readByteRTC
  3385     0613  00F8               	movwf	checkRTCType@data
  3386                           
  3387                           ;RTC.c: 109:     if(((data)>>(7) & 1)) {
  3388     0614  0878               	movf	checkRTCType@data,w
  3389     0615  00F7               	movwf	??_checkRTCType
  3390     0616  3007               	movlw	7
  3391     0617                     u1055:
  3392     0617  1003               	clrc
  3393     0618  0CF7               	rrf	??_checkRTCType,f
  3394     0619  3EFF               	addlw	-1
  3395     061A  1D03               	skipz
  3396     061B  2E17               	goto	u1055
  3397     061C  1C77               	btfss	??_checkRTCType,0
  3398     061D  2E41               	goto	l2013
  3399                           
  3400                           ;RTC.c: 112:         ((data) &= ~(1<<0));
  3401     061E  30FE               	movlw	254
  3402     061F  00FF               	movwf	127
  3403     0620  087F               	movf	127,w
  3404     0621  05F8               	andwf	checkRTCType@data,f
  3405                           
  3406                           ;RTC.c: 113:         writeByteRTC(0x0F,data);
  3407     0622  0878               	movf	checkRTCType@data,w
  3408     0623  00F5               	movwf	writeByteRTC@data
  3409     0624  300F               	movlw	15
  3410     0625  231F               	fcall	_writeByteRTC
  3411                           
  3412                           ;RTC.c: 114:         ((data) |= (1<<0));
  3413     0626  1478               	bsf	checkRTCType@data,0
  3414                           
  3415                           ;RTC.c: 115:         writeByteRTC(0x0F,data);
  3416     0627  0878               	movf	checkRTCType@data,w
  3417     0628  00F5               	movwf	writeByteRTC@data
  3418     0629  300F               	movlw	15
  3419     062A  231F               	fcall	_writeByteRTC
  3420                           
  3421                           ;RTC.c: 116:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  3422     062B  2E2C               	nop2	;2 cycle nop
  3423     062C  2E2D               	nop2	;2 cycle nop
  3424     062D  0000               	nop
  3425                           
  3426                           ;RTC.c: 117:         data = readByteRTC(0x0F);
  3427     062E  300F               	movlw	15
  3428     062F  2326               	fcall	_readByteRTC
  3429     0630  00F8               	movwf	checkRTCType@data
  3430                           
  3431                           ;RTC.c: 118:         if(!((data)>>(0) & 1)) {
  3432     0631  1878               	btfsc	checkRTCType@data,0
  3433     0632  2E3E               	goto	l199
  3434                           
  3435                           ;RTC.c: 119:             writeByteRTC(0x0F, 0x00);
  3436     0633  01F5               	clrf	writeByteRTC@data
  3437     0634  300F               	movlw	15
  3438     0635  231F               	fcall	_writeByteRTC
  3439                           
  3440                           ;RTC.c: 120:             ((Flag) &= ~(1<<4));
  3441     0636  30EF               	movlw	239
  3442     0637  00FF               	movwf	127
  3443     0638  087F               	movf	127,w
  3444     0639  1283               	bcf	3,5	;RP0=0, select bank0
  3445     063A  1303               	bcf	3,6	;RP1=0, select bank0
  3446     063B  05B6               	andwf	_Flag,f
  3447                           
  3448                           ;RTC.c: 121:             return 1;
  3449     063C  1403               	setc
  3450     063D  0008               	return
  3451     063E                     l199:
  3452                           
  3453                           ;RTC.c: 123:             ((Flag) |= (1<<4));
  3454     063E  1283               	bcf	3,5	;RP0=0, select bank0
  3455     063F  1303               	bcf	3,6	;RP1=0, select bank0
  3456     0640  1636               	bsf	_Flag,4
  3457     0641                     l2013:
  3458                           
  3459                           ;RTC.c: 126:     return 0;
  3460     0641  1003               	clrc
  3461     0642  0008               	return
  3462     0643                     __end_of_checkRTCType:
  3463                           
  3464                           	psect	text26
  3465     031F                     __ptext26:	
  3466 ;; *************** function _writeByteRTC *****************
  3467 ;; Defined at:
  3468 ;;		line 55 in file "RTC.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  address         1    wreg     unsigned char 
  3471 ;;  data            1    5[COMMON] unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  address         1    6[COMMON] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3483 ;;      Params:         1       0       0       0       0
  3484 ;;      Locals:         1       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0
  3486 ;;      Totals:         2       0       0       0       0
  3487 ;;Total ram usage:        2 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; Hardware stack levels required when called: 2
  3490 ;; This function calls:
  3491 ;;		_endWriteRTC
  3492 ;;		_reqWriteRTC
  3493 ;;		_writeDataRTC
  3494 ;; This function is called by:
  3495 ;;		_checkRTCType
  3496 ;;		_hoursSetting
  3497 ;;		_minuteSetting
  3498 ;;		_daySetting
  3499 ;;		_monthSetting
  3500 ;;		_yearSetting
  3501 ;;		_blankingSetting
  3502 ;;		_unblankingSetting
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506     031F                     _writeByteRTC:	
  3507                           ;psect for function _writeByteRTC
  3508                           
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3512                           ;writeByteRTC@address stored from wreg
  3513     031F  00F6               	movwf	writeByteRTC@address
  3514                           
  3515                           ;RTC.c: 56:     reqWriteRTC(address);
  3516     0320  0876               	movf	writeByteRTC@address,w
  3517     0321  2318               	fcall	_reqWriteRTC
  3518                           
  3519                           ;RTC.c: 57:     writeDataRTC(data);
  3520     0322  0875               	movf	writeByteRTC@data,w
  3521     0323  2304               	fcall	_writeDataRTC
  3522                           
  3523                           ;RTC.c: 58:     endWriteRTC();
  3524     0324  22FB               	fcall	_endWriteRTC
  3525     0325  0008               	return
  3526     0326                     __end_of_writeByteRTC:
  3527                           
  3528                           	psect	text27
  3529     0304                     __ptext27:	
  3530 ;; *************** function _writeDataRTC *****************
  3531 ;; Defined at:
  3532 ;;		line 45 in file "RTC.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  data            1    wreg     unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  data            1    4[COMMON] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3546 ;;      Params:         0       0       0       0       0
  3547 ;;      Locals:         1       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0
  3549 ;;      Totals:         1       0       0       0       0
  3550 ;;Total ram usage:        1 bytes
  3551 ;; Hardware stack levels used: 1
  3552 ;; Hardware stack levels required when called: 1
  3553 ;; This function calls:
  3554 ;;		_I2C_WriteByte
  3555 ;; This function is called by:
  3556 ;;		_writeByteRTC
  3557 ;;		_startRTC
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561     0304                     _writeDataRTC:	
  3562                           ;psect for function _writeDataRTC
  3563                           
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3567                           ;writeDataRTC@data stored from wreg
  3568     0304  00F4               	movwf	writeDataRTC@data
  3569                           
  3570                           ;RTC.c: 46:     I2C_WriteByte(data);
  3571     0305  0874               	movf	writeDataRTC@data,w
  3572     0306  273A               	fcall	_I2C_WriteByte
  3573     0307  0008               	return
  3574     0308                     __end_of_writeDataRTC:
  3575                           
  3576                           	psect	text28
  3577     0318                     __ptext28:	
  3578 ;; *************** function _reqWriteRTC *****************
  3579 ;; Defined at:
  3580 ;;		line 38 in file "RTC.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;  address         1    wreg     unsigned char 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  address         1    4[COMMON] unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3594 ;;      Params:         0       0       0       0       0
  3595 ;;      Locals:         1       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0
  3597 ;;      Totals:         1       0       0       0       0
  3598 ;;Total ram usage:        1 bytes
  3599 ;; Hardware stack levels used: 1
  3600 ;; Hardware stack levels required when called: 1
  3601 ;; This function calls:
  3602 ;;		_I2C_Start
  3603 ;;		_I2C_WriteByte
  3604 ;; This function is called by:
  3605 ;;		_writeByteRTC
  3606 ;;		_startRTC
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610     0318                     _reqWriteRTC:	
  3611                           ;psect for function _reqWriteRTC
  3612                           
  3613                           
  3614                           ;incstack = 0
  3615                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3616                           ;reqWriteRTC@address stored from wreg
  3617     0318  00F4               	movwf	reqWriteRTC@address
  3618                           
  3619                           ;RTC.c: 39:     I2C_Start();
  3620     0319  2368               	fcall	_I2C_Start
  3621                           
  3622                           ;RTC.c: 40:     I2C_WriteByte(0b11010000);
  3623     031A  30D0               	movlw	208
  3624     031B  273A               	fcall	_I2C_WriteByte
  3625                           
  3626                           ;RTC.c: 41:     I2C_WriteByte(address);
  3627     031C  0874               	movf	reqWriteRTC@address,w
  3628     031D  273A               	fcall	_I2C_WriteByte
  3629     031E  0008               	return
  3630     031F                     __end_of_reqWriteRTC:
  3631                           
  3632                           	psect	text29
  3633     02FB                     __ptext29:	
  3634 ;; *************** function _endWriteRTC *****************
  3635 ;; Defined at:
  3636 ;;		line 50 in file "RTC.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		status,2, status,0, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3650 ;;      Params:         0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used: 1
  3656 ;; Hardware stack levels required when called: 1
  3657 ;; This function calls:
  3658 ;;		_I2C_Stop
  3659 ;; This function is called by:
  3660 ;;		_writeByteRTC
  3661 ;;		_startRTC
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665     02FB                     _endWriteRTC:	
  3666                           ;psect for function _endWriteRTC
  3667                           
  3668                           
  3669                           ;RTC.c: 51:     I2C_Stop();
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _endWriteRTC: [status,2+status,0+pclath+cstack]
  3673     02FB  2394               	fcall	_I2C_Stop
  3674     02FC  0008               	return
  3675     02FD                     __end_of_endWriteRTC:
  3676                           
  3677                           	psect	text30
  3678     0326                     __ptext30:	
  3679 ;; *************** function _readByteRTC *****************
  3680 ;; Defined at:
  3681 ;;		line 29 in file "RTC.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  address         1    wreg     unsigned char 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  address         1    5[COMMON] unsigned char 
  3686 ;;  data            1    6[COMMON] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      unsigned char 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3696 ;;      Params:         0       0       0       0       0
  3697 ;;      Locals:         2       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0
  3699 ;;      Totals:         2       0       0       0       0
  3700 ;;Total ram usage:        2 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 2
  3703 ;; This function calls:
  3704 ;;		_I2C_ReadByte
  3705 ;;		_endReadRTC
  3706 ;;		_reqReadRTC
  3707 ;; This function is called by:
  3708 ;;		_isRTCRunning
  3709 ;;		_startRTC
  3710 ;;		_checkRTCType
  3711 ;;		_getTime
  3712 ;;		_hoursSetting
  3713 ;;		_minuteSetting
  3714 ;;		_daySetting
  3715 ;;		_monthSetting
  3716 ;;		_yearSetting
  3717 ;;		_blankingSetting
  3718 ;;		_unblankingSetting
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722     0326                     _readByteRTC:	
  3723                           ;psect for function _readByteRTC
  3724                           
  3725                           
  3726                           ;incstack = 0
  3727                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3728                           ;readByteRTC@address stored from wreg
  3729     0326  00F5               	movwf	readByteRTC@address
  3730                           
  3731                           ;RTC.c: 31:     reqReadRTC(address);
  3732     0327  0875               	movf	readByteRTC@address,w
  3733     0328  2338               	fcall	_reqReadRTC
  3734                           
  3735                           ;RTC.c: 32:     data = I2C_ReadByte();
  3736     0329  258D               	fcall	_I2C_ReadByte
  3737     032A  00F6               	movwf	readByteRTC@data
  3738                           
  3739                           ;RTC.c: 33:     endReadRTC();
  3740     032B  22FD               	fcall	_endReadRTC
  3741                           
  3742                           ;RTC.c: 34:     return data;
  3743     032C  0876               	movf	readByteRTC@data,w
  3744     032D  0008               	return
  3745     032E                     __end_of_readByteRTC:
  3746                           
  3747                           	psect	text31
  3748     0338                     __ptext31:	
  3749 ;; *************** function _reqReadRTC *****************
  3750 ;; Defined at:
  3751 ;;		line 6 in file "RTC.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  address         1    wreg     unsigned char 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  address         1    4[COMMON] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3765 ;;      Params:         0       0       0       0       0
  3766 ;;      Locals:         1       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0
  3768 ;;      Totals:         1       0       0       0       0
  3769 ;;Total ram usage:        1 bytes
  3770 ;; Hardware stack levels used: 1
  3771 ;; Hardware stack levels required when called: 1
  3772 ;; This function calls:
  3773 ;;		_I2C_ReStart
  3774 ;;		_I2C_Start
  3775 ;;		_I2C_WriteByte
  3776 ;; This function is called by:
  3777 ;;		_readByteRTC
  3778 ;;		_getTime
  3779 ;;		_getDate
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783     0338                     _reqReadRTC:	
  3784                           ;psect for function _reqReadRTC
  3785                           
  3786                           
  3787                           ;incstack = 0
  3788                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3789                           ;reqReadRTC@address stored from wreg
  3790     0338  00F4               	movwf	reqReadRTC@address
  3791                           
  3792                           ;RTC.c: 7:     I2C_Start();
  3793     0339  2368               	fcall	_I2C_Start
  3794                           
  3795                           ;RTC.c: 8:     I2C_WriteByte(0b11010000);
  3796     033A  30D0               	movlw	208
  3797     033B  273A               	fcall	_I2C_WriteByte
  3798                           
  3799                           ;RTC.c: 9:     I2C_WriteByte(address);
  3800     033C  0874               	movf	reqReadRTC@address,w
  3801     033D  273A               	fcall	_I2C_WriteByte
  3802                           
  3803                           ;RTC.c: 10:     I2C_ReStart();
  3804     033E  23A5               	fcall	_I2C_ReStart
  3805                           
  3806                           ;RTC.c: 11:     I2C_WriteByte(0b11010001);
  3807     033F  30D1               	movlw	209
  3808     0340  273A               	fcall	_I2C_WriteByte
  3809     0341  0008               	return
  3810     0342                     __end_of_reqReadRTC:
  3811                           
  3812                           	psect	text32
  3813     073A                     __ptext32:	
  3814 ;; *************** function _I2C_WriteByte *****************
  3815 ;; Defined at:
  3816 ;;		line 45 in file "IIC.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  Data            1    wreg     unsigned char 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  Data            1    1[COMMON] unsigned char 
  3821 ;;  i               1    3[COMMON] unsigned char 
  3822 ;;  timer           1    2[COMMON] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0, btemp+1
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  3832 ;;      Params:         0       0       0       0       0
  3833 ;;      Locals:         3       0       0       0       0
  3834 ;;      Temps:          1       0       0       0       0
  3835 ;;      Totals:         4       0       0       0       0
  3836 ;;Total ram usage:        4 bytes
  3837 ;; Hardware stack levels used: 1
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_reqReadRTC
  3842 ;;		_reqWriteRTC
  3843 ;;		_writeDataRTC
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847     073A                     _I2C_WriteByte:	
  3848                           ;psect for function _I2C_WriteByte
  3849                           
  3850                           
  3851                           ;incstack = 0
  3852                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  3853                           ;I2C_WriteByte@Data stored from wreg
  3854     073A  00F1               	movwf	I2C_WriteByte@Data
  3855                           
  3856                           ;IIC.c: 46:     unsigned char i;;IIC.c: 47:     for(i = 0; i<8; i++) {
  3857     073B  01F3               	clrf	I2C_WriteByte@i
  3858     073C                     l92:
  3859                           
  3860                           ;IIC.c: 48:         TRISAbits.TRISA0 = 0;
  3861     073C  1683               	bsf	3,5	;RP0=1, select bank1
  3862     073D  1303               	bcf	3,6	;RP1=0, select bank1
  3863     073E  1005               	bcf	5,0	;volatile
  3864                           
  3865                           ;IIC.c: 49:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3866     073F  2F40               	nop2	;2 cycle nop
  3867                           
  3868                           ;IIC.c: 50:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  3869     0740  0871               	movf	I2C_WriteByte@Data,w
  3870     0741  00F0               	movwf	??_I2C_WriteByte
  3871     0742  0A73               	incf	I2C_WriteByte@i,w
  3872     0743  2F46               	goto	u724
  3873     0744                     u725:
  3874     0744  1003               	clrc
  3875     0745  0DF0               	rlf	??_I2C_WriteByte,f
  3876     0746                     u724:
  3877     0746  3EFF               	addlw	-1
  3878     0747  1D03               	skipz
  3879     0748  2F44               	goto	u725
  3880     0749  1FF0               	btfss	??_I2C_WriteByte,7
  3881     074A  2F4F               	goto	u730
  3882     074B  1683               	bsf	3,5	;RP0=1, select bank1
  3883     074C  1303               	bcf	3,6	;RP1=0, select bank1
  3884     074D  1485               	bsf	5,1	;volatile
  3885     074E  2F52               	goto	l1719
  3886     074F                     u730:
  3887     074F  1683               	bsf	3,5	;RP0=1, select bank1
  3888     0750  1303               	bcf	3,6	;RP1=0, select bank1
  3889     0751  1085               	bcf	5,1	;volatile
  3890     0752                     l1719:
  3891                           
  3892                           ;IIC.c: 51:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  3893     0752  2F53               	nop2	;2 cycle nop
  3894                           
  3895                           ;IIC.c: 52:         TRISAbits.TRISA0 = 1;
  3896     0753  1683               	bsf	3,5	;RP0=1, select bank1
  3897     0754  1303               	bcf	3,6	;RP1=0, select bank1
  3898     0755  1405               	bsf	5,0	;volatile
  3899                           
  3900                           ;IIC.c: 53:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3901     0756  2F57               	nop2	;2 cycle nop
  3902     0757  2F58               	nop2	;2 cycle nop
  3903     0758  0000               	nop
  3904                           
  3905                           ;IIC.c: 54:     }
  3906     0759  3001               	movlw	1
  3907     075A  00FF               	movwf	127
  3908     075B  087F               	movf	127,w
  3909     075C  07F3               	addwf	I2C_WriteByte@i,f
  3910     075D  3008               	movlw	8
  3911     075E  0273               	subwf	I2C_WriteByte@i,w
  3912     075F  1C03               	skipc
  3913     0760  2F3C               	goto	l92
  3914                           
  3915                           ;IIC.c: 57:     TRISAbits.TRISA0 = 0;
  3916     0761  1683               	bsf	3,5	;RP0=1, select bank1
  3917     0762  1303               	bcf	3,6	;RP1=0, select bank1
  3918     0763  1005               	bcf	5,0	;volatile
  3919                           
  3920                           ;IIC.c: 58:     TRISAbits.TRISA1 = 1;
  3921     0764  1485               	bsf	5,1	;volatile
  3922                           
  3923                           ;IIC.c: 59:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3924     0765  2F66               	nop2	;2 cycle nop
  3925     0766  2F67               	nop2	;2 cycle nop
  3926     0767  0000               	nop
  3927                           
  3928                           ;IIC.c: 60:     TRISAbits.TRISA0 = 1;
  3929     0768  1683               	bsf	3,5	;RP0=1, select bank1
  3930     0769  1303               	bcf	3,6	;RP1=0, select bank1
  3931     076A  1405               	bsf	5,0	;volatile
  3932                           
  3933                           ;IIC.c: 61:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  3934     076B  2F6C               	nop2	;2 cycle nop
  3935     076C  2F6D               	nop2	;2 cycle nop
  3936     076D  0000               	nop
  3937                           
  3938                           ;IIC.c: 64:     unsigned char timer = 255;
  3939     076E  30FF               	movlw	255
  3940     076F  00F2               	movwf	I2C_WriteByte@timer
  3941     0770                     l94:	
  3942                           ;IIC.c: 73:     }
  3943                           
  3944                           ;IIC.c: 65:     while(timer != 0) {
  3945                           
  3946                           
  3947                           ;IIC.c: 65:     while(timer != 0) {
  3948     0770  0872               	movf	I2C_WriteByte@timer,w
  3949     0771  1903               	btfsc	3,2
  3950     0772  2F7D               	goto	l1735
  3951                           
  3952                           ;IIC.c: 66:         if(!PORTAbits.RA1) {
  3953     0773  1283               	bcf	3,5	;RP0=0, select bank0
  3954     0774  1303               	bcf	3,6	;RP1=0, select bank0
  3955     0775  1885               	btfsc	5,1	;volatile
  3956     0776  2F79               	goto	l96
  3957                           
  3958                           ;IIC.c: 68:             timer = 0;
  3959     0777  01F2               	clrf	I2C_WriteByte@timer
  3960                           
  3961                           ;IIC.c: 69:         } else {
  3962     0778  2F70               	goto	l94
  3963     0779                     l96:
  3964                           
  3965                           ;IIC.c: 70:             _delay((unsigned long)((1)*(4000000/4000000.0)));
  3966     0779  0000               	nop
  3967                           
  3968                           ;IIC.c: 71:             timer--;
  3969     077A  3001               	movlw	1
  3970     077B  02F2               	subwf	I2C_WriteByte@timer,f
  3971     077C  2F70               	goto	l94
  3972     077D                     l1735:
  3973                           
  3974                           ;IIC.c: 75:     if(timer == 0 && PORTAbits.RA1) {
  3975     077D  0872               	movf	I2C_WriteByte@timer,w
  3976     077E  1D03               	btfss	3,2
  3977     077F  0008               	return
  3978     0780  1283               	bcf	3,5	;RP0=0, select bank0
  3979     0781  1303               	bcf	3,6	;RP1=0, select bank0
  3980     0782  1C85               	btfss	5,1	;volatile
  3981     0783  0008               	return
  3982                           
  3983                           ;IIC.c: 76:         ((ErrFlag) |= (1<<0));
  3984     0784  1433               	bsf	_ErrFlag,0
  3985     0785  0008               	return
  3986     0786                     __end_of_I2C_WriteByte:
  3987                           
  3988                           	psect	text33
  3989     0368                     __ptext33:	
  3990 ;; *************** function _I2C_Start *****************
  3991 ;; Defined at:
  3992 ;;		line 13 in file "IIC.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		None
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4006 ;;      Params:         0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0
  4009 ;;      Totals:         0       0       0       0       0
  4010 ;;Total ram usage:        0 bytes
  4011 ;; Hardware stack levels used: 1
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_reqReadRTC
  4016 ;;		_reqWriteRTC
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020     0368                     _I2C_Start:	
  4021                           ;psect for function _I2C_Start
  4022                           
  4023                           
  4024                           ;IIC.c: 14:     TRISAbits.TRISA0 = 1;
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in _I2C_Start: []
  4028     0368  1683               	bsf	3,5	;RP0=1, select bank1
  4029     0369  1303               	bcf	3,6	;RP1=0, select bank1
  4030     036A  1405               	bsf	5,0	;volatile
  4031                           
  4032                           ;IIC.c: 15:     TRISAbits.TRISA1 = 1;
  4033     036B  1485               	bsf	5,1	;volatile
  4034                           
  4035                           ;IIC.c: 16:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  4036     036C  2B6D               	nop2	;2 cycle nop
  4037     036D  2B6E               	nop2	;2 cycle nop
  4038     036E  0000               	nop
  4039                           
  4040                           ;IIC.c: 17:     TRISAbits.TRISA1 = 0;
  4041     036F  1683               	bsf	3,5	;RP0=1, select bank1
  4042     0370  1303               	bcf	3,6	;RP1=0, select bank1
  4043     0371  1085               	bcf	5,1	;volatile
  4044                           
  4045                           ;IIC.c: 18:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  4046     0372  2B73               	nop2	;2 cycle nop
  4047     0373  2B74               	nop2	;2 cycle nop
  4048     0374  0000               	nop
  4049     0375  0008               	return
  4050     0376                     __end_of_I2C_Start:
  4051                           
  4052                           	psect	text34
  4053     03A5                     __ptext34:	
  4054 ;; *************** function _I2C_ReStart *****************
  4055 ;; Defined at:
  4056 ;;		line 22 in file "IIC.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		None
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4070 ;;      Params:         0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0
  4073 ;;      Totals:         0       0       0       0       0
  4074 ;;Total ram usage:        0 bytes
  4075 ;; Hardware stack levels used: 1
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_reqReadRTC
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083     03A5                     _I2C_ReStart:	
  4084                           ;psect for function _I2C_ReStart
  4085                           
  4086                           
  4087                           ;IIC.c: 23:     TRISAbits.TRISA0 = 0;
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _I2C_ReStart: []
  4091     03A5  1683               	bsf	3,5	;RP0=1, select bank1
  4092     03A6  1303               	bcf	3,6	;RP1=0, select bank1
  4093     03A7  1005               	bcf	5,0	;volatile
  4094                           
  4095                           ;IIC.c: 24:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4096     03A8  2BA9               	nop2	;2 cycle nop
  4097                           
  4098                           ;IIC.c: 25:     TRISAbits.TRISA1 = 1;
  4099     03A9  1683               	bsf	3,5	;RP0=1, select bank1
  4100     03AA  1303               	bcf	3,6	;RP1=0, select bank1
  4101     03AB  1485               	bsf	5,1	;volatile
  4102                           
  4103                           ;IIC.c: 26:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4104     03AC  2BAD               	nop2	;2 cycle nop
  4105                           
  4106                           ;IIC.c: 27:     TRISAbits.TRISA0 = 1;
  4107     03AD  1683               	bsf	3,5	;RP0=1, select bank1
  4108     03AE  1303               	bcf	3,6	;RP1=0, select bank1
  4109     03AF  1405               	bsf	5,0	;volatile
  4110                           
  4111                           ;IIC.c: 28:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4112     03B0  2BB1               	nop2	;2 cycle nop
  4113                           
  4114                           ;IIC.c: 29:     TRISAbits.TRISA1 = 0;
  4115     03B1  1683               	bsf	3,5	;RP0=1, select bank1
  4116     03B2  1303               	bcf	3,6	;RP1=0, select bank1
  4117     03B3  1085               	bcf	5,1	;volatile
  4118                           
  4119                           ;IIC.c: 30:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4120     03B4  2BB5               	nop2	;2 cycle nop
  4121     03B5  0008               	return
  4122     03B6                     __end_of_I2C_ReStart:
  4123                           
  4124                           	psect	text35
  4125     02FD                     __ptext35:	
  4126 ;; *************** function _endReadRTC *****************
  4127 ;; Defined at:
  4128 ;;		line 23 in file "RTC.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4142 ;;      Params:         0       0       0       0       0
  4143 ;;      Locals:         0       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0
  4145 ;;      Totals:         0       0       0       0       0
  4146 ;;Total ram usage:        0 bytes
  4147 ;; Hardware stack levels used: 1
  4148 ;; Hardware stack levels required when called: 1
  4149 ;; This function calls:
  4150 ;;		_I2C_SendNACK
  4151 ;;		_I2C_Stop
  4152 ;; This function is called by:
  4153 ;;		_readByteRTC
  4154 ;;		_getTime
  4155 ;;		_getDate
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159     02FD                     _endReadRTC:	
  4160                           ;psect for function _endReadRTC
  4161                           
  4162                           
  4163                           ;RTC.c: 24:     I2C_SendNACK();
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in _endReadRTC: [status,2+status,0+pclath+cstack]
  4167     02FD  2376               	fcall	_I2C_SendNACK
  4168                           
  4169                           ;RTC.c: 25:     I2C_Stop();
  4170     02FE  2394               	fcall	_I2C_Stop
  4171     02FF  0008               	return
  4172     0300                     __end_of_endReadRTC:
  4173                           
  4174                           	psect	text36
  4175     0394                     __ptext36:	
  4176 ;; *************** function _I2C_Stop *****************
  4177 ;; Defined at:
  4178 ;;		line 34 in file "IIC.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		None
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4192 ;;      Params:         0       0       0       0       0
  4193 ;;      Locals:         0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0
  4195 ;;      Totals:         0       0       0       0       0
  4196 ;;Total ram usage:        0 bytes
  4197 ;; Hardware stack levels used: 1
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_endReadRTC
  4202 ;;		_endWriteRTC
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206     0394                     _I2C_Stop:	
  4207                           ;psect for function _I2C_Stop
  4208                           
  4209                           
  4210                           ;IIC.c: 35:     TRISAbits.TRISA0 = 0;
  4211                           
  4212                           ;incstack = 0
  4213                           ; Regs used in _I2C_Stop: []
  4214     0394  1683               	bsf	3,5	;RP0=1, select bank1
  4215     0395  1303               	bcf	3,6	;RP1=0, select bank1
  4216     0396  1005               	bcf	5,0	;volatile
  4217                           
  4218                           ;IIC.c: 36:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4219     0397  2B98               	nop2	;2 cycle nop
  4220                           
  4221                           ;IIC.c: 37:     TRISAbits.TRISA1 = 0;
  4222     0398  1683               	bsf	3,5	;RP0=1, select bank1
  4223     0399  1303               	bcf	3,6	;RP1=0, select bank1
  4224     039A  1085               	bcf	5,1	;volatile
  4225                           
  4226                           ;IIC.c: 38:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4227     039B  2B9C               	nop2	;2 cycle nop
  4228                           
  4229                           ;IIC.c: 39:     TRISAbits.TRISA0 = 1;
  4230     039C  1683               	bsf	3,5	;RP0=1, select bank1
  4231     039D  1303               	bcf	3,6	;RP1=0, select bank1
  4232     039E  1405               	bsf	5,0	;volatile
  4233                           
  4234                           ;IIC.c: 40:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4235     039F  2BA0               	nop2	;2 cycle nop
  4236                           
  4237                           ;IIC.c: 41:     TRISAbits.TRISA1 = 1;
  4238     03A0  1683               	bsf	3,5	;RP0=1, select bank1
  4239     03A1  1303               	bcf	3,6	;RP1=0, select bank1
  4240     03A2  1485               	bsf	5,1	;volatile
  4241                           
  4242                           ;IIC.c: 42:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4243     03A3  2BA4               	nop2	;2 cycle nop
  4244     03A4  0008               	return
  4245     03A5                     __end_of_I2C_Stop:
  4246                           
  4247                           	psect	text37
  4248     0376                     __ptext37:	
  4249 ;; *************** function _I2C_SendNACK *****************
  4250 ;; Defined at:
  4251 ;;		line 107 in file "IIC.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      void 
  4258 ;; Registers used:
  4259 ;;		None
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4265 ;;      Params:         0       0       0       0       0
  4266 ;;      Locals:         0       0       0       0       0
  4267 ;;      Temps:          0       0       0       0       0
  4268 ;;      Totals:         0       0       0       0       0
  4269 ;;Total ram usage:        0 bytes
  4270 ;; Hardware stack levels used: 1
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_endReadRTC
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278     0376                     _I2C_SendNACK:	
  4279                           ;psect for function _I2C_SendNACK
  4280                           
  4281                           
  4282                           ;IIC.c: 108:     TRISAbits.TRISA0 = 0;
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _I2C_SendNACK: []
  4286     0376  1683               	bsf	3,5	;RP0=1, select bank1
  4287     0377  1303               	bcf	3,6	;RP1=0, select bank1
  4288     0378  1005               	bcf	5,0	;volatile
  4289                           
  4290                           ;IIC.c: 109:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4291     0379  2B7A               	nop2	;2 cycle nop
  4292                           
  4293                           ;IIC.c: 110:     TRISAbits.TRISA1 = 1;
  4294     037A  1683               	bsf	3,5	;RP0=1, select bank1
  4295     037B  1303               	bcf	3,6	;RP1=0, select bank1
  4296     037C  1485               	bsf	5,1	;volatile
  4297                           
  4298                           ;IIC.c: 111:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4299     037D  2B7E               	nop2	;2 cycle nop
  4300                           
  4301                           ;IIC.c: 112:     TRISAbits.TRISA0 = 1;
  4302     037E  1683               	bsf	3,5	;RP0=1, select bank1
  4303     037F  1303               	bcf	3,6	;RP1=0, select bank1
  4304     0380  1405               	bsf	5,0	;volatile
  4305                           
  4306                           ;IIC.c: 113:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  4307     0381  2B82               	nop2	;2 cycle nop
  4308     0382  2B83               	nop2	;2 cycle nop
  4309     0383  0000               	nop
  4310     0384  0008               	return
  4311     0385                     __end_of_I2C_SendNACK:
  4312                           
  4313                           	psect	text38
  4314     058D                     __ptext38:	
  4315 ;; *************** function _I2C_ReadByte *****************
  4316 ;; Defined at:
  4317 ;;		line 82 in file "IIC.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  i               1    2[COMMON] unsigned char 
  4322 ;;  data            1    1[COMMON] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      unsigned char 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, btemp+1
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4332 ;;      Params:         0       0       0       0       0
  4333 ;;      Locals:         2       0       0       0       0
  4334 ;;      Temps:          1       0       0       0       0
  4335 ;;      Totals:         3       0       0       0       0
  4336 ;;Total ram usage:        3 bytes
  4337 ;; Hardware stack levels used: 1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_readDataRTC
  4342 ;;		_readByteRTC
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346     058D                     _I2C_ReadByte:	
  4347                           ;psect for function _I2C_ReadByte
  4348                           
  4349                           
  4350                           ;IIC.c: 83:     unsigned char data = 0;
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  4354     058D  01F1               	clrf	I2C_ReadByte@data
  4355                           
  4356                           ;IIC.c: 84:     for(unsigned char i=0; i<8; i++) {
  4357     058E  01F2               	clrf	I2C_ReadByte@i
  4358     058F                     l103:
  4359                           
  4360                           ;IIC.c: 85:         TRISAbits.TRISA0 = 0;
  4361     058F  1683               	bsf	3,5	;RP0=1, select bank1
  4362     0590  1303               	bcf	3,6	;RP1=0, select bank1
  4363     0591  1005               	bcf	5,0	;volatile
  4364                           
  4365                           ;IIC.c: 86:         TRISAbits.TRISA1 = 1;
  4366     0592  1485               	bsf	5,1	;volatile
  4367                           
  4368                           ;IIC.c: 87:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  4369     0593  2D94               	nop2	;2 cycle nop
  4370     0594  2D95               	nop2	;2 cycle nop
  4371     0595  0000               	nop
  4372                           
  4373                           ;IIC.c: 88:         TRISAbits.TRISA0 = 1;
  4374     0596  1683               	bsf	3,5	;RP0=1, select bank1
  4375     0597  1303               	bcf	3,6	;RP1=0, select bank1
  4376     0598  1405               	bsf	5,0	;volatile
  4377                           
  4378                           ;IIC.c: 89:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4379     0599  2D9A               	nop2	;2 cycle nop
  4380                           
  4381                           ;IIC.c: 90:         data = data|(PORTAbits.RA1<<(7-i));
  4382     059A  1283               	bcf	3,5	;RP0=0, select bank0
  4383     059B  1303               	bcf	3,6	;RP1=0, select bank0
  4384     059C  0C05               	rrf	5,w	;volatile
  4385     059D  3901               	andlw	1
  4386     059E  00F0               	movwf	??_I2C_ReadByte
  4387     059F  0872               	movf	I2C_ReadByte@i,w
  4388     05A0  3C07               	sublw	7
  4389     05A1  3E01               	addlw	1
  4390     05A2  2DA5               	goto	u864
  4391     05A3                     u865:
  4392     05A3  1003               	clrc
  4393     05A4  0DF0               	rlf	??_I2C_ReadByte,f
  4394     05A5                     u864:
  4395     05A5  3EFF               	addlw	-1
  4396     05A6  1D03               	skipz
  4397     05A7  2DA3               	goto	u865
  4398     05A8  0870               	movf	??_I2C_ReadByte,w
  4399     05A9  0471               	iorwf	I2C_ReadByte@data,w
  4400     05AA  00F1               	movwf	I2C_ReadByte@data
  4401                           
  4402                           ;IIC.c: 91:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  4403     05AB  2DAC               	nop2	;2 cycle nop
  4404                           
  4405                           ;IIC.c: 92:     }
  4406     05AC  3001               	movlw	1
  4407     05AD  00FF               	movwf	127
  4408     05AE  087F               	movf	127,w
  4409     05AF  07F2               	addwf	I2C_ReadByte@i,f
  4410     05B0  3008               	movlw	8
  4411     05B1  0272               	subwf	I2C_ReadByte@i,w
  4412     05B2  1C03               	skipc
  4413     05B3  2D8F               	goto	l103
  4414                           
  4415                           ;IIC.c: 93:     return data;
  4416     05B4  0871               	movf	I2C_ReadByte@data,w
  4417     05B5  0008               	return
  4418     05B6                     __end_of_I2C_ReadByte:
  4419                           
  4420                           	psect	text39
  4421     0300                     __ptext39:	
  4422 ;; *************** function _InitTubes *****************
  4423 ;; Defined at:
  4424 ;;		line 18 in file "tubes.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : B00/0
  4435 ;;		On exit  : 300/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4438 ;;      Params:         0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0
  4440 ;;      Temps:          0       0       0       0       0
  4441 ;;      Totals:         0       0       0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used: 1
  4444 ;; Hardware stack levels required when called: 3
  4445 ;; This function calls:
  4446 ;;		_blankTubes
  4447 ;;		_display
  4448 ;;		_loadDisplay
  4449 ;; This function is called by:
  4450 ;;		_Init
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454     0300                     _InitTubes:	
  4455                           ;psect for function _InitTubes
  4456                           
  4457                           
  4458                           ;tubes.c: 19:     blankTubes();
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in _InitTubes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4462     0300  23C9               	fcall	_blankTubes
  4463                           
  4464                           ;tubes.c: 20:     loadDisplay();
  4465     0301  2675               	fcall	_loadDisplay
  4466                           
  4467                           ;tubes.c: 21:     display();
  4468     0302  230C               	fcall	_display
  4469     0303  0008               	return
  4470     0304                     __end_of_InitTubes:
  4471                           
  4472                           	psect	text40
  4473     0675                     __ptext40:	
  4474 ;; *************** function _loadDisplay *****************
  4475 ;; Defined at:
  4476 ;;		line 39 in file "tubes.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  numIndex        1    5[COMMON] unsigned char 
  4481 ;;  tubeIndex       1    4[COMMON] unsigned char 
  4482 ;;  RDP             1    7[COMMON] unsigned char 
  4483 ;;  LDP             1    6[COMMON] unsigned char 
  4484 ;;  tubePtr         1    3[COMMON] PTR unsigned char 
  4485 ;;		 -> T7(1), 
  4486 ;;  dispNum         1    2[COMMON] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 300/0
  4493 ;;		On exit  : 300/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4496 ;;      Params:         0       0       0       0       0
  4497 ;;      Locals:         6       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0
  4499 ;;      Totals:         6       0       0       0       0
  4500 ;;Total ram usage:        6 bytes
  4501 ;; Hardware stack levels used: 1
  4502 ;; Hardware stack levels required when called: 2
  4503 ;; This function calls:
  4504 ;;		_checkDP
  4505 ;;		_latch
  4506 ;;		_send0ToDrivers
  4507 ;;		_send1ToDrivers
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;;		_getTime
  4511 ;;		_getDate
  4512 ;;		_InitTubes
  4513 ;;		_displayError
  4514 ;;		_hourFormatSetting
  4515 ;;		_hoursSetting
  4516 ;;		_minuteSetting
  4517 ;;		_daySetting
  4518 ;;		_monthSetting
  4519 ;;		_yearSetting
  4520 ;;		_dateFormatSetting
  4521 ;;		_blankingSetting
  4522 ;;		_unblankingSetting
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526     0675                     _loadDisplay:	
  4527                           ;psect for function _loadDisplay
  4528                           
  4529                           
  4530                           ;tubes.c: 40:     unsigned char *tubePtr;;tubes.c: 41:     tubePtr = &T7;
  4531                           
  4532                           ;incstack = 0
  4533                           ; Regs used in _loadDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4534     0675  3029               	movlw	41
  4535     0676  00F3               	movwf	loadDisplay@tubePtr
  4536                           
  4537                           ;tubes.c: 42:     unsigned char dispNum;;tubes.c: 43:     unsigned char LDP = leftDP;
  4538     0677  0832               	movf	_leftDP,w
  4539     0678  00F6               	movwf	loadDisplay@LDP
  4540                           
  4541                           ;tubes.c: 44:     unsigned char RDP = rightDP;
  4542     0679  0831               	movf	_rightDP,w
  4543     067A  00F7               	movwf	loadDisplay@RDP
  4544                           
  4545                           ;tubes.c: 46:    for (unsigned char tubeIndex = 0; tubeIndex <= 7; tubeIndex++) {
  4546     067B  01F4               	clrf	loadDisplay@tubeIndex
  4547     067C                     l1769:
  4548                           
  4549                           ;tubes.c: 47:         checkDP(&LDP);
  4550     067C  3076               	movlw	(low (loadDisplay@LDP| 0))& (0+255)
  4551     067D  2541               	fcall	_checkDP
  4552                           
  4553                           ;tubes.c: 48:         dispNum = 1;
  4554     067E  01F2               	clrf	loadDisplay@dispNum
  4555     067F  0AF2               	incf	loadDisplay@dispNum,f
  4556                           
  4557                           ;tubes.c: 50:         for (unsigned char numIndex = 0; numIndex < 9; numIndex++) {
  4558     0680  01F5               	clrf	loadDisplay@numIndex
  4559     0681                     l1779:
  4560                           
  4561                           ;tubes.c: 51:             if(dispNum == *tubePtr) {
  4562     0681  0873               	movf	loadDisplay@tubePtr,w
  4563     0682  0084               	movwf	4
  4564     0683  1383               	bcf	3,7	;select IRP bank0
  4565     0684  0800               	movf	0,w
  4566     0685  0672               	xorwf	loadDisplay@dispNum,w
  4567     0686  1D03               	skipz
  4568     0687  2E8A               	goto	l1783
  4569                           
  4570                           ;tubes.c: 52:                 send1ToDrivers();
  4571     0688  2342               	fcall	_send1ToDrivers
  4572                           
  4573                           ;tubes.c: 53:             } else {
  4574     0689  2E8B               	goto	l1785
  4575     068A                     l1783:
  4576                           
  4577                           ;tubes.c: 54:                 send0ToDrivers();
  4578     068A  235A               	fcall	_send0ToDrivers
  4579     068B                     l1785:
  4580                           
  4581                           ;tubes.c: 56:             dispNum++;
  4582     068B  3001               	movlw	1
  4583     068C  00FF               	movwf	127
  4584     068D  087F               	movf	127,w
  4585     068E  07F2               	addwf	loadDisplay@dispNum,f
  4586                           
  4587                           ;tubes.c: 57:         }
  4588     068F  3001               	movlw	1
  4589     0690  00FF               	movwf	127
  4590     0691  087F               	movf	127,w
  4591     0692  07F5               	addwf	loadDisplay@numIndex,f
  4592     0693  3009               	movlw	9
  4593     0694  0275               	subwf	loadDisplay@numIndex,w
  4594     0695  1C03               	skipc
  4595     0696  2E81               	goto	l1779
  4596                           
  4597                           ;tubes.c: 59:         if (*tubePtr == 0) {
  4598     0697  0873               	movf	loadDisplay@tubePtr,w
  4599     0698  0084               	movwf	4
  4600     0699  1383               	bcf	3,7	;select IRP bank0
  4601     069A  0800               	movf	0,w
  4602     069B  1D03               	btfss	3,2
  4603     069C  2E9F               	goto	l1795
  4604                           
  4605                           ;tubes.c: 60:             send1ToDrivers();
  4606     069D  2342               	fcall	_send1ToDrivers
  4607                           
  4608                           ;tubes.c: 61:         } else {
  4609     069E  2EA0               	goto	l1797
  4610     069F                     l1795:
  4611                           
  4612                           ;tubes.c: 62:             send0ToDrivers();
  4613     069F  235A               	fcall	_send0ToDrivers
  4614     06A0                     l1797:
  4615                           
  4616                           ;tubes.c: 64:         checkDP(&RDP);
  4617     06A0  3077               	movlw	(low (loadDisplay@RDP| 0))& (0+255)
  4618     06A1  2541               	fcall	_checkDP
  4619                           
  4620                           ;tubes.c: 65:         tubePtr--;
  4621     06A2  3001               	movlw	1
  4622     06A3  02F3               	subwf	loadDisplay@tubePtr,f
  4623                           
  4624                           ;tubes.c: 66:     }
  4625     06A4  3001               	movlw	1
  4626     06A5  00FF               	movwf	127
  4627     06A6  087F               	movf	127,w
  4628     06A7  07F4               	addwf	loadDisplay@tubeIndex,f
  4629     06A8  3008               	movlw	8
  4630     06A9  0274               	subwf	loadDisplay@tubeIndex,w
  4631     06AA  1C03               	skipc
  4632     06AB  2E7C               	goto	l1769
  4633                           
  4634                           ;tubes.c: 67:     latch();
  4635     06AC  232E               	fcall	_latch
  4636     06AD  0008               	return
  4637     06AE                     __end_of_loadDisplay:
  4638                           
  4639                           	psect	text41
  4640     032E                     __ptext41:	
  4641 ;; *************** function _latch *****************
  4642 ;; Defined at:
  4643 ;;		line 84 in file "tubes.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, btemp+1
  4652 ;; Tracked objects:
  4653 ;;		On entry : 300/0
  4654 ;;		On exit  : 300/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4657 ;;      Params:         0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used: 1
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_loadDisplay
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670     032E                     _latch:	
  4671                           ;psect for function _latch
  4672                           
  4673                           
  4674                           ;tubes.c: 85:     ((PORTB_SHADOW) |= (1<<0x5));
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _latch: [wreg+status,2+status,0+btemp+1]
  4678     032E  16B5               	bsf	_PORTB_SHADOW,5
  4679                           
  4680                           ;tubes.c: 86:     PORTB = PORTB_SHADOW;
  4681     032F  0835               	movf	_PORTB_SHADOW,w
  4682     0330  0086               	movwf	6	;volatile
  4683                           
  4684                           ;tubes.c: 87:     ((PORTB_SHADOW) &= ~(1<<0x5));
  4685     0331  30DF               	movlw	223
  4686     0332  00FF               	movwf	127
  4687     0333  087F               	movf	127,w
  4688     0334  05B5               	andwf	_PORTB_SHADOW,f
  4689                           
  4690                           ;tubes.c: 88:     PORTB = PORTB_SHADOW;
  4691     0335  0835               	movf	_PORTB_SHADOW,w
  4692     0336  0086               	movwf	6	;volatile
  4693     0337  0008               	return
  4694     0338                     __end_of_latch:
  4695                           
  4696                           	psect	text42
  4697     0541                     __ptext42:	
  4698 ;; *************** function _checkDP *****************
  4699 ;; Defined at:
  4700 ;;		line 71 in file "tubes.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  DP              1    wreg     PTR unsigned char 
  4703 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  DP              1    1[COMMON] PTR unsigned char 
  4706 ;;		 -> loadDisplay@RDP(1), loadDisplay@LDP(1), 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 300/0
  4713 ;;		On exit  : 300/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4716 ;;      Params:         0       0       0       0       0
  4717 ;;      Locals:         1       0       0       0       0
  4718 ;;      Temps:          1       0       0       0       0
  4719 ;;      Totals:         2       0       0       0       0
  4720 ;;Total ram usage:        2 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 1
  4723 ;; This function calls:
  4724 ;;		_send0ToDrivers
  4725 ;;		_send1ToDrivers
  4726 ;; This function is called by:
  4727 ;;		_loadDisplay
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731     0541                     _checkDP:	
  4732                           ;psect for function _checkDP
  4733                           
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in _checkDP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4737                           ;checkDP@DP stored from wreg
  4738     0541  00F1               	movwf	checkDP@DP
  4739                           
  4740                           ;tubes.c: 72:     if ((((*DP))>>(7) & 1)) {
  4741     0542  0871               	movf	checkDP@DP,w
  4742     0543  0084               	movwf	4
  4743     0544  0800               	movf	0,w
  4744     0545  00F0               	movwf	??_checkDP
  4745     0546  3007               	movlw	7
  4746     0547                     u805:
  4747     0547  1003               	clrc
  4748     0548  0CF0               	rrf	??_checkDP,f
  4749     0549  3EFF               	addlw	-1
  4750     054A  1D03               	skipz
  4751     054B  2D47               	goto	u805
  4752     054C  1C70               	btfss	??_checkDP,0
  4753     054D  2D5A               	goto	l1749
  4754                           
  4755                           ;tubes.c: 74:         *DP = (*DP) << 1;
  4756     054E  0871               	movf	checkDP@DP,w
  4757     054F  0084               	movwf	4
  4758     0550  0800               	movf	0,w
  4759     0551  00F0               	movwf	??_checkDP
  4760     0552  0770               	addwf	??_checkDP,w
  4761     0553  00FF               	movwf	127
  4762     0554  0871               	movf	checkDP@DP,w
  4763     0555  0084               	movwf	4
  4764     0556  087F               	movf	127,w
  4765     0557  0080               	movwf	0
  4766                           
  4767                           ;tubes.c: 75:         send1ToDrivers();
  4768     0558  2342               	fcall	_send1ToDrivers
  4769                           
  4770                           ;tubes.c: 76:     } else {
  4771     0559  0008               	return
  4772     055A                     l1749:
  4773                           
  4774                           ;tubes.c: 78:         *DP = (*DP) << 1;
  4775     055A  0871               	movf	checkDP@DP,w
  4776     055B  0084               	movwf	4
  4777     055C  0800               	movf	0,w
  4778     055D  00F0               	movwf	??_checkDP
  4779     055E  0770               	addwf	??_checkDP,w
  4780     055F  00FF               	movwf	127
  4781     0560  0871               	movf	checkDP@DP,w
  4782     0561  0084               	movwf	4
  4783     0562  087F               	movf	127,w
  4784     0563  0080               	movwf	0
  4785                           
  4786                           ;tubes.c: 79:         send0ToDrivers();
  4787     0564  235A               	fcall	_send0ToDrivers
  4788     0565  0008               	return
  4789     0566                     __end_of_checkDP:
  4790                           
  4791                           	psect	text43
  4792     0342                     __ptext43:	
  4793 ;; *************** function _send1ToDrivers *****************
  4794 ;; Defined at:
  4795 ;;		line 129 in file "tubes.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2, status,0, btemp+1
  4804 ;; Tracked objects:
  4805 ;;		On entry : 300/0
  4806 ;;		On exit  : 300/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4809 ;;      Params:         0       0       0       0       0
  4810 ;;      Locals:         0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0
  4812 ;;      Totals:         0       0       0       0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used: 1
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_loadDisplay
  4819 ;;		_checkDP
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823     0342                     _send1ToDrivers:	
  4824                           ;psect for function _send1ToDrivers
  4825                           
  4826                           
  4827                           ;tubes.c: 130:     ((PORTB_SHADOW) |= (1<<0x4));
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _send1ToDrivers: [wreg+status,2+status,0+btemp+1]
  4831     0342  1635               	bsf	_PORTB_SHADOW,4
  4832                           
  4833                           ;tubes.c: 131:     ((PORTB_SHADOW) |= (1<<0x2));
  4834     0343  1535               	bsf	_PORTB_SHADOW,2
  4835                           
  4836                           ;tubes.c: 132:     PORTB = PORTB_SHADOW;
  4837     0344  0835               	movf	_PORTB_SHADOW,w
  4838     0345  0086               	movwf	6	;volatile
  4839                           
  4840                           ;tubes.c: 133:     ((PORTB_SHADOW) &= ~(1<<0x2));
  4841     0346  30FB               	movlw	251
  4842     0347  00FF               	movwf	127
  4843     0348  087F               	movf	127,w
  4844     0349  05B5               	andwf	_PORTB_SHADOW,f
  4845                           
  4846                           ;tubes.c: 134:     PORTB = PORTB_SHADOW;
  4847     034A  0835               	movf	_PORTB_SHADOW,w
  4848     034B  0086               	movwf	6	;volatile
  4849     034C  0008               	return
  4850     034D                     __end_of_send1ToDrivers:
  4851                           
  4852                           	psect	text44
  4853     035A                     __ptext44:	
  4854 ;; *************** function _send0ToDrivers *****************
  4855 ;; Defined at:
  4856 ;;		line 138 in file "tubes.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0, btemp+1
  4865 ;; Tracked objects:
  4866 ;;		On entry : 300/0
  4867 ;;		On exit  : 300/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4870 ;;      Params:         0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0
  4872 ;;      Temps:          0       0       0       0       0
  4873 ;;      Totals:         0       0       0       0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used: 1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_loadDisplay
  4880 ;;		_checkDP
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884     035A                     _send0ToDrivers:	
  4885                           ;psect for function _send0ToDrivers
  4886                           
  4887                           
  4888                           ;tubes.c: 139:     ((PORTB_SHADOW) &= ~(1<<0x4));
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _send0ToDrivers: [wreg+status,2+status,0+btemp+1]
  4892     035A  30EF               	movlw	239
  4893     035B  00FF               	movwf	127
  4894     035C  087F               	movf	127,w
  4895     035D  05B5               	andwf	_PORTB_SHADOW,f
  4896                           
  4897                           ;tubes.c: 140:     ((PORTB_SHADOW) |= (1<<0x2));
  4898     035E  1535               	bsf	_PORTB_SHADOW,2
  4899                           
  4900                           ;tubes.c: 141:     PORTB = PORTB_SHADOW;
  4901     035F  0835               	movf	_PORTB_SHADOW,w
  4902     0360  0086               	movwf	6	;volatile
  4903                           
  4904                           ;tubes.c: 142:     ((PORTB_SHADOW) &= ~(1<<0x2));
  4905     0361  30FB               	movlw	251
  4906     0362  00FF               	movwf	127
  4907     0363  087F               	movf	127,w
  4908     0364  05B5               	andwf	_PORTB_SHADOW,f
  4909                           
  4910                           ;tubes.c: 143:     PORTB = PORTB_SHADOW;
  4911     0365  0835               	movf	_PORTB_SHADOW,w
  4912     0366  0086               	movwf	6	;volatile
  4913     0367  0008               	return
  4914     0368                     __end_of_send0ToDrivers:
  4915                           
  4916                           	psect	text45
  4917     030C                     __ptext45:	
  4918 ;; *************** function _display *****************
  4919 ;; Defined at:
  4920 ;;		line 92 in file "tubes.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;		None
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg
  4929 ;; Tracked objects:
  4930 ;;		On entry : 300/0
  4931 ;;		On exit  : 300/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4934 ;;      Params:         0       0       0       0       0
  4935 ;;      Locals:         0       0       0       0       0
  4936 ;;      Temps:          0       0       0       0       0
  4937 ;;      Totals:         0       0       0       0       0
  4938 ;;Total ram usage:        0 bytes
  4939 ;; Hardware stack levels used: 1
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_InitTubes
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947     030C                     _display:	
  4948                           ;psect for function _display
  4949                           
  4950                           
  4951                           ;tubes.c: 93:     ((PORTB_SHADOW) |= (1<<0x1));
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _display: [wreg]
  4955     030C  14B5               	bsf	_PORTB_SHADOW,1
  4956                           
  4957                           ;tubes.c: 94:     ((PORTB_SHADOW) |= (1<<0x3));
  4958     030D  15B5               	bsf	_PORTB_SHADOW,3
  4959                           
  4960                           ;tubes.c: 95:     PORTB = PORTB_SHADOW;
  4961     030E  0835               	movf	_PORTB_SHADOW,w
  4962     030F  0086               	movwf	6	;volatile
  4963     0310  0008               	return
  4964     0311                     __end_of_display:
  4965                           
  4966                           	psect	text46
  4967     03C9                     __ptext46:	
  4968 ;; *************** function _blankTubes *****************
  4969 ;; Defined at:
  4970 ;;		line 103 in file "tubes.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  i               1    1[COMMON] unsigned char 
  4975 ;;  ptr             1    0[COMMON] PTR unsigned char 
  4976 ;;		 -> T0(1), 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4981 ;; Tracked objects:
  4982 ;;		On entry : 300/0
  4983 ;;		On exit  : B00/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  4986 ;;      Params:         0       0       0       0       0
  4987 ;;      Locals:         2       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0
  4989 ;;      Totals:         2       0       0       0       0
  4990 ;;Total ram usage:        2 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_InitTubes
  4996 ;;		_displayError
  4997 ;;		_hourFormatSetting
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001     03C9                     _blankTubes:	
  5002                           ;psect for function _blankTubes
  5003                           
  5004                           
  5005                           ;tubes.c: 104:     unsigned char *ptr;;tubes.c: 105:     ptr = &T0;
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _blankTubes: [wreg-fsr0h+status,2+status,0+btemp+1]
  5009     03C9  3022               	movlw	34
  5010     03CA  00F0               	movwf	blankTubes@ptr
  5011                           
  5012                           ;tubes.c: 107:     for(unsigned char i = 0; i < 8; i++) {
  5013     03CB  01F1               	clrf	blankTubes@i
  5014     03CC                     l1853:
  5015                           
  5016                           ;tubes.c: 108:         *ptr = 10;
  5017     03CC  0870               	movf	blankTubes@ptr,w
  5018     03CD  0084               	movwf	4
  5019     03CE  300A               	movlw	10
  5020     03CF  1383               	bcf	3,7	;select IRP bank0
  5021     03D0  0080               	movwf	0
  5022                           
  5023                           ;tubes.c: 109:         ptr++;
  5024     03D1  3001               	movlw	1
  5025     03D2  00FF               	movwf	127
  5026     03D3  087F               	movf	127,w
  5027     03D4  07F0               	addwf	blankTubes@ptr,f
  5028                           
  5029                           ;tubes.c: 110:     }
  5030     03D5  3001               	movlw	1
  5031     03D6  00FF               	movwf	127
  5032     03D7  087F               	movf	127,w
  5033     03D8  07F1               	addwf	blankTubes@i,f
  5034     03D9  3008               	movlw	8
  5035     03DA  0271               	subwf	blankTubes@i,w
  5036     03DB  1C03               	skipc
  5037     03DC  2BCC               	goto	l1853
  5038                           
  5039                           ;tubes.c: 111:     leftDP = rightDP = 0x00;
  5040     03DD  01B1               	clrf	_rightDP
  5041     03DE  01B2               	clrf	_leftDP
  5042     03DF  0008               	return
  5043     03E0                     __end_of_blankTubes:
  5044                           
  5045                           	psect	text47
  5046     0311                     __ptext47:	
  5047 ;; *************** function _InitI2C *****************
  5048 ;; Defined at:
  5049 ;;		line 4 in file "IIC.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;		None
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;		None
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		None
  5058 ;; Tracked objects:
  5059 ;;		On entry : B00/0
  5060 ;;		On exit  : B00/0
  5061 ;;		Unchanged: 800/0
  5062 ;; Data sizes:     COMMONBANK0hhh  BANK0l   BANK1   BANK2
  5063 ;;      Params:         0       0       0       0       0
  5064 ;;      Locals:         0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0
  5066 ;;      Totals:         0       0       0       0       0
  5067 ;;Total ram usage:        0 bytes
  5068 ;; Hardware stack levels used: 1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_Init
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076     0311                     _InitI2C:	
  5077                           ;psect for function _InitI2C
  5078                           
  5079                           
  5080                           ;IIC.c: 5:     TRISAbits.TRISA0 = 0;
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _InitI2C: []
  5084     0311  1683               	bsf	3,5	;RP0=1, select bank1
  5085     0312  1005               	bcf	5,0	;volatile
  5086                           
  5087                           ;IIC.c: 6:     TRISAbits.TRISA1 = 0;
  5088     0313  1085               	bcf	5,1	;volatile
  5089                           
  5090                           ;IIC.c: 8:     PORTAbits.RA1 = 0;
  5091     0314  1283               	bcf	3,5	;RP0=0, select bank0
  5092     0315  1085               	bcf	5,1	;volatile
  5093                           
  5094                           ;IIC.c: 9:     PORTAbits.RA0 = 0;
  5095     0316  1005               	bcf	5,0	;volatile
  5096     0317  0008               	return
  5097     0318                     __end_of_InitI2C:
  5098     007E                     btemp	set	126	;btemp
  5099     007E                     wtemp0	set	126
  5100                           
  5101                           	psect	config
  5102                           
  5103                           ;Config register CONFIG @ 0x2007
  5104                           ;	Oscillator Selection bits
  5105                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  5106                           ;	Watchdog Timer Enable bit
  5107                           ;	WDTE = OFF, WDT disabled
  5108                           ;	Power-up Timer Enable bit
  5109                           ;	PWRTE = OFF, PWRT disabled
  5110                           ;	RA5/MCLR/VPP Pin Function Select bit
  5111                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  5112                           ;	Brown-out Detect Enable bit
  5113                           ;	BOREN = OFF, BOD disabled
  5114                           ;	Low-Voltage Programming Enable bit
  5115                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  5116                           ;	Data EE Memory Code Protection bit
  5117                           ;	CPD = OFF, Data memory code protection off
  5118                           ;	Flash Program Memory Code Protection bit
  5119                           ;	CP = OFF, Code protection off
  5120     2007                     	org	8199
  5121     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0hhh         70      6      11
    BANK0l            2      0       2
    BANK1            80      0       5
    BANK2            48      0       0

Pointer List with Targets:

    blankTubes@ptr	PTR unsigned char  size(1) Largest target is 1
		 -> T0(BITBANK0l[1]), 

    checkDP@DP	PTR unsigned char  size(1) Largest target is 1
		 -> loadDisplay@LDP(COMMON[1]), loadDisplay@RDP(COMMON[1]), 

    loadDisplay@tubePtr	PTR unsigned char  size(1) Largest target is 1
		 -> T7(BITBANK0hhh[1]), 


Critical Paths under _main in COMMON

    _main->_getTime
    _settingsMenu->_daySetting
    _settingsMenu->_hoursSetting
    _settingsMenu->_minuteSetting
    _settingsMenu->_monthSetting
    _settingsMenu->_yearSetting
    _yearSetting->_loadDisplay
    _unblankingSetting->_loadDisplay
    _monthSetting->_loadDisplay
    _minuteSetting->_loadDisplay
    _hoursSetting->_loadDisplay
    _hourFormatSetting->_loadDisplay
    _daySetting->_loadDisplay
    _dateFormatSetting->_loadDisplay
    _blankingSetting->_loadDisplay
    _getTime->_getDate
    _getDate->_loadDisplay
    _readDataRTC->_I2C_ReadByte
    _Init->_startRTC
    _startRTC->_displayError
    _displayError->_loadDisplay
    _isRTCRunning->_readByteRTC
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte
    _InitTubes->_loadDisplay
    _loadDisplay->_checkDP

Critical Paths under _main in BANK0hhh

    _main->_getTime

Critical Paths under _main in BANK0l

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   21436
                                              3 BANK0hh    3     3      0
                               _Init
                            _buttons
                       _displayError
                            _getTime
                        _loadDisplay
                          _preLoadWL
                       _settingsMenu
 ---------------------------------------------------------------------------------
 (1) _settingsMenu                                         3     3      0   14827
                                             10 COMMON     3     3      0
                    _blankingSetting
                  _brightnessSetting
                  _dateFormatSetting
                         _daySetting
                  _hourFormatSetting
                       _hoursSetting
                      _minuteSetting
                       _monthSetting
                     _timeAdjSetting
                  _unblankingSetting
                        _yearSetting
 ---------------------------------------------------------------------------------
 (2) _yearSetting                                          2     2      0    1997
                                              8 COMMON     2     2      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _unblankingSetting                                    1     1      0    1930
                                              8 COMMON     1     1      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _timeAdjSetting                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _monthSetting                                         2     2      0    1997
                                              8 COMMON     2     2      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _minuteSetting                                        2     2      0    1997
                                              8 COMMON     2     2      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _hoursSetting                                         2     2      0    1997
                                              8 COMMON     2     2      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _hourFormatSetting                                    1     1      0     515
                                              8 COMMON     1     1      0
                         _blankTubes
                            _buttons
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (2) _daySetting                                           2     2      0    1997
                                              8 COMMON     2     2      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _dateFormatSetting                                    1     1      0     445
                                              8 COMMON     1     1      0
                            _buttons
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (2) _brightnessSetting                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _blankingSetting                                      1     1      0    1930
                                              8 COMMON     1     1      0
                            _buttons
                          _incDecBCD
                        _loadDisplay
                        _readByteRTC
                        _swapNibbles
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (3) _incDecBCD                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _buttons                                              3     3      0      47
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _preLoadWL                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTime                                              6     6      0    2198
                                             11 COMMON     3     3      0
                                              0 BANK0hh    3     3      0
                        _I2C_SendACK
                         _endReadRTC
                            _getDate
                        _loadDisplay
                        _readByteRTC
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (2) _getDate                                              3     3      0     873
                                              8 COMMON     3     3      0
                        _I2C_SendACK
                         _endReadRTC
                        _loadDisplay
                        _readDataRTC
                         _reqReadRTC
                        _swapNibbles
 ---------------------------------------------------------------------------------
 (3) _swapNibbles                                          4     4      0      44
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0     137
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
 ---------------------------------------------------------------------------------
 (3) _I2C_SendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0    3495
                            _InitI2C
                          _InitTubes
                       _checkRTCType
                       _isRTCRunning
                           _startRTC
 ---------------------------------------------------------------------------------
 (2) _startRTC                                             3     3      0    1152
                                              9 COMMON     3     3      0
                       _displayError
                        _endWriteRTC
                        _readByteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (1) _displayError                                         1     1      0     468
                                              8 COMMON     1     1      0
                         _blankTubes
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (2) _isRTCRunning                                         2     2      0     342
                                              7 COMMON     2     2      0
                        _readByteRTC
 ---------------------------------------------------------------------------------
 (2) _checkRTCType                                         2     2      0    1533
                                              7 COMMON     2     2      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (3) _writeByteRTC                                         2     1      1    1122
                                              5 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (4) _writeDataRTC                                         1     1      0     159
                                              4 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _reqWriteRTC                                          1     1      0     159
                                              4 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _readByteRTC                                          2     2      0     319
                                              5 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (4) _reqReadRTC                                           1     1      0     159
                                              4 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (5) _I2C_WriteByte                                        4     4      0     137
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_SendNACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_ReadByte                                         3     3      0     114
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitTubes                                            0     0      0     468
                         _blankTubes
                            _display
                        _loadDisplay
 ---------------------------------------------------------------------------------
 (3) _loadDisplay                                          6     6      0     398
                                              2 COMMON     6     6      0
                            _checkDP
                              _latch
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (4) _latch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _checkDP                                              2     2      0     176
                                              0 COMMON     2     2      0
                     _send0ToDrivers
                     _send1ToDrivers
 ---------------------------------------------------------------------------------
 (4) _send1ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _send0ToDrivers                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _blankTubes                                           2     2      0      70
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
     _InitI2C
     _InitTubes
       _blankTubes
       _display
       _loadDisplay
         _checkDP
           _send0ToDrivers
           _send1ToDrivers
         _latch
         _send0ToDrivers
         _send1ToDrivers
     _checkRTCType
       _readByteRTC
         _I2C_ReadByte
         _endReadRTC
           _I2C_SendNACK
           _I2C_Stop
         _reqReadRTC
           _I2C_ReStart
           _I2C_Start
           _I2C_WriteByte
       _writeByteRTC
         _endWriteRTC
           _I2C_Stop
         _reqWriteRTC
           _I2C_Start
           _I2C_WriteByte
         _writeDataRTC
           _I2C_WriteByte
     _isRTCRunning
       _readByteRTC
     _startRTC
       _displayError
         _blankTubes
         _loadDisplay
       _endWriteRTC
       _readByteRTC
       _reqWriteRTC
       _writeDataRTC
   _buttons
   _displayError
   _getTime
     _I2C_SendACK
     _endReadRTC
     _getDate
       _I2C_SendACK
       _endReadRTC
       _loadDisplay
       _readDataRTC
         _I2C_ReadByte
       _reqReadRTC
       _swapNibbles
     _loadDisplay
     _readByteRTC
     _readDataRTC
     _reqReadRTC
     _swapNibbles
   _loadDisplay
   _preLoadWL
   _settingsMenu
     _blankingSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _brightnessSetting
     _dateFormatSetting
       _buttons
       _loadDisplay
     _daySetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _hourFormatSetting
       _blankTubes
       _buttons
       _loadDisplay
     _hoursSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _minuteSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _monthSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _timeAdjSetting
     _unblankingSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC
     _yearSetting
       _buttons
       _incDecBCD
       _loadDisplay
       _readByteRTC
       _swapNibbles
       _writeByteRTC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0hhh            46      6       B       3       15.7%
BANK0l               2      0       2       4      100.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       5       5        6.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            30      0       0       6        0.0%
BANK2               30      0       0       7        0.0%
ABS                  0      0      20       8        0.0%
BITBANK0hhh         46      0       0       9        0.0%
BITBANK0l            2      0       0      10        0.0%
BITBANK1            50      0       0      11        0.0%
DATA                 0      0      20      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Nov 03 17:02:32 2023

              _swapNibbles 03F7                         l92 073C                         _T0 0022  
                       _T1 0023                         l94 0770                         _T2 0024  
                       _T3 0025                         l96 0779                         _T4 0026  
                       _T5 0027                         _T6 0028                         _T7 0029  
            ?_displayError 0070          _dateFormatSetting 0453                        l103 058F  
                      l193 06EF                        l434 071B                        l445 0738  
                      l438 0719                        l199 063E                        l295 03F3  
                      l376 0540                        u730 074F                        u724 0746  
                      u805 0547                        u725 0744                        u864 05A5  
                      u865 05A3                        u955 03E4                        u985 03FB  
                      u995 0407                        fsr0 0004                        indf 0000  
__end_of_hourFormatSetting 0611         ?_dateFormatSetting 0070        loadDisplay@numIndex 0075  
                     l2013 0641                       l2051 05E7                       l2109 0438  
                     l2231 042D                       l2127 056E                       l2209 0469  
                     l2145 047C                       l2057 05F7                       l2073 049E  
                     l2067 0605                       l2091 04C0                       l2163 04E2  
                     l2229 042B                       l2325 07E9                       l2181 0504  
                     l2255 0521                       l2271 052D                       l2329 07EC  
                     l2353 0666                       l2337 0655                       l2291 07AE  
                     l2283 0797                       l2267 052B                       l2259 0527  
                     l2339 0645                       l2197 0457                       l2381 0535  
                     l1735 077D                       l1719 0752                       l2359 0673  
                     l1853 03CC                       l1749 055A                       l1783 068A  
                     l1871 06FF                       l1785 068B                       l1769 067C  
                     l1873 070C                       l1795 069F                       l1779 0681  
                     l1883 071D                       l1797 06A0                       l1885 072F  
                     l1975 06D5                       l1977 06D7                       u1005 0353  
                     u1015 06CC                       u1035 06DD                       u1115 0609  
                     u1055 0617                       u1215 048B                       u1135 04AD  
                     u1155 04CF                       u1235 04F1                       u1325 078E  
                     u1085 05EB                       u1175 0447                       u1255 0513  
                     u1415 0669                       u1195 0580                       u1285 046D  
                     u1437 064F                       u1447 0707        ??_dateFormatSetting 0078  
                     u1457 0729                       u1467 07A6                       u1395 065C  
          readByteRTC@data 0076                       _Flag 0036                       _Init 0410  
                     _main 0643                       btemp 007E           __end_of_I2C_Stop 03A5  
         __pcstackBANK0hhh 002A               ?_loadDisplay 0070                       start 0000  
             ?_readDataRTC 0070            __end_of_InitI2C 0318               ?_readByteRTC 0070  
__end_of_dateFormatSetting 0475             ??_displayError 0078                      ?_Init 0070  
                    ?_main 0070      __end_of_minuteSetting 04DB                      _CMCON 001F  
     loadDisplay@tubeIndex 0074                      _PORTB 0006            __end_of_checkDP 0566  
                    _TRISA 0085                      _TRISB 0086                      _Flag2 00A4  
     __end_of_isRTCRunning 035A            __end_of_getDate 05E3            __end_of_getTime 07F0  
             _I2C_ReadByte 058D            __end_of_display 0311                      _latch 032E  
             _I2C_SendNACK 0376            __end_of_buttons 073A          __end_of_I2C_Start 0376  
                    status 0003                      wtemp0 007E           ??_send0ToDrivers 0070  
         ??_send1ToDrivers 0070            __initialization 07F0               __end_of_Init 0431  
             __end_of_main 0675                     ??_Init 007C                     ??_main 002D  
             ?_reqWriteRTC 0070               _writeDataRTC 0304                     ?_latch 0070  
             _writeByteRTC 031F            yearSetting@year 0079           checkRTCType@data 0078  
                ??_InitI2C 0070          reqReadRTC@address 0074                     _incMax 00A0  
                   _incMin 00A1                     _leftDP 0032                  ??_checkDP 0070  
           loadDisplay@LDP 0076             loadDisplay@RDP 0077                  ??_getDate 0078  
                ??_getTime 007B               _checkRTCType 0611                  ??_display 0070  
        _unblankingSetting 0566                  ??_buttons 0070                  ?_I2C_Stop 0070  
       ?_unblankingSetting 0070           __end_of_startRTC 06F4               ?_yearSetting 0070  
      ??_unblankingSetting 0078       __end_of_displayError 03F7    __end_of__initialization 07FE  
        ??_blankingSetting 0078               __pnvBANK0hhh 0036             __pcstackCOMMON 0070  
            _I2C_WriteByte 073A               ?_swapNibbles 0070              __end_of_latch 0338  
__end_of_unblankingSetting 058D              ?_hoursSetting 0070          hoursSetting@hours 0079  
        __end_of_InitTubes 0304                 ??_I2C_Stop 0070                    ??_latch 0070  
               __pbssBANK1 00A0                 _daySetting 0475                 _blankStart 0034  
               _blankTubes 03C9                 _endReadRTC 02FD               _isRTCRunning 034D  
               __pmaintext 0643             ?_I2C_WriteByte 0070           writeDataRTC@data 0074  
           ??_hoursSetting 0078            swapNibbles@data 0073             _timeAdjSetting 02FA  
            ??_I2C_ReStart 0070              ??_I2C_SendACK 0070         readByteRTC@address 0075  
        monthSetting@month 0079              ?_monthSetting 0070                    _ErrFlag 0033  
                  _InitI2C 0311                  _I2C_Start 0368          __end_of_incDecBCD 02F9  
         I2C_ReadByte@data 0071     __end_of_timeAdjSetting 02FB                  ?_startRTC 0070  
               _oldSeconds 0030                    _checkDP 0541                    _getDate 05B6  
                  __ptext0 0000                    __ptext1 051F                    __ptext2 04FD  
                  __ptext3 0566                    _getTime 0786                    __ptext4 02FA  
                  __ptext5 04DB                    __ptext6 04B9                    __ptext7 0497  
                  __ptext8 05E3                    __ptext9 0475              daySetting@day 0079  
                  _display 030C                    _buttons 06F4                 _reqReadRTC 0338  
                  _rightDP 0031       minuteSetting@minutes 0079        __end_of_I2C_ReStart 03B6  
      __end_of_I2C_SendACK 0394             ??_monthSetting 0078          __end_of_preLoadWL 03C9  
     end_of_initialization 07FE                 getDate@day 0078              blankTubes@ptr 0070  
              ?_daySetting 0070                ?_blankTubes 0070                 ?_I2C_Start 0070  
             buttons@timer 0071            ??_I2C_WriteByte 0070                ?_endReadRTC 0070  
          ?_timeAdjSetting 0070                 ??_startRTC 0079                  _PORTAbits 0005  
             _displayError 03E0              ?_settingsMenu 0070         startRTC@RTCaddress 007B  
            ??_endWriteRTC 0070              __pbssBANK0hhh 0030                  _TRISAbits 0085  
       reqWriteRTC@address 0074            _blankingSetting 0431         loadDisplay@dispNum 0072  
     __end_of_hoursSetting 04B9         loadDisplay@tubePtr 0073        writeByteRTC@address 0076  
           ??_settingsMenu 007A                _I2C_ReStart 03A5                _I2C_SendACK 0385  
            _minuteSetting 04B9                ?_reqReadRTC 0070        start_initialization 07F0  
                _InitTubes 0300        __end_of_endWriteRTC 02FD              ??_loadDisplay 0072  
              ??_I2C_Start 0070              ??_readDataRTC 0073              ??_readByteRTC 0075  
     __end_of_monthSetting 04FD             ?_minuteSetting 0070    __end_of_blankingSetting 0453  
           I2C_WriteByte@i 0073                __pbssBANK0l 0034                  ___latbits 0000  
            ?_I2C_ReadByte 0070                 ?_InitTubes 0070              ?_I2C_SendNACK 0070  
                 ?_InitI2C 0070                  _incDecBCD 02F8              I2C_ReadByte@i 0072  
      __end_of_loadDisplay 06AE                   ?_checkDP 0070        __end_of_readDataRTC 030C  
                 ?_getDate 0070                   ?_getTime 0070                   ?_display 0070  
                checkDP@DP 0071           writeByteRTC@data 0075            readDataRTC@data 0073  
            ??_reqWriteRTC 0074              ?_writeDataRTC 0070                   ?_buttons 0070  
      __end_of_readByteRTC 032E                _endWriteRTC 02FB                   _I2C_Stop 0394  
           ??_I2C_ReadByte 0070             ??_I2C_SendNACK 0070              ?_writeByteRTC 0075  
     __end_of_settingsMenu 0541               ??_daySetting 0078                  _preLoadWL 03B6  
             ??_blankTubes 0070           ??_timeAdjSetting 0070               ??_endReadRTC 0070  
         settingsMenu@menu 007C                 ?_incDecBCD 0070             _send0ToDrivers 035A  
          ??_minuteSetting 0078               _hoursSetting 0497              ?_checkRTCType 0070  
           _send1ToDrivers 0342           ?_blankingSetting 0070             ??_writeDataRTC 0074  
         isRTCRunning@data 0078         __end_of_daySetting 0497          _brightnessSetting 02F9  
       __end_of_blankTubes 03E0             getTime@minutes 002A             getTime@seconds 002C  
           ??_writeByteRTC 0076                ??_InitTubes 0078              ??_yearSetting 0078  
       __end_of_endReadRTC 0300         ?_brightnessSetting 0070        __end_of_reqWriteRTC 031F  
             getDate@month 0079                 ?_preLoadWL 0070        ??_brightnessSetting 0070  
              _loadDisplay 0675      __end_of_I2C_WriteByte 0786                _readDataRTC 0308  
   __end_of_send0ToDrivers 0368              ??_swapNibbles 0070                _readByteRTC 0326  
   __end_of_send1ToDrivers 034D             ??_checkRTCType 0077               ?_I2C_ReStart 0070  
             ?_I2C_SendACK 0070  __end_of_brightnessSetting 02FA               ??_reqReadRTC 0074  
                 _blankEnd 00A2                   __ptext10 0453                   __ptext11 02F9  
                 __ptext20 0385                   __ptext12 0431                   __ptext21 0410  
                 __ptext13 02F8                   __ptext30 0326                   __ptext22 06AE  
                 __ptext14 06F4                   __ptext31 0338                   __ptext23 03E0  
                 __ptext15 03B6                   __ptext40 0675                   __ptext32 073A  
                 __ptext24 034D                   __ptext16 0786                   __ptext41 032E  
                 __ptext33 0368                   __ptext25 0611                   __ptext17 05B6  
                 __ptext42 0541                   __ptext34 03A5                   __ptext26 031F  
                 __ptext18 03F7                   __ptext43 0342                   __ptext35 02FD  
                 __ptext27 0304                   __ptext19 0308                   __ptext44 035A  
                 __ptext36 0394                   __ptext28 0318                   __ptext45 030C  
                 __ptext37 0376                   __ptext29 02FB                   __ptext46 03C9  
                 __ptext38 058D                   __ptext47 0311                   __ptext39 0300  
             _monthSetting 04DB               _PORTA_SHADOW 00A3               _PORTB_SHADOW 0035  
      __end_of_yearSetting 051F                blankTubes@i 0071              ?_isRTCRunning 0070  
     __end_of_I2C_ReadByte 05B6                ??_incDecBCD 0070         __end_of_reqReadRTC 0342  
     __end_of_I2C_SendNACK 0385            ?_send0ToDrivers 0070                   _startRTC 06AE  
          ?_send1ToDrivers 0070        __end_of_swapNibbles 0410                getDate@year 007A  
              _reqWriteRTC 0318          startRTC@clockTest 007A                ??_preLoadWL 0070  
           ??_isRTCRunning 0077       __end_of_writeDataRTC 0308       __end_of_writeByteRTC 0326  
             getTime@hours 002B               _settingsMenu 051F                 _OPTION_REG 0081  
             ?_endWriteRTC 0070          _hourFormatSetting 05E3                _yearSetting 04FD  
       ?_hourFormatSetting 0070       __end_of_checkRTCType 0643          I2C_WriteByte@Data 0071  
       I2C_WriteByte@timer 0072        ??_hourFormatSetting 0078  
