

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Oct 22 03:15:05 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,merge=1,delta=2
    13                           	psect	text7,local,class=CODE,merge=1,delta=2
    14                           	psect	text8,local,class=CODE,merge=1,delta=2
    15                           	psect	text9,local,class=CODE,merge=1,delta=2
    16                           	psect	text10,local,class=CODE,merge=1,delta=2
    17                           	psect	text11,local,class=CODE,merge=1,delta=2
    18                           	psect	text12,local,class=CODE,merge=1,delta=2
    19                           	psect	text13,local,class=CODE,merge=1,delta=2
    20                           	psect	text14,local,class=CODE,merge=1,delta=2
    21                           	psect	text15,local,class=CODE,merge=1,delta=2
    22                           	psect	text16,local,class=CODE,merge=1,delta=2
    23                           	psect	text17,local,class=CODE,merge=1,delta=2
    24                           	psect	text18,local,class=CODE,merge=1,delta=2
    25                           	psect	text19,local,class=CODE,merge=1,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Generated 12/10/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F628A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0000                     	;# 
    64     0001                     	;# 
    65     0002                     	;# 
    66     0003                     	;# 
    67     0004                     	;# 
    68     0005                     	;# 
    69     0006                     	;# 
    70     000A                     	;# 
    71     000B                     	;# 
    72     000C                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     008C                     	;# 
    91     008E                     	;# 
    92     0092                     	;# 
    93     0098                     	;# 
    94     0099                     	;# 
    95     009A                     	;# 
    96     009B                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009F                     	;# 
   100     0000                     	;# 
   101     0001                     	;# 
   102     0002                     	;# 
   103     0003                     	;# 
   104     0004                     	;# 
   105     0005                     	;# 
   106     0006                     	;# 
   107     000A                     	;# 
   108     000B                     	;# 
   109     000C                     	;# 
   110     000E                     	;# 
   111     000E                     	;# 
   112     000F                     	;# 
   113     0010                     	;# 
   114     0011                     	;# 
   115     0012                     	;# 
   116     0015                     	;# 
   117     0015                     	;# 
   118     0016                     	;# 
   119     0017                     	;# 
   120     0018                     	;# 
   121     0019                     	;# 
   122     001A                     	;# 
   123     001F                     	;# 
   124     0081                     	;# 
   125     0085                     	;# 
   126     0086                     	;# 
   127     008C                     	;# 
   128     008E                     	;# 
   129     0092                     	;# 
   130     0098                     	;# 
   131     0099                     	;# 
   132     009A                     	;# 
   133     009B                     	;# 
   134     009C                     	;# 
   135     009D                     	;# 
   136     009F                     	;# 
   137     0000                     	;# 
   138     0001                     	;# 
   139     0002                     	;# 
   140     0003                     	;# 
   141     0004                     	;# 
   142     0005                     	;# 
   143     0006                     	;# 
   144     000A                     	;# 
   145     000B                     	;# 
   146     000C                     	;# 
   147     000E                     	;# 
   148     000E                     	;# 
   149     000F                     	;# 
   150     0010                     	;# 
   151     0011                     	;# 
   152     0012                     	;# 
   153     0015                     	;# 
   154     0015                     	;# 
   155     0016                     	;# 
   156     0017                     	;# 
   157     0018                     	;# 
   158     0019                     	;# 
   159     001A                     	;# 
   160     001F                     	;# 
   161     0081                     	;# 
   162     0085                     	;# 
   163     0086                     	;# 
   164     008C                     	;# 
   165     008E                     	;# 
   166     0092                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009A                     	;# 
   170     009B                     	;# 
   171     009C                     	;# 
   172     009D                     	;# 
   173     009F                     	;# 
   174     0000                     	;# 
   175     0001                     	;# 
   176     0002                     	;# 
   177     0003                     	;# 
   178     0004                     	;# 
   179     0005                     	;# 
   180     0006                     	;# 
   181     000A                     	;# 
   182     000B                     	;# 
   183     000C                     	;# 
   184     000E                     	;# 
   185     000E                     	;# 
   186     000F                     	;# 
   187     0010                     	;# 
   188     0011                     	;# 
   189     0012                     	;# 
   190     0015                     	;# 
   191     0015                     	;# 
   192     0016                     	;# 
   193     0017                     	;# 
   194     0018                     	;# 
   195     0019                     	;# 
   196     001A                     	;# 
   197     001F                     	;# 
   198     0081                     	;# 
   199     0085                     	;# 
   200     0086                     	;# 
   201     008C                     	;# 
   202     008E                     	;# 
   203     0092                     	;# 
   204     0098                     	;# 
   205     0099                     	;# 
   206     009A                     	;# 
   207     009B                     	;# 
   208     009C                     	;# 
   209     009D                     	;# 
   210     009F                     	;# 
   211     0005                     _PORTAbits	set	5
   212     0003                     _STATUSbits	set	3
   213     001F                     _CMCON	set	31
   214     0085                     _TRISAbits	set	133
   215     0081                     _OPTION_REG	set	129
   216     0086                     _TRISB	set	134
   217     0085                     _TRISA	set	133
   218                           
   219                           	psect	cinit
   220     07FE                     start_initialization:	
   221                           ; #config settings
   222                           
   223     07FE                     __initialization:
   224     07FE                     end_of_initialization:	
   225                           ;End of C runtime variable initialization code
   226                           
   227     07FE                     __end_of__initialization:
   228     07FE  0183               	clrf	3
   229     07FF  2F4A               	ljmp	_main	;jump to C main() function
   230                           
   231                           	psect	cstackCOMMON
   232     0070                     __pcstackCOMMON:
   233     0070                     ?_isRTCRunning:
   234     0070                     ?_checkRTCType:	
   235                           ; 1 bit 
   236                           
   237     0070                     ?_I2C_WriteByte:	
   238                           ; 1 bit 
   239                           
   240     0070                     ?_InitI2C:	
   241                           ; 1 bit 
   242                           
   243     0070                     ??_InitI2C:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_startRTC:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_I2C_Start:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ??_I2C_Start:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_I2C_ReStart:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ??_I2C_ReStart:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ?_I2C_Stop:	
   265                           ; 1 bytes @ 0x0
   266                           
   267     0070                     ??_I2C_Stop:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     0070                     ??_I2C_WriteByte:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     0070                     ?_I2C_ReadByte:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     0070                     ??_I2C_ReadByte:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     0070                     ?_I2C_SendACK:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     0070                     ??_I2C_SendACK:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_I2C_SendNACK:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ??_I2C_SendNACK:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ?_reqReadRTC:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_readDataRTC:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ?_endReadRTC:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_readByteRTC:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ?_reqWriteRTC:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ?_writeDataRTC:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?_endWriteRTC:	
   310                           ; 1 bytes @ 0x0
   311                           
   312                           
   313                           ; 1 bytes @ 0x0
   314     0070                     	ds	1
   315     0071                     ??_endReadRTC:
   316     0071                     ??_endWriteRTC:	
   317                           ; 1 bytes @ 0x1
   318                           
   319     0071                     I2C_ReadByte@i:	
   320                           ; 1 bytes @ 0x1
   321                           
   322                           
   323                           ; 1 bytes @ 0x1
   324     0071                     	ds	1
   325     0072                     I2C_WriteByte@Data:
   326     0072                     I2C_ReadByte@Dat:	
   327                           ; 1 bytes @ 0x2
   328                           
   329                           
   330                           ; 1 bytes @ 0x2
   331     0072                     	ds	1
   332     0073                     ??_readDataRTC:
   333     0073                     I2C_WriteByte@i:	
   334                           ; 1 bytes @ 0x3
   335                           
   336     0073                     readDataRTC@data:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 1 bytes @ 0x3
   341     0073                     	ds	1
   342     0074                     ??_reqReadRTC:
   343     0074                     ??_reqWriteRTC:	
   344                           ; 1 bytes @ 0x4
   345                           
   346     0074                     ??_writeDataRTC:	
   347                           ; 1 bytes @ 0x4
   348                           
   349     0074                     reqReadRTC@address:	
   350                           ; 1 bytes @ 0x4
   351                           
   352     0074                     reqWriteRTC@address:	
   353                           ; 1 bytes @ 0x4
   354                           
   355     0074                     writeDataRTC@data:	
   356                           ; 1 bytes @ 0x4
   357                           
   358                           
   359                           ; 1 bytes @ 0x4
   360     0074                     	ds	1
   361     0075                     ??_isRTCRunning:
   362     0075                     ??_startRTC:	
   363                           ; 1 bytes @ 0x5
   364                           
   365     0075                     ??_readByteRTC:	
   366                           ; 1 bytes @ 0x5
   367                           
   368     0075                     ?_writeByteRTC:	
   369                           ; 1 bytes @ 0x5
   370                           
   371     0075                     readByteRTC@address:	
   372                           ; 1 bytes @ 0x5
   373                           
   374     0075                     writeByteRTC@data:	
   375                           ; 1 bytes @ 0x5
   376                           
   377     0075                     isRTCRunning@data:	
   378                           ; 1 bytes @ 0x5
   379                           
   380                           
   381                           ; 1 bytes @ 0x5
   382     0075                     	ds	1
   383     0076                     ??_writeByteRTC:
   384     0076                     readByteRTC@data:	
   385                           ; 1 bytes @ 0x6
   386                           
   387     0076                     writeByteRTC@address:	
   388                           ; 1 bytes @ 0x6
   389                           
   390                           
   391                           ; 1 bytes @ 0x6
   392     0076                     	ds	1
   393     0077                     ??_checkRTCType:
   394     0077                     checkRTCType@data:	
   395                           ; 1 bytes @ 0x7
   396                           
   397                           
   398                           ; 1 bytes @ 0x7
   399     0077                     	ds	1
   400     0078                     ??_main:
   401                           
   402                           	psect	maintext
   403     074A                     __pmaintext:	
   404                           ; 1 bytes @ 0x8
   405 ;;
   406 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   407 ;;
   408 ;; *************** function _main *****************
   409 ;; Defined at:
   410 ;;		line 19 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;		None
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : B00/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   424 ;;      Params:         0       0       0       0
   425 ;;      Locals:         0       0       0       0
   426 ;;      Temps:          0       0       0       0
   427 ;;      Totals:         0       0       0       0
   428 ;;Total ram usage:        0 bytes
   429 ;; Hardware stack levels required when called: 4
   430 ;; This function calls:
   431 ;;		_InitI2C
   432 ;;		_checkRTCType
   433 ;;		_isRTCRunning
   434 ;;		_startRTC
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440     074A                     _main:	
   441                           ;psect for function _main
   442                           
   443     074A                     l883:	
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   446                           
   447                           
   448                           ;main.c: 21:     CMCON = 0b111;
   449     074A  3007               	movlw	7
   450     074B  1283               	bcf	3,5	;RP0=0, select bank0
   451     074C  1303               	bcf	3,6	;RP1=0, select bank0
   452     074D  009F               	movwf	31	;volatile
   453                           
   454                           ;main.c: 22:     TRISA = 0b00101111;
   455     074E  302F               	movlw	47
   456     074F  1683               	bsf	3,5	;RP0=1, select bank1
   457     0750  1303               	bcf	3,6	;RP1=0, select bank1
   458     0751  0085               	movwf	5	;volatile
   459     0752                     l885:
   460                           
   461                           ;main.c: 23:     TRISB = 0b00000000;
   462     0752  0186               	clrf	6	;volatile
   463     0753                     l887:
   464                           
   465                           ;main.c: 24:     OPTION_REG = 0b11011111;
   466     0753  30DF               	movlw	223
   467     0754  0081               	movwf	1	;volatile
   468     0755                     l889:
   469                           
   470                           ;main.c: 25:     STATUSbits.RP0 = 1;
   471     0755  1283               	bcf	3,5	;RP0=0, select bank0
   472     0756  1303               	bcf	3,6	;RP1=0, select bank0
   473     0757  1683               	bsf	3,5	;volatile
   474     0758                     l891:
   475                           
   476                           ;main.c: 26:     STATUSbits.RP1 = 0;
   477     0758  1303               	bcf	3,6	;volatile
   478     0759                     l893:
   479                           
   480                           ;main.c: 28:     InitI2C();
   481     0759  2688               	fcall	_InitI2C
   482     075A                     l895:
   483                           
   484                           ;main.c: 30:     if(isRTCRunning()) {
   485     075A  26A0               	fcall	_isRTCRunning
   486     075B  1C03               	btfss	3,0
   487     075C  2F5E               	goto	u121
   488     075D  2F5F               	goto	u120
   489     075E                     u121:
   490     075E  2F61               	goto	l899
   491     075F                     u120:
   492     075F                     l897:
   493                           
   494                           ;main.c: 31:         startRTC();
   495     075F  26F9               	fcall	_startRTC
   496                           
   497                           ;main.c: 32:     } else {
   498     0760  2F67               	goto	l26
   499     0761                     l899:
   500                           
   501                           ;main.c: 33:         if(checkRTCType()) {
   502     0761  2768               	fcall	_checkRTCType
   503     0762  1C03               	btfss	3,0
   504     0763  2F65               	goto	u131
   505     0764  2F66               	goto	u130
   506     0765                     u131:
   507     0765  2F67               	goto	l26
   508     0766                     u130:
   509     0766  2F5F               	goto	l897
   510     0767                     l26:
   511     0767  2800               	ljmp	start
   512     0768                     __end_of_main:
   513                           
   514                           	psect	text1
   515     06F9                     __ptext1:	
   516 ;; *************** function _startRTC *****************
   517 ;; Defined at:
   518 ;;		line 57 in file "RTC.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   532 ;;      Params:         0       0       0       0
   533 ;;      Locals:         0       0       0       0
   534 ;;      Temps:          0       0       0       0
   535 ;;      Totals:         0       0       0       0
   536 ;;Total ram usage:        0 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; Hardware stack levels required when called: 2
   539 ;; This function calls:
   540 ;;		_endWriteRTC
   541 ;;		_reqWriteRTC
   542 ;;		_writeDataRTC
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548     06F9                     _startRTC:	
   549                           ;psect for function _startRTC
   550                           
   551     06F9                     l791:	
   552                           ;incstack = 0
   553                           ; Regs used in _startRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   554                           
   555                           
   556                           ;RTC.c: 58:     reqWriteRTC(0x00);
   557     06F9  3000               	movlw	0
   558     06FA  2692               	fcall	_reqWriteRTC
   559                           
   560                           ;RTC.c: 59:     writeDataRTC(0x00);
   561     06FB  3000               	movlw	0
   562     06FC  2684               	fcall	_writeDataRTC
   563                           
   564                           ;RTC.c: 61:     writeDataRTC(0x30);
   565     06FD  3030               	movlw	48
   566     06FE  2684               	fcall	_writeDataRTC
   567                           
   568                           ;RTC.c: 62:     writeDataRTC(0x12);
   569     06FF  3012               	movlw	18
   570     0700  2684               	fcall	_writeDataRTC
   571                           
   572                           ;RTC.c: 63:     writeDataRTC(0x28);
   573     0701  3028               	movlw	40
   574     0702  2684               	fcall	_writeDataRTC
   575                           
   576                           ;RTC.c: 64:     writeDataRTC(0x7);
   577     0703  3007               	movlw	7
   578     0704  2684               	fcall	_writeDataRTC
   579                           
   580                           ;RTC.c: 65:     writeDataRTC(0x10);
   581     0705  3010               	movlw	16
   582     0706  2684               	fcall	_writeDataRTC
   583     0707                     l793:
   584                           
   585                           ;RTC.c: 66:     endWriteRTC();
   586     0707  267F               	fcall	_endWriteRTC
   587     0708                     l795:
   588                           
   589                           ;RTC.c: 68:     reqWriteRTC(0x14);
   590     0708  3014               	movlw	20
   591     0709  2692               	fcall	_reqWriteRTC
   592     070A                     l797:
   593                           
   594                           ;RTC.c: 69:     writeDataRTC(0x00);
   595     070A  3000               	movlw	0
   596     070B  2684               	fcall	_writeDataRTC
   597     070C                     l799:
   598                           
   599                           ;RTC.c: 70:     writeDataRTC(0x00);
   600     070C  3000               	movlw	0
   601     070D  2684               	fcall	_writeDataRTC
   602                           
   603                           ;RTC.c: 71:     endWriteRTC();
   604     070E  267F               	fcall	_endWriteRTC
   605     070F                     l106:
   606     070F  0008               	return
   607     0710                     __end_of_startRTC:
   608                           
   609                           	psect	text2
   610     06A0                     __ptext2:	
   611 ;; *************** function _isRTCRunning *****************
   612 ;; Defined at:
   613 ;;		line 51 in file "RTC.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  data            1    5[COMMON] unsigned char 
   618 ;; Return value:  Size  Location     Type
   619 ;;		None               void
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   627 ;;      Params:         0       0       0       0
   628 ;;      Locals:         1       0       0       0
   629 ;;      Temps:          0       0       0       0
   630 ;;      Totals:         1       0       0       0
   631 ;;Total ram usage:        1 bytes
   632 ;; Hardware stack levels used: 1
   633 ;; Hardware stack levels required when called: 2
   634 ;; This function calls:
   635 ;;		_readDataRTC
   636 ;;		_reqReadRTC
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642     06A0                     _isRTCRunning:	
   643                           ;psect for function _isRTCRunning
   644                           
   645     06A0                     l785:	
   646                           ;incstack = 0
   647                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   648                           
   649                           
   650                           ;RTC.c: 52:     unsigned char data;;RTC.c: 53:     reqReadRTC(0x00);
   651     06A0  3000               	movlw	0
   652     06A1  26AF               	fcall	_reqReadRTC
   653                           
   654                           ;RTC.c: 54:     data = readDataRTC();
   655     06A2  268D               	fcall	_readDataRTC
   656     06A3  00F5               	movwf	isRTCRunning@data
   657     06A4                     l787:
   658                           
   659                           ;RTC.c: 55:     return (data |= (1<<7));
   660     06A4  17F5               	bsf	isRTCRunning@data,7
   661     06A5  0C75               	rrf	isRTCRunning@data,w
   662     06A6                     l103:
   663     06A6  0008               	return
   664     06A7                     __end_of_isRTCRunning:
   665                           
   666                           	psect	text3
   667     068D                     __ptext3:	
   668 ;; *************** function _readDataRTC *****************
   669 ;; Defined at:
   670 ;;		line 11 in file "RTC.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  data            1    3[COMMON] unsigned char 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      unsigned char 
   677 ;; Registers used:
   678 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   684 ;;      Params:         0       0       0       0
   685 ;;      Locals:         1       0       0       0
   686 ;;      Temps:          0       0       0       0
   687 ;;      Totals:         1       0       0       0
   688 ;;Total ram usage:        1 bytes
   689 ;; Hardware stack levels used: 1
   690 ;; Hardware stack levels required when called: 1
   691 ;; This function calls:
   692 ;;		_I2C_ReadByte
   693 ;;		_I2C_SendACK
   694 ;; This function is called by:
   695 ;;		_isRTCRunning
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699     068D                     _readDataRTC:	
   700                           ;psect for function _readDataRTC
   701                           
   702     068D                     l763:	
   703                           ;incstack = 0
   704                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   705                           
   706                           
   707                           ;RTC.c: 12:     unsigned char data;;RTC.c: 13:     data = I2C_ReadByte();
   708     068D  2789               	fcall	_I2C_ReadByte
   709     068E  00F3               	movwf	readDataRTC@data
   710     068F                     l765:
   711                           
   712                           ;RTC.c: 14:     I2C_SendACK();
   713     068F  26E2               	fcall	_I2C_SendACK
   714     0690                     l767:
   715                           
   716                           ;RTC.c: 15:     return data;
   717     0690  0873               	movf	readDataRTC@data,w
   718     0691                     l82:
   719     0691  0008               	return
   720     0692                     __end_of_readDataRTC:
   721                           
   722                           	psect	text4
   723     06E2                     __ptext4:	
   724 ;; *************** function _I2C_SendACK *****************
   725 ;; Defined at:
   726 ;;		line 81 in file "IIC.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;		None
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   740 ;;      Params:         0       0       0       0
   741 ;;      Locals:         0       0       0       0
   742 ;;      Temps:          1       0       0       0
   743 ;;      Totals:         1       0       0       0
   744 ;;Total ram usage:        1 bytes
   745 ;; Hardware stack levels used: 1
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_readDataRTC
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753     06E2                     _I2C_SendACK:	
   754                           ;psect for function _I2C_SendACK
   755                           
   756     06E2                     l735:	
   757                           ;incstack = 0
   758                           ; Regs used in _I2C_SendACK: [wreg]
   759                           
   760                           
   761                           ;IIC.c: 82:     TRISAbits.TRISA0 = 0;
   762     06E2  1683               	bsf	3,5	;RP0=1, select bank1
   763     06E3  1303               	bcf	3,6	;RP1=0, select bank1
   764     06E4  1005               	bcf	5,0	;volatile
   765     06E5                     l737:
   766                           
   767                           ;IIC.c: 83:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
   768     06E5  3053               	movlw	83
   769     06E6  00F0               	movwf	??_I2C_SendACK
   770     06E7                     u147:
   771     06E7  0BF0               	decfsz	??_I2C_SendACK,f
   772     06E8  2EE7               	goto	u147
   773     06E9                     l739:
   774                           
   775                           ;IIC.c: 84:     TRISAbits.TRISA1 = 0;
   776     06E9  1683               	bsf	3,5	;RP0=1, select bank1
   777     06EA  1303               	bcf	3,6	;RP1=0, select bank1
   778     06EB  1085               	bcf	5,1	;volatile
   779                           
   780                           ;IIC.c: 85:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
   781     06EC  3053               	movlw	83
   782     06ED  00F0               	movwf	??_I2C_SendACK
   783     06EE                     u157:
   784     06EE  0BF0               	decfsz	??_I2C_SendACK,f
   785     06EF  2EEE               	goto	u157
   786     06F0                     l741:
   787                           
   788                           ;IIC.c: 86:     TRISAbits.TRISA0 = 1;
   789     06F0  1683               	bsf	3,5	;RP0=1, select bank1
   790     06F1  1303               	bcf	3,6	;RP1=0, select bank1
   791     06F2  1405               	bsf	5,0	;volatile
   792                           
   793                           ;IIC.c: 87:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
   794     06F3  30A6               	movlw	166
   795     06F4  00F0               	movwf	??_I2C_SendACK
   796     06F5                     u167:
   797     06F5  0BF0               	decfsz	??_I2C_SendACK,f
   798     06F6  2EF5               	goto	u167
   799     06F7  0000               	nop
   800     06F8                     l57:
   801     06F8  0008               	return
   802     06F9                     __end_of_I2C_SendACK:
   803                           
   804                           	psect	text5
   805     0768                     __ptext5:	
   806 ;; *************** function _checkRTCType *****************
   807 ;; Defined at:
   808 ;;		line 75 in file "RTC.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  data            1    7[COMMON] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;		None               void
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   822 ;;      Params:         0       0       0       0
   823 ;;      Locals:         1       0       0       0
   824 ;;      Temps:          0       0       0       0
   825 ;;      Totals:         1       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 3
   829 ;; This function calls:
   830 ;;		_readByteRTC
   831 ;;		_writeByteRTC
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837     0768                     _checkRTCType:	
   838                           ;psect for function _checkRTCType
   839                           
   840     0768                     l855:	
   841                           ;incstack = 0
   842                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   843                           
   844                           
   845                           ;RTC.c: 76:     unsigned char data;;RTC.c: 77:     data = readByteRTC(0x0F);
   846     0768  300F               	movlw	15
   847     0769  26A7               	fcall	_readByteRTC
   848     076A  00F7               	movwf	checkRTCType@data
   849     076B                     l857:
   850                           
   851                           ;RTC.c: 78:     if(((data) & 1<<(7))) {
   852     076B  1FF7               	btfss	checkRTCType@data,7
   853     076C  2F6E               	goto	u101
   854     076D  2F6F               	goto	u100
   855     076E                     u101:
   856     076E  2F87               	goto	l879
   857     076F                     u100:
   858     076F                     l859:
   859                           
   860                           ;RTC.c: 81:         (data &=(0<<0));
   861     076F  01F7               	clrf	checkRTCType@data
   862     0770                     l861:
   863                           
   864                           ;RTC.c: 82:         writeByteRTC(0x0F,data);
   865     0770  01F5               	clrf	writeByteRTC@data
   866     0771  300F               	movlw	15
   867     0772  2699               	fcall	_writeByteRTC
   868     0773                     l863:
   869                           
   870                           ;RTC.c: 83:         (data |= (1<<0));
   871     0773  1477               	bsf	checkRTCType@data,0
   872     0774                     l865:
   873                           
   874                           ;RTC.c: 84:         writeByteRTC(0x0F,data);
   875     0774  0877               	movf	checkRTCType@data,w
   876     0775  00F5               	movwf	writeByteRTC@data
   877     0776  300F               	movlw	15
   878     0777  2699               	fcall	_writeByteRTC
   879     0778                     l867:
   880                           
   881                           ;RTC.c: 85:         _delay((unsigned long)((5)*(4000000/4000000.0)));
   882     0778  2F79               	nop2	;2 cycle nop
   883     0779  2F7A               	nop2	;2 cycle nop
   884     077A  0000               	nop
   885     077B                     l869:
   886                           
   887                           ;RTC.c: 86:         data = readByteRTC(0x0F);
   888     077B  300F               	movlw	15
   889     077C  26A7               	fcall	_readByteRTC
   890     077D  00F7               	movwf	checkRTCType@data
   891     077E                     l871:
   892                           
   893                           ;RTC.c: 87:         if(!((data) & 1<<(0))) {
   894     077E  1877               	btfsc	checkRTCType@data,0
   895     077F  2F81               	goto	u111
   896     0780  2F82               	goto	u110
   897     0781                     u111:
   898     0781  2F87               	goto	l879
   899     0782                     u110:
   900     0782                     l873:
   901                           
   902                           ;RTC.c: 88:             writeByteRTC(0x0F, 0x00);
   903     0782  01F5               	clrf	writeByteRTC@data
   904     0783  300F               	movlw	15
   905     0784  2699               	fcall	_writeByteRTC
   906     0785                     l875:
   907                           
   908                           ;RTC.c: 89:             return 1;
   909     0785  1403               	setc
   910     0786  2F88               	goto	l111
   911     0787                     l879:
   912                           
   913                           ;RTC.c: 92:     return 0;
   914     0787  1003               	clrc
   915     0788                     l111:
   916     0788  0008               	return
   917     0789                     __end_of_checkRTCType:
   918                           
   919                           	psect	text6
   920     0699                     __ptext6:	
   921 ;; *************** function _writeByteRTC *****************
   922 ;; Defined at:
   923 ;;		line 45 in file "RTC.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  address         1    wreg     unsigned char 
   926 ;;  data            1    5[COMMON] unsigned char 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  address         1    6[COMMON] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   938 ;;      Params:         1       0       0       0
   939 ;;      Locals:         1       0       0       0
   940 ;;      Temps:          0       0       0       0
   941 ;;      Totals:         2       0       0       0
   942 ;;Total ram usage:        2 bytes
   943 ;; Hardware stack levels used: 1
   944 ;; Hardware stack levels required when called: 2
   945 ;; This function calls:
   946 ;;		_endWriteRTC
   947 ;;		_reqWriteRTC
   948 ;;		_writeDataRTC
   949 ;; This function is called by:
   950 ;;		_checkRTCType
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954     0699                     _writeByteRTC:	
   955                           ;psect for function _writeByteRTC
   956                           
   957                           
   958                           ;incstack = 0
   959                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   960                           ;writeByteRTC@address stored from wreg
   961     0699  00F6               	movwf	writeByteRTC@address
   962     069A                     l851:
   963                           
   964                           ;RTC.c: 46:     reqWriteRTC(address);
   965     069A  0876               	movf	writeByteRTC@address,w
   966     069B  2692               	fcall	_reqWriteRTC
   967                           
   968                           ;RTC.c: 47:     writeDataRTC(data);
   969     069C  0875               	movf	writeByteRTC@data,w
   970     069D  2684               	fcall	_writeDataRTC
   971     069E                     l853:
   972                           
   973                           ;RTC.c: 48:     endWriteRTC();
   974     069E  267F               	fcall	_endWriteRTC
   975     069F                     l100:
   976     069F  0008               	return
   977     06A0                     __end_of_writeByteRTC:
   978                           
   979                           	psect	text7
   980     0684                     __ptext7:	
   981 ;; *************** function _writeDataRTC *****************
   982 ;; Defined at:
   983 ;;		line 37 in file "RTC.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  data            1    wreg     unsigned char 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;  data            1    4[COMMON] unsigned char 
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   997 ;;      Params:         0       0       0       0
   998 ;;      Locals:         1       0       0       0
   999 ;;      Temps:          0       0       0       0
  1000 ;;      Totals:         1       0       0       0
  1001 ;;Total ram usage:        1 bytes
  1002 ;; Hardware stack levels used: 1
  1003 ;; Hardware stack levels required when called: 1
  1004 ;; This function calls:
  1005 ;;		_I2C_WriteByte
  1006 ;; This function is called by:
  1007 ;;		_writeByteRTC
  1008 ;;		_startRTC
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012     0684                     _writeDataRTC:	
  1013                           ;psect for function _writeDataRTC
  1014                           
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1018                           ;writeDataRTC@data stored from wreg
  1019     0684  00F4               	movwf	writeDataRTC@data
  1020     0685                     l759:
  1021                           
  1022                           ;RTC.c: 38:     I2C_WriteByte(data);
  1023     0685  0874               	movf	writeDataRTC@data,w
  1024     0686  27B5               	fcall	_I2C_WriteByte
  1025     0687                     l94:
  1026     0687  0008               	return
  1027     0688                     __end_of_writeDataRTC:
  1028                           
  1029                           	psect	text8
  1030     0692                     __ptext8:	
  1031 ;; *************** function _reqWriteRTC *****************
  1032 ;; Defined at:
  1033 ;;		line 31 in file "RTC.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  address         1    wreg     unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  address         1    4[COMMON] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1047 ;;      Params:         0       0       0       0
  1048 ;;      Locals:         1       0       0       0
  1049 ;;      Temps:          0       0       0       0
  1050 ;;      Totals:         1       0       0       0
  1051 ;;Total ram usage:        1 bytes
  1052 ;; Hardware stack levels used: 1
  1053 ;; Hardware stack levels required when called: 1
  1054 ;; This function calls:
  1055 ;;		_I2C_Start
  1056 ;;		_I2C_WriteByte
  1057 ;; This function is called by:
  1058 ;;		_writeByteRTC
  1059 ;;		_startRTC
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063     0692                     _reqWriteRTC:	
  1064                           ;psect for function _reqWriteRTC
  1065                           
  1066                           
  1067                           ;incstack = 0
  1068                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1069                           ;reqWriteRTC@address stored from wreg
  1070     0692  00F4               	movwf	reqWriteRTC@address
  1071     0693                     l753:
  1072                           
  1073                           ;RTC.c: 32:     I2C_Start();
  1074     0693  26B9               	fcall	_I2C_Start
  1075     0694                     l755:
  1076                           
  1077                           ;RTC.c: 33:     I2C_WriteByte(0b11010000);
  1078     0694  30D0               	movlw	208
  1079     0695  27B5               	fcall	_I2C_WriteByte
  1080     0696                     l757:
  1081                           
  1082                           ;RTC.c: 34:     I2C_WriteByte(address);
  1083     0696  0874               	movf	reqWriteRTC@address,w
  1084     0697  27B5               	fcall	_I2C_WriteByte
  1085     0698                     l91:
  1086     0698  0008               	return
  1087     0699                     __end_of_reqWriteRTC:
  1088                           
  1089                           	psect	text9
  1090     067F                     __ptext9:	
  1091 ;; *************** function _endWriteRTC *****************
  1092 ;; Defined at:
  1093 ;;		line 41 in file "RTC.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0, pclath, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1107 ;;      Params:         0       0       0       0
  1108 ;;      Locals:         0       0       0       0
  1109 ;;      Temps:          0       0       0       0
  1110 ;;      Totals:         0       0       0       0
  1111 ;;Total ram usage:        0 bytes
  1112 ;; Hardware stack levels used: 1
  1113 ;; Hardware stack levels required when called: 1
  1114 ;; This function calls:
  1115 ;;		_I2C_Stop
  1116 ;; This function is called by:
  1117 ;;		_writeByteRTC
  1118 ;;		_startRTC
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122     067F                     _endWriteRTC:	
  1123                           ;psect for function _endWriteRTC
  1124                           
  1125     067F                     l761:	
  1126                           ;incstack = 0
  1127                           ; Regs used in _endWriteRTC: [wreg+status,2+status,0+pclath+cstack]
  1128                           
  1129                           
  1130                           ;RTC.c: 42:     I2C_Stop();
  1131     067F  2710               	fcall	_I2C_Stop
  1132     0680                     l97:
  1133     0680  0008               	return
  1134     0681                     __end_of_endWriteRTC:
  1135                           
  1136                           	psect	text10
  1137     06A7                     __ptext10:	
  1138 ;; *************** function _readByteRTC *****************
  1139 ;; Defined at:
  1140 ;;		line 23 in file "RTC.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  address         1    wreg     unsigned char 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  address         1    5[COMMON] unsigned char 
  1145 ;;  data            1    6[COMMON] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      unsigned char 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1155 ;;      Params:         0       0       0       0
  1156 ;;      Locals:         2       0       0       0
  1157 ;;      Temps:          0       0       0       0
  1158 ;;      Totals:         2       0       0       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used: 1
  1161 ;; Hardware stack levels required when called: 2
  1162 ;; This function calls:
  1163 ;;		_I2C_ReadByte
  1164 ;;		_endReadRTC
  1165 ;;		_reqReadRTC
  1166 ;; This function is called by:
  1167 ;;		_checkRTCType
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171     06A7                     _readByteRTC:	
  1172                           ;psect for function _readByteRTC
  1173                           
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1177                           ;readByteRTC@address stored from wreg
  1178     06A7  00F5               	movwf	readByteRTC@address
  1179     06A8                     l771:
  1180                           
  1181                           ;RTC.c: 24:     unsigned char data;;RTC.c: 25:     reqReadRTC(address);
  1182     06A8  0875               	movf	readByteRTC@address,w
  1183     06A9  26AF               	fcall	_reqReadRTC
  1184                           
  1185                           ;RTC.c: 26:     data = I2C_ReadByte();
  1186     06AA  2789               	fcall	_I2C_ReadByte
  1187     06AB  00F6               	movwf	readByteRTC@data
  1188     06AC                     l773:
  1189                           
  1190                           ;RTC.c: 27:     endReadRTC();
  1191     06AC  2681               	fcall	_endReadRTC
  1192     06AD                     l775:
  1193                           
  1194                           ;RTC.c: 28:     return data;
  1195     06AD  0876               	movf	readByteRTC@data,w
  1196     06AE                     l88:
  1197     06AE  0008               	return
  1198     06AF                     __end_of_readByteRTC:
  1199                           
  1200                           	psect	text11
  1201     06AF                     __ptext11:	
  1202 ;; *************** function _reqReadRTC *****************
  1203 ;; Defined at:
  1204 ;;		line 3 in file "RTC.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  address         1    wreg     unsigned char 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  address         1    4[COMMON] unsigned char 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1218 ;;      Params:         0       0       0       0
  1219 ;;      Locals:         1       0       0       0
  1220 ;;      Temps:          0       0       0       0
  1221 ;;      Totals:         1       0       0       0
  1222 ;;Total ram usage:        1 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 1
  1225 ;; This function calls:
  1226 ;;		_I2C_ReStart
  1227 ;;		_I2C_Start
  1228 ;;		_I2C_WriteByte
  1229 ;; This function is called by:
  1230 ;;		_readByteRTC
  1231 ;;		_isRTCRunning
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235     06AF                     _reqReadRTC:	
  1236                           ;psect for function _reqReadRTC
  1237                           
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1241                           ;reqReadRTC@address stored from wreg
  1242     06AF  00F4               	movwf	reqReadRTC@address
  1243     06B0                     l743:
  1244                           
  1245                           ;RTC.c: 4:     I2C_Start();
  1246     06B0  26B9               	fcall	_I2C_Start
  1247     06B1                     l745:
  1248                           
  1249                           ;RTC.c: 5:     I2C_WriteByte(0b11010000);
  1250     06B1  30D0               	movlw	208
  1251     06B2  27B5               	fcall	_I2C_WriteByte
  1252     06B3                     l747:
  1253                           
  1254                           ;RTC.c: 6:     I2C_WriteByte(address);
  1255     06B3  0874               	movf	reqReadRTC@address,w
  1256     06B4  27B5               	fcall	_I2C_WriteByte
  1257                           
  1258                           ;RTC.c: 7:     I2C_ReStart();
  1259     06B5  272D               	fcall	_I2C_ReStart
  1260     06B6                     l749:
  1261                           
  1262                           ;RTC.c: 8:     I2C_WriteByte(0b11010001);
  1263     06B6  30D1               	movlw	209
  1264     06B7  27B5               	fcall	_I2C_WriteByte
  1265     06B8                     l79:
  1266     06B8  0008               	return
  1267     06B9                     __end_of_reqReadRTC:
  1268                           
  1269                           	psect	text12
  1270     07B5                     __ptext12:	
  1271 ;; *************** function _I2C_WriteByte *****************
  1272 ;; Defined at:
  1273 ;;		line 42 in file "IIC.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  Data            1    wreg     unsigned char 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  Data            1    2[COMMON] unsigned char 
  1278 ;;  i               1    3[COMMON] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;		None               void
  1281 ;; Registers used:
  1282 ;;		wreg, status,2, status,0, btemp+1
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1288 ;;      Params:         0       0       0       0
  1289 ;;      Locals:         2       0       0       0
  1290 ;;      Temps:          2       0       0       0
  1291 ;;      Totals:         4       0       0       0
  1292 ;;Total ram usage:        4 bytes
  1293 ;; Hardware stack levels used: 1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_reqReadRTC
  1298 ;;		_reqWriteRTC
  1299 ;;		_writeDataRTC
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303     07B5                     _I2C_WriteByte:	
  1304                           ;psect for function _I2C_WriteByte
  1305                           
  1306                           
  1307                           ;incstack = 0
  1308                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  1309                           ;I2C_WriteByte@Data stored from wreg
  1310     07B5  00F2               	movwf	I2C_WriteByte@Data
  1311     07B6                     l681:
  1312                           
  1313                           ;IIC.c: 43:     unsigned char i;;IIC.c: 44:     for(i = 0; i<8; i++) {
  1314     07B6  01F3               	clrf	I2C_WriteByte@i
  1315     07B7                     l47:
  1316                           
  1317                           ;IIC.c: 45:         TRISAbits.TRISA0 = 0;
  1318     07B7  1683               	bsf	3,5	;RP0=1, select bank1
  1319     07B8  1303               	bcf	3,6	;RP1=0, select bank1
  1320     07B9  1005               	bcf	5,0	;volatile
  1321     07BA                     l687:
  1322                           
  1323                           ;IIC.c: 46:         _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1324     07BA  3053               	movlw	83
  1325     07BB  00F0               	movwf	??_I2C_WriteByte
  1326     07BC                     u177:
  1327     07BC  0BF0               	decfsz	??_I2C_WriteByte,f
  1328     07BD  2FBC               	goto	u177
  1329     07BE                     l689:
  1330                           
  1331                           ;IIC.c: 47:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  1332     07BE  0A73               	incf	I2C_WriteByte@i,w
  1333     07BF  00FF               	movwf	btemp+1
  1334     07C0  0872               	movf	I2C_WriteByte@Data,w
  1335     07C1  00F0               	movwf	??_I2C_WriteByte
  1336     07C2  01F1               	clrf	??_I2C_WriteByte+1
  1337     07C3  2FC7               	goto	u14
  1338     07C4                     u15:
  1339     07C4  1003               	clrc
  1340     07C5  0DF0               	rlf	??_I2C_WriteByte,f
  1341     07C6  0DF1               	rlf	??_I2C_WriteByte+1,f
  1342     07C7                     u14:
  1343     07C7  0BFF               	decfsz	btemp+1,f
  1344     07C8  2FC4               	goto	u15
  1345     07C9  1BF0               	btfsc	??_I2C_WriteByte,7
  1346     07CA  2FCC               	goto	u21
  1347     07CB  2FD0               	goto	u20
  1348     07CC                     u21:
  1349     07CC  1683               	bsf	3,5	;RP0=1, select bank1
  1350     07CD  1303               	bcf	3,6	;RP1=0, select bank1
  1351     07CE  1485               	bsf	5,1	;volatile
  1352     07CF  2FD3               	goto	u34
  1353     07D0                     u20:
  1354     07D0  1683               	bsf	3,5	;RP0=1, select bank1
  1355     07D1  1303               	bcf	3,6	;RP1=0, select bank1
  1356     07D2  1085               	bcf	5,1	;volatile
  1357     07D3                     u34:
  1358     07D3                     l691:
  1359                           
  1360                           ;IIC.c: 48:         _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1361     07D3  3053               	movlw	83
  1362     07D4  00F0               	movwf	??_I2C_WriteByte
  1363     07D5                     u187:
  1364     07D5  0BF0               	decfsz	??_I2C_WriteByte,f
  1365     07D6  2FD5               	goto	u187
  1366     07D7                     l693:
  1367                           
  1368                           ;IIC.c: 49:         TRISAbits.TRISA0 = 1;
  1369     07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1370     07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1371     07D9  1405               	bsf	5,0	;volatile
  1372     07DA                     l695:
  1373                           
  1374                           ;IIC.c: 50:         _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1375     07DA  30A6               	movlw	166
  1376     07DB  00F0               	movwf	??_I2C_WriteByte
  1377     07DC                     u197:
  1378     07DC  0BF0               	decfsz	??_I2C_WriteByte,f
  1379     07DD  2FDC               	goto	u197
  1380     07DE  0000               	nop
  1381     07DF                     l697:
  1382                           
  1383                           ;IIC.c: 51:     }
  1384     07DF  3001               	movlw	1
  1385     07E0  00FF               	movwf	btemp+1
  1386     07E1  087F               	movf	btemp+1,w
  1387     07E2  07F3               	addwf	I2C_WriteByte@i,f
  1388     07E3  3008               	movlw	8
  1389     07E4  0273               	subwf	I2C_WriteByte@i,w
  1390     07E5  1C03               	skipc
  1391     07E6  2FE8               	goto	u41
  1392     07E7  2FE9               	goto	u40
  1393     07E8                     u41:
  1394     07E8  2FB7               	goto	l47
  1395     07E9                     u40:
  1396     07E9                     l48:
  1397                           
  1398                           ;IIC.c: 54:     TRISAbits.TRISA0 = 0;
  1399     07E9  1683               	bsf	3,5	;RP0=1, select bank1
  1400     07EA  1303               	bcf	3,6	;RP1=0, select bank1
  1401     07EB  1005               	bcf	5,0	;volatile
  1402                           
  1403                           ;IIC.c: 55:     TRISAbits.TRISA1 = 1;
  1404     07EC  1485               	bsf	5,1	;volatile
  1405     07ED                     l699:
  1406                           
  1407                           ;IIC.c: 56:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1408     07ED  30A6               	movlw	166
  1409     07EE  00F0               	movwf	??_I2C_WriteByte
  1410     07EF                     u207:
  1411     07EF  0BF0               	decfsz	??_I2C_WriteByte,f
  1412     07F0  2FEF               	goto	u207
  1413     07F1  0000               	nop
  1414     07F2                     l701:
  1415                           
  1416                           ;IIC.c: 57:     TRISAbits.TRISA0 = 1;
  1417     07F2  1683               	bsf	3,5	;RP0=1, select bank1
  1418     07F3  1303               	bcf	3,6	;RP1=0, select bank1
  1419     07F4  1405               	bsf	5,0	;volatile
  1420                           
  1421                           ;IIC.c: 58:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1422     07F5  30A6               	movlw	166
  1423     07F6  00F0               	movwf	??_I2C_WriteByte
  1424     07F7                     u217:
  1425     07F7  0BF0               	decfsz	??_I2C_WriteByte,f
  1426     07F8  2FF7               	goto	u217
  1427     07F9  0000               	nop
  1428                           
  1429                           ;IIC.c: 61:     return PORTAbits.RA1;;	Return value of _I2C_WriteByte is never used
  1430     07FA  1283               	bcf	3,5	;RP0=0, select bank0
  1431     07FB  1303               	bcf	3,6	;RP1=0, select bank0
  1432     07FC  0805               	movf	5,w	;volatile
  1433     07FD                     l49:
  1434     07FD  0008               	return
  1435     07FE                     __end_of_I2C_WriteByte:
  1436                           
  1437                           	psect	text13
  1438     06B9                     __ptext13:	
  1439 ;; *************** function _I2C_Start *****************
  1440 ;; Defined at:
  1441 ;;		line 12 in file "IIC.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1455 ;;      Params:         0       0       0       0
  1456 ;;      Locals:         0       0       0       0
  1457 ;;      Temps:          1       0       0       0
  1458 ;;      Totals:         1       0       0       0
  1459 ;;Total ram usage:        1 bytes
  1460 ;; Hardware stack levels used: 1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_reqReadRTC
  1465 ;;		_reqWriteRTC
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469     06B9                     _I2C_Start:	
  1470                           ;psect for function _I2C_Start
  1471                           
  1472     06B9                     l655:	
  1473                           ;incstack = 0
  1474                           ; Regs used in _I2C_Start: [wreg]
  1475                           
  1476                           
  1477                           ;IIC.c: 13:     TRISAbits.TRISA0 = 1;
  1478     06B9  1683               	bsf	3,5	;RP0=1, select bank1
  1479     06BA  1303               	bcf	3,6	;RP1=0, select bank1
  1480     06BB  1405               	bsf	5,0	;volatile
  1481                           
  1482                           ;IIC.c: 14:     TRISAbits.TRISA1 = 1;
  1483     06BC  1485               	bsf	5,1	;volatile
  1484     06BD                     l657:
  1485                           
  1486                           ;IIC.c: 15:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1487     06BD  30A6               	movlw	166
  1488     06BE  00F0               	movwf	??_I2C_Start
  1489     06BF                     u227:
  1490     06BF  0BF0               	decfsz	??_I2C_Start,f
  1491     06C0  2EBF               	goto	u227
  1492     06C1  0000               	nop
  1493     06C2                     l659:
  1494                           
  1495                           ;IIC.c: 16:     TRISAbits.TRISA1 = 0;
  1496     06C2  1683               	bsf	3,5	;RP0=1, select bank1
  1497     06C3  1303               	bcf	3,6	;RP1=0, select bank1
  1498     06C4  1085               	bcf	5,1	;volatile
  1499                           
  1500                           ;IIC.c: 17:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1501     06C5  30A6               	movlw	166
  1502     06C6  00F0               	movwf	??_I2C_Start
  1503     06C7                     u237:
  1504     06C7  0BF0               	decfsz	??_I2C_Start,f
  1505     06C8  2EC7               	goto	u237
  1506     06C9  0000               	nop
  1507     06CA                     l38:
  1508     06CA  0008               	return
  1509     06CB                     __end_of_I2C_Start:
  1510                           
  1511                           	psect	text14
  1512     072D                     __ptext14:	
  1513 ;; *************** function _I2C_ReStart *****************
  1514 ;; Defined at:
  1515 ;;		line 19 in file "IIC.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1529 ;;      Params:         0       0       0       0
  1530 ;;      Locals:         0       0       0       0
  1531 ;;      Temps:          1       0       0       0
  1532 ;;      Totals:         1       0       0       0
  1533 ;;Total ram usage:        1 bytes
  1534 ;; Hardware stack levels used: 1
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_reqReadRTC
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542     072D                     _I2C_ReStart:	
  1543                           ;psect for function _I2C_ReStart
  1544                           
  1545     072D                     l661:	
  1546                           ;incstack = 0
  1547                           ; Regs used in _I2C_ReStart: [wreg]
  1548                           
  1549                           
  1550                           ;IIC.c: 20:     TRISAbits.TRISA0 = 0;
  1551     072D  1683               	bsf	3,5	;RP0=1, select bank1
  1552     072E  1303               	bcf	3,6	;RP1=0, select bank1
  1553     072F  1005               	bcf	5,0	;volatile
  1554     0730                     l663:
  1555                           
  1556                           ;IIC.c: 21:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1557     0730  3053               	movlw	83
  1558     0731  00F0               	movwf	??_I2C_ReStart
  1559     0732                     u247:
  1560     0732  0BF0               	decfsz	??_I2C_ReStart,f
  1561     0733  2F32               	goto	u247
  1562     0734                     l665:
  1563                           
  1564                           ;IIC.c: 22:     TRISAbits.TRISA1 = 1;
  1565     0734  1683               	bsf	3,5	;RP0=1, select bank1
  1566     0735  1303               	bcf	3,6	;RP1=0, select bank1
  1567     0736  1485               	bsf	5,1	;volatile
  1568                           
  1569                           ;IIC.c: 23:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1570     0737  3053               	movlw	83
  1571     0738  00F0               	movwf	??_I2C_ReStart
  1572     0739                     u257:
  1573     0739  0BF0               	decfsz	??_I2C_ReStart,f
  1574     073A  2F39               	goto	u257
  1575     073B                     l667:
  1576                           
  1577                           ;IIC.c: 24:     TRISAbits.TRISA0 = 1;
  1578     073B  1683               	bsf	3,5	;RP0=1, select bank1
  1579     073C  1303               	bcf	3,6	;RP1=0, select bank1
  1580     073D  1405               	bsf	5,0	;volatile
  1581                           
  1582                           ;IIC.c: 25:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1583     073E  3053               	movlw	83
  1584     073F  00F0               	movwf	??_I2C_ReStart
  1585     0740                     u267:
  1586     0740  0BF0               	decfsz	??_I2C_ReStart,f
  1587     0741  2F40               	goto	u267
  1588     0742                     l669:
  1589                           
  1590                           ;IIC.c: 26:     TRISAbits.TRISA1 = 0;
  1591     0742  1683               	bsf	3,5	;RP0=1, select bank1
  1592     0743  1303               	bcf	3,6	;RP1=0, select bank1
  1593     0744  1085               	bcf	5,1	;volatile
  1594                           
  1595                           ;IIC.c: 27:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1596     0745  3053               	movlw	83
  1597     0746  00F0               	movwf	??_I2C_ReStart
  1598     0747                     u277:
  1599     0747  0BF0               	decfsz	??_I2C_ReStart,f
  1600     0748  2F47               	goto	u277
  1601     0749                     l41:
  1602     0749  0008               	return
  1603     074A                     __end_of_I2C_ReStart:
  1604                           
  1605                           	psect	text15
  1606     0681                     __ptext15:	
  1607 ;; *************** function _endReadRTC *****************
  1608 ;; Defined at:
  1609 ;;		line 18 in file "RTC.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1623 ;;      Params:         0       0       0       0
  1624 ;;      Locals:         0       0       0       0
  1625 ;;      Temps:          0       0       0       0
  1626 ;;      Totals:         0       0       0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 1
  1630 ;; This function calls:
  1631 ;;		_I2C_SendNACK
  1632 ;;		_I2C_Stop
  1633 ;; This function is called by:
  1634 ;;		_readByteRTC
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638     0681                     _endReadRTC:	
  1639                           ;psect for function _endReadRTC
  1640                           
  1641     0681                     l751:	
  1642                           ;incstack = 0
  1643                           ; Regs used in _endReadRTC: [wreg+status,2+status,0+pclath+cstack]
  1644                           
  1645                           
  1646                           ;RTC.c: 19:     I2C_SendNACK();
  1647     0681  26CB               	fcall	_I2C_SendNACK
  1648                           
  1649                           ;RTC.c: 20:     I2C_Stop();
  1650     0682  2710               	fcall	_I2C_Stop
  1651     0683                     l85:
  1652     0683  0008               	return
  1653     0684                     __end_of_endReadRTC:
  1654                           
  1655                           	psect	text16
  1656     0710                     __ptext16:	
  1657 ;; *************** function _I2C_Stop *****************
  1658 ;; Defined at:
  1659 ;;		line 31 in file "IIC.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1673 ;;      Params:         0       0       0       0
  1674 ;;      Locals:         0       0       0       0
  1675 ;;      Temps:          1       0       0       0
  1676 ;;      Totals:         1       0       0       0
  1677 ;;Total ram usage:        1 bytes
  1678 ;; Hardware stack levels used: 1
  1679 ;; This function calls:
  1680 ;;		Nothing
  1681 ;; This function is called by:
  1682 ;;		_endReadRTC
  1683 ;;		_endWriteRTC
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687     0710                     _I2C_Stop:	
  1688                           ;psect for function _I2C_Stop
  1689                           
  1690     0710                     l671:	
  1691                           ;incstack = 0
  1692                           ; Regs used in _I2C_Stop: [wreg]
  1693                           
  1694                           
  1695                           ;IIC.c: 32:     TRISAbits.TRISA0 = 0;
  1696     0710  1683               	bsf	3,5	;RP0=1, select bank1
  1697     0711  1303               	bcf	3,6	;RP1=0, select bank1
  1698     0712  1005               	bcf	5,0	;volatile
  1699     0713                     l673:
  1700                           
  1701                           ;IIC.c: 33:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1702     0713  3053               	movlw	83
  1703     0714  00F0               	movwf	??_I2C_Stop
  1704     0715                     u287:
  1705     0715  0BF0               	decfsz	??_I2C_Stop,f
  1706     0716  2F15               	goto	u287
  1707     0717                     l675:
  1708                           
  1709                           ;IIC.c: 34:     TRISAbits.TRISA1 = 0;
  1710     0717  1683               	bsf	3,5	;RP0=1, select bank1
  1711     0718  1303               	bcf	3,6	;RP1=0, select bank1
  1712     0719  1085               	bcf	5,1	;volatile
  1713                           
  1714                           ;IIC.c: 35:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1715     071A  3053               	movlw	83
  1716     071B  00F0               	movwf	??_I2C_Stop
  1717     071C                     u297:
  1718     071C  0BF0               	decfsz	??_I2C_Stop,f
  1719     071D  2F1C               	goto	u297
  1720     071E                     l677:
  1721                           
  1722                           ;IIC.c: 36:     TRISAbits.TRISA0 = 1;
  1723     071E  1683               	bsf	3,5	;RP0=1, select bank1
  1724     071F  1303               	bcf	3,6	;RP1=0, select bank1
  1725     0720  1405               	bsf	5,0	;volatile
  1726                           
  1727                           ;IIC.c: 37:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1728     0721  3053               	movlw	83
  1729     0722  00F0               	movwf	??_I2C_Stop
  1730     0723                     u307:
  1731     0723  0BF0               	decfsz	??_I2C_Stop,f
  1732     0724  2F23               	goto	u307
  1733     0725                     l679:
  1734                           
  1735                           ;IIC.c: 38:     TRISAbits.TRISA1 = 1;
  1736     0725  1683               	bsf	3,5	;RP0=1, select bank1
  1737     0726  1303               	bcf	3,6	;RP1=0, select bank1
  1738     0727  1485               	bsf	5,1	;volatile
  1739                           
  1740                           ;IIC.c: 39:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1741     0728  3053               	movlw	83
  1742     0729  00F0               	movwf	??_I2C_Stop
  1743     072A                     u317:
  1744     072A  0BF0               	decfsz	??_I2C_Stop,f
  1745     072B  2F2A               	goto	u317
  1746     072C                     l44:
  1747     072C  0008               	return
  1748     072D                     __end_of_I2C_Stop:
  1749                           
  1750                           	psect	text17
  1751     06CB                     __ptext17:	
  1752 ;; *************** function _I2C_SendNACK *****************
  1753 ;; Defined at:
  1754 ;;		line 91 in file "IIC.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1768 ;;      Params:         0       0       0       0
  1769 ;;      Locals:         0       0       0       0
  1770 ;;      Temps:          1       0       0       0
  1771 ;;      Totals:         1       0       0       0
  1772 ;;Total ram usage:        1 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_endReadRTC
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781     06CB                     _I2C_SendNACK:	
  1782                           ;psect for function _I2C_SendNACK
  1783                           
  1784     06CB                     l705:	
  1785                           ;incstack = 0
  1786                           ; Regs used in _I2C_SendNACK: [wreg]
  1787                           
  1788                           
  1789                           ;IIC.c: 92:     TRISAbits.TRISA0 = 0;
  1790     06CB  1683               	bsf	3,5	;RP0=1, select bank1
  1791     06CC  1303               	bcf	3,6	;RP1=0, select bank1
  1792     06CD  1005               	bcf	5,0	;volatile
  1793     06CE                     l707:
  1794                           
  1795                           ;IIC.c: 93:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1796     06CE  3053               	movlw	83
  1797     06CF  00F0               	movwf	??_I2C_SendNACK
  1798     06D0                     u327:
  1799     06D0  0BF0               	decfsz	??_I2C_SendNACK,f
  1800     06D1  2ED0               	goto	u327
  1801     06D2                     l709:
  1802                           
  1803                           ;IIC.c: 94:     TRISAbits.TRISA1 = 1;
  1804     06D2  1683               	bsf	3,5	;RP0=1, select bank1
  1805     06D3  1303               	bcf	3,6	;RP1=0, select bank1
  1806     06D4  1485               	bsf	5,1	;volatile
  1807                           
  1808                           ;IIC.c: 95:     _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1809     06D5  3053               	movlw	83
  1810     06D6  00F0               	movwf	??_I2C_SendNACK
  1811     06D7                     u337:
  1812     06D7  0BF0               	decfsz	??_I2C_SendNACK,f
  1813     06D8  2ED7               	goto	u337
  1814     06D9                     l711:
  1815                           
  1816                           ;IIC.c: 96:     TRISAbits.TRISA0 = 1;
  1817     06D9  1683               	bsf	3,5	;RP0=1, select bank1
  1818     06DA  1303               	bcf	3,6	;RP1=0, select bank1
  1819     06DB  1405               	bsf	5,0	;volatile
  1820                           
  1821                           ;IIC.c: 97:     _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1822     06DC  30A6               	movlw	166
  1823     06DD  00F0               	movwf	??_I2C_SendNACK
  1824     06DE                     u347:
  1825     06DE  0BF0               	decfsz	??_I2C_SendNACK,f
  1826     06DF  2EDE               	goto	u347
  1827     06E0  0000               	nop
  1828     06E1                     l60:
  1829     06E1  0008               	return
  1830     06E2                     __end_of_I2C_SendNACK:
  1831                           
  1832                           	psect	text18
  1833     0789                     __ptext18:	
  1834 ;; *************** function _I2C_ReadByte *****************
  1835 ;; Defined at:
  1836 ;;		line 64 in file "IIC.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  Dat             1    2[COMMON] unsigned char 
  1841 ;;  i               1    1[COMMON] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      unsigned char 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0, btemp+1
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1851 ;;      Params:         0       0       0       0
  1852 ;;      Locals:         2       0       0       0
  1853 ;;      Temps:          1       0       0       0
  1854 ;;      Totals:         3       0       0       0
  1855 ;;Total ram usage:        3 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_readDataRTC
  1861 ;;		_readByteRTC
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865     0789                     _I2C_ReadByte:	
  1866                           ;psect for function _I2C_ReadByte
  1867                           
  1868     0789                     l713:	
  1869                           ;incstack = 0
  1870                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  1871                           
  1872                           
  1873                           ;IIC.c: 65:     unsigned char i, Dat = 0;
  1874     0789  01F2               	clrf	I2C_ReadByte@Dat
  1875                           
  1876                           ;IIC.c: 66:     for(i=0; i<8; i++) {
  1877     078A  01F1               	clrf	I2C_ReadByte@i
  1878     078B                     l52:
  1879                           
  1880                           ;IIC.c: 67:         TRISAbits.TRISA0 = 0;
  1881     078B  1683               	bsf	3,5	;RP0=1, select bank1
  1882     078C  1303               	bcf	3,6	;RP1=0, select bank1
  1883     078D  1005               	bcf	5,0	;volatile
  1884                           
  1885                           ;IIC.c: 68:         TRISAbits.TRISA1 = 1;
  1886     078E  1485               	bsf	5,1	;volatile
  1887     078F                     l719:
  1888                           
  1889                           ;IIC.c: 69:         _delay((unsigned long)((500/1)*(4000000/4000000.0)));
  1890     078F  30A6               	movlw	166
  1891     0790  00F0               	movwf	??_I2C_ReadByte
  1892     0791                     u357:
  1893     0791  0BF0               	decfsz	??_I2C_ReadByte,f
  1894     0792  2F91               	goto	u357
  1895     0793  0000               	nop
  1896     0794                     l721:
  1897                           
  1898                           ;IIC.c: 70:         TRISAbits.TRISA0 = 1;
  1899     0794  1683               	bsf	3,5	;RP0=1, select bank1
  1900     0795  1303               	bcf	3,6	;RP1=0, select bank1
  1901     0796  1405               	bsf	5,0	;volatile
  1902                           
  1903                           ;IIC.c: 71:         _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1904     0797  3053               	movlw	83
  1905     0798  00F0               	movwf	??_I2C_ReadByte
  1906     0799                     u367:
  1907     0799  0BF0               	decfsz	??_I2C_ReadByte,f
  1908     079A  2F99               	goto	u367
  1909     079B                     l723:
  1910                           
  1911                           ;IIC.c: 72:         Dat = Dat << 1;
  1912     079B  0872               	movf	I2C_ReadByte@Dat,w
  1913     079C  00F0               	movwf	??_I2C_ReadByte
  1914     079D  0770               	addwf	??_I2C_ReadByte,w
  1915     079E  00F2               	movwf	I2C_ReadByte@Dat
  1916     079F                     l725:
  1917                           
  1918                           ;IIC.c: 73:         Dat = Dat|PORTAbits.RA1;
  1919     079F  1283               	bcf	3,5	;RP0=0, select bank0
  1920     07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1921     07A1  0C05               	rrf	5,w	;volatile
  1922     07A2  3901               	andlw	1
  1923     07A3  0472               	iorwf	I2C_ReadByte@Dat,w
  1924     07A4  00F2               	movwf	I2C_ReadByte@Dat
  1925                           
  1926                           ;IIC.c: 75:         _delay((unsigned long)((500/1/2)*(4000000/4000000.0)));
  1927     07A5  3053               	movlw	83
  1928     07A6  00F0               	movwf	??_I2C_ReadByte
  1929     07A7                     u377:
  1930     07A7  0BF0               	decfsz	??_I2C_ReadByte,f
  1931     07A8  2FA7               	goto	u377
  1932     07A9                     l727:
  1933                           
  1934                           ;IIC.c: 76:     }
  1935     07A9  3001               	movlw	1
  1936     07AA  00FF               	movwf	btemp+1
  1937     07AB  087F               	movf	btemp+1,w
  1938     07AC  07F1               	addwf	I2C_ReadByte@i,f
  1939     07AD                     l729:
  1940     07AD  3008               	movlw	8
  1941     07AE  0271               	subwf	I2C_ReadByte@i,w
  1942     07AF  1C03               	skipc
  1943     07B0  2FB2               	goto	u51
  1944     07B1  2FB3               	goto	u50
  1945     07B2                     u51:
  1946     07B2  2F8B               	goto	l52
  1947     07B3                     u50:
  1948     07B3                     l731:
  1949                           
  1950                           ;IIC.c: 77:     return Dat;
  1951     07B3  0872               	movf	I2C_ReadByte@Dat,w
  1952     07B4                     l54:
  1953     07B4  0008               	return
  1954     07B5                     __end_of_I2C_ReadByte:
  1955                           
  1956                           	psect	text19
  1957     0688                     __ptext19:	
  1958 ;; *************** function _InitI2C *****************
  1959 ;; Defined at:
  1960 ;;		line 5 in file "IIC.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		None
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1974 ;;      Params:         0       0       0       0
  1975 ;;      Locals:         0       0       0       0
  1976 ;;      Temps:          0       0       0       0
  1977 ;;      Totals:         0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used: 1
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987     0688                     _InitI2C:	
  1988                           ;psect for function _InitI2C
  1989                           
  1990     0688                     l783:	
  1991                           ;incstack = 0
  1992                           ; Regs used in _InitI2C: []
  1993                           
  1994                           
  1995                           ;IIC.c: 7:     PORTAbits.RA1 = 0;
  1996     0688  1283               	bcf	3,5	;RP0=0, select bank0
  1997     0689  1303               	bcf	3,6	;RP1=0, select bank0
  1998     068A  1085               	bcf	5,1	;volatile
  1999                           
  2000                           ;IIC.c: 8:     PORTAbits.RA0 = 0;
  2001     068B  1005               	bcf	5,0	;volatile
  2002     068C                     l35:
  2003     068C  0008               	return
  2004     068D                     __end_of_InitI2C:
  2005     007E                     btemp	set	126	;btemp
  2006     007E                     wtemp0	set	126
  2007                           
  2008                           	psect	config
  2009                           
  2010                           ;Config register CONFIG @ 0x2007
  2011                           ;	Oscillator Selection bits
  2012                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2013                           ;	Watchdog Timer Enable bit
  2014                           ;	WDTE = OFF, WDT disabled
  2015                           ;	Power-up Timer Enable bit
  2016                           ;	PWRTE = OFF, PWRT disabled
  2017                           ;	RA5/MCLR/VPP Pin Function Select bit
  2018                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2019                           ;	Brown-out Detect Enable bit
  2020                           ;	BOREN = OFF, BOD disabled
  2021                           ;	Low-Voltage Programming Enable bit
  2022                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2023                           ;	Data EE Memory Code Protection bit
  2024                           ;	CPD = OFF, Data memory code protection off
  2025                           ;	Flash Program Memory Code Protection bit
  2026                           ;	CP = OFF, Code protection off
  2027     2007                     	org	8199
  2028     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkRTCType
    _startRTC->_reqWriteRTC
    _startRTC->_writeDataRTC
    _isRTCRunning->_reqReadRTC
    _readDataRTC->_I2C_ReadByte
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _endWriteRTC->_I2C_Stop
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte
    _endReadRTC->_I2C_SendNACK
    _endReadRTC->_I2C_Stop

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1024
                            _InitI2C
                       _checkRTCType
                       _isRTCRunning
                           _startRTC
 ---------------------------------------------------------------------------------
 (1) _startRTC                                             0     0      0     150
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (1) _isRTCRunning                                         1     1      0     180
                                              5 COMMON     1     1      0
                        _readDataRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0      90
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
                        _I2C_SendACK
 ---------------------------------------------------------------------------------
 (3) _I2C_SendACK                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkRTCType                                         1     1      0     694
                                              7 COMMON     1     1      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _writeByteRTC                                         2     1      1     422
                                              5 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _writeDataRTC                                         1     1      0      75
                                              4 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _reqWriteRTC                                          1     1      0      75
                                              4 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _readByteRTC                                          2     2      0     180
                                              5 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _reqReadRTC                                           1     1      0      75
                                              4 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteByte                                        4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _I2C_SendNACK                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadByte                                         3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C
   _checkRTCType
     _readByteRTC
       _I2C_ReadByte
       _endReadRTC
         _I2C_SendNACK
         _I2C_Stop
       _reqReadRTC
         _I2C_ReStart
         _I2C_Start
         _I2C_WriteByte
     _writeByteRTC
       _endWriteRTC
         _I2C_Stop
       _reqWriteRTC
         _I2C_Start
         _I2C_WriteByte
       _writeDataRTC
         _I2C_WriteByte
   _isRTCRunning
     _readDataRTC
       _I2C_ReadByte
       _I2C_SendACK
     _reqReadRTC
   _startRTC
     _endWriteRTC
     _reqWriteRTC
     _writeDataRTC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Oct 22 03:15:05 2023

                     l41 0749                       l26 0767                       l35 068C  
                     l52 078B                       l60 06E1                       l44 072C  
                     l54 07B4                       l38 06CA                       l47 07B7  
                     l48 07E9                       l49 07FD                       l57 06F8  
                     l82 0691                       l91 0698                       l85 0683  
                     l94 0687                       l79 06B8                       l88 06AE  
                     l97 0680                       u20 07D0                       u21 07CC  
                     u14 07C7                       u15 07C4                       u40 07E9  
                     u41 07E8                       u50 07B3                       u34 07D3  
                     u51 07B2                      l100 069F                      l111 0788  
                    l103 06A6                      l106 070F                      l701 07F2  
                    l711 06D9                      l721 0794                      l713 0789  
                    l705 06CB                      l731 07B3                      l723 079B  
                    l707 06CE                      l725 079F                      l709 06D2  
                    l661 072D                      l741 06F0                      l727 07A9  
                    l719 078F                      l671 0710                      l751 0681  
                    l663 0730                      l655 06B9                      l743 06B0  
                    l735 06E2                      l729 07AD                      l673 0713  
                    l665 0734                      l657 06BD                      l681 07B6  
                    l745 06B1                      l761 067F                      l753 0693  
                    l737 06E5                      l675 0717                      l667 073B  
                    l659 06C2                      l691 07D3                      l747 06B3  
                    l771 06A8                      l755 0694                      l851 069A  
                    l739 06E9                      l763 068D                      l677 071E  
                    l669 0742                      l693 07D7                      l749 06B6  
                    l773 06AC                      l757 0696                      l853 069E  
                    l861 0770                      l765 068F                      l783 0688  
                    l679 0725                      l695 07DA                      l687 07BA  
                    l775 06AD                      l759 0685                      l871 077E  
                    l863 0773                      l855 0768                      l767 0690  
                    l791 06F9                      l697 07DF                      l689 07BE  
                    l873 0782                      l865 0774                      l857 076B  
                    l785 06A0                      l793 0707                      l699 07ED  
                    l875 0785                      l867 0778                      l859 076F  
                    l787 06A4                      l795 0708                      l891 0758  
                    l883 074A                      l869 077B                      l797 070A  
                    l893 0759                      l885 0752                      l879 0787  
                    l799 070C                      l895 075A                      l887 0753  
                    l897 075F                      l889 0755                      l899 0761  
                    u100 076F                      u101 076E                      u110 0782  
                    u111 0781                      u120 075F                      u121 075E  
                    u130 0766                      u131 0765                      u207 07EF  
                    u217 07F7                      u307 0723                      u227 06BF  
                    u147 06E7                      u317 072A                      u237 06C7  
                    u157 06EE                      u327 06D0                      u247 0732  
                    u167 06F5                      u337 06D7                      u257 0739  
                    u177 07BC                      u347 06DE                      u267 0740  
                    u187 07D5                      u357 0791                      u277 0747  
                    u197 07DC                      u367 0799                      u287 0715  
                    u377 07A7                      u297 071C          readByteRTC@data 0076  
                   _main 074A                     btemp 007E         __end_of_I2C_Stop 072D  
                   start 0000             ?_readDataRTC 0070          __end_of_InitI2C 068D  
           ?_readByteRTC 0070                    ?_main 0070                    _CMCON 001F  
                  _TRISA 0085                    _TRISB 0086     __end_of_isRTCRunning 06A7  
           _I2C_ReadByte 0789             _I2C_SendNACK 06CB        __end_of_I2C_Start 06CB  
                  status 0003                    wtemp0 007E          __initialization 07FE  
           __end_of_main 0768                   ??_main 0078             ?_reqWriteRTC 0070  
           _writeDataRTC 0684             _writeByteRTC 0699         checkRTCType@data 0077  
              ??_InitI2C 0070        reqReadRTC@address 0074             _checkRTCType 0768  
              ?_I2C_Stop 0070         __end_of_startRTC 0710  __end_of__initialization 07FE  
         __pcstackCOMMON 0070            _I2C_WriteByte 07B5               ??_I2C_Stop 0070  
             _endReadRTC 0681             _isRTCRunning 06A0               __pmaintext 074A  
         ?_I2C_WriteByte 0070         writeDataRTC@data 0074            ??_I2C_ReStart 0070  
          ??_I2C_SendACK 0070       readByteRTC@address 0075                  _InitI2C 0688  
              _I2C_Start 06B9                ?_startRTC 0070                  __ptext1 06F9  
                __ptext2 06A0                  __ptext3 068D                  __ptext4 06E2  
                __ptext5 0768                  __ptext6 0699                  __ptext7 0684  
                __ptext8 0692                  __ptext9 067F               _reqReadRTC 06AF  
    __end_of_I2C_ReStart 074A      __end_of_I2C_SendACK 06F9     end_of_initialization 07FE  
             ?_I2C_Start 0070          ??_I2C_WriteByte 0070              ?_endReadRTC 0070  
             ??_startRTC 0075                _PORTAbits 0005            ??_endWriteRTC 0071  
              _TRISAbits 0085       reqWriteRTC@address 0074      writeByteRTC@address 0076  
            _I2C_ReStart 072D              _I2C_SendACK 06E2              ?_reqReadRTC 0070  
    start_initialization 07FE      __end_of_endWriteRTC 0681              ??_I2C_Start 0070  
          ??_readDataRTC 0073            ??_readByteRTC 0075           I2C_WriteByte@i 0073  
              ___latbits 0000            ?_I2C_ReadByte 0070            ?_I2C_SendNACK 0070  
               ?_InitI2C 0070            I2C_ReadByte@i 0071      __end_of_readDataRTC 0692  
       writeByteRTC@data 0075          readDataRTC@data 0073            ??_reqWriteRTC 0074  
          ?_writeDataRTC 0070      __end_of_readByteRTC 06AF              _endWriteRTC 067F  
               _I2C_Stop 0710           ??_I2C_ReadByte 0070          I2C_ReadByte@Dat 0072  
         ??_I2C_SendNACK 0070            ?_writeByteRTC 0075             ??_endReadRTC 0071  
          ?_checkRTCType 0070           ??_writeDataRTC 0074         isRTCRunning@data 0075  
         ??_writeByteRTC 0076       __end_of_endReadRTC 0684      __end_of_reqWriteRTC 0699  
  __end_of_I2C_WriteByte 07FE              _readDataRTC 068D              _readByteRTC 06A7  
         ??_checkRTCType 0077             ?_I2C_ReStart 0070             ?_I2C_SendACK 0070  
           ??_reqReadRTC 0074                 __ptext10 06A7                 __ptext11 06AF  
               __ptext12 07B5                 __ptext13 06B9                 __ptext14 072D  
               __ptext15 0681                 __ptext16 0710                 __ptext17 06CB  
               __ptext18 0789                 __ptext19 0688            ?_isRTCRunning 0070  
   __end_of_I2C_ReadByte 07B5       __end_of_reqReadRTC 06B9     __end_of_I2C_SendNACK 06E2  
               _startRTC 06F9              _reqWriteRTC 0692           ??_isRTCRunning 0075  
   __end_of_writeDataRTC 0688     __end_of_writeByteRTC 06A0               _OPTION_REG 0081  
           ?_endWriteRTC 0070     __end_of_checkRTCType 0789               _STATUSbits 0003  
      I2C_WriteByte@Data 0072  
