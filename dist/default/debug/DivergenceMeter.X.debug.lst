

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Oct 26 07:49:13 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	text17,local,class=CODE,merge=1,delta=2
    26                           	psect	text18,local,class=CODE,merge=1,delta=2
    27                           	psect	text19,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x29,1,_T7
    30                           	dabs	1,0x28,1,_T6
    31                           	dabs	1,0x27,1,_T5
    32                           	dabs	1,0x26,1,_T4
    33                           	dabs	1,0x25,1,_T3
    34                           	dabs	1,0x24,1,_T2
    35                           	dabs	1,0x23,1,_T1
    36                           	dabs	1,0x21,1,_rightDP
    37                           	dabs	1,0x20,1,_leftDP
    38                           	dabs	1,0x22,1,_T0
    39                           	dabs	1,0x7E,2
    40     0000                     
    41                           ; Generated 12/10/2023 GMT
    42                           ; 
    43                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F628A Definitions
    73                           ; 
    74                           ; SFR Addresses
    75     0000                     	;# 
    76     0001                     	;# 
    77     0002                     	;# 
    78     0003                     	;# 
    79     0004                     	;# 
    80     0005                     	;# 
    81     0006                     	;# 
    82     000A                     	;# 
    83     000B                     	;# 
    84     000C                     	;# 
    85     000E                     	;# 
    86     000E                     	;# 
    87     000F                     	;# 
    88     0010                     	;# 
    89     0011                     	;# 
    90     0012                     	;# 
    91     0015                     	;# 
    92     0015                     	;# 
    93     0016                     	;# 
    94     0017                     	;# 
    95     0018                     	;# 
    96     0019                     	;# 
    97     001A                     	;# 
    98     001F                     	;# 
    99     0081                     	;# 
   100     0085                     	;# 
   101     0086                     	;# 
   102     008C                     	;# 
   103     008E                     	;# 
   104     0092                     	;# 
   105     0098                     	;# 
   106     0099                     	;# 
   107     009A                     	;# 
   108     009B                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009F                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     000A                     	;# 
   120     000B                     	;# 
   121     000C                     	;# 
   122     000E                     	;# 
   123     000E                     	;# 
   124     000F                     	;# 
   125     0010                     	;# 
   126     0011                     	;# 
   127     0012                     	;# 
   128     0015                     	;# 
   129     0015                     	;# 
   130     0016                     	;# 
   131     0017                     	;# 
   132     0018                     	;# 
   133     0019                     	;# 
   134     001A                     	;# 
   135     001F                     	;# 
   136     0081                     	;# 
   137     0085                     	;# 
   138     0086                     	;# 
   139     008C                     	;# 
   140     008E                     	;# 
   141     0092                     	;# 
   142     0098                     	;# 
   143     0099                     	;# 
   144     009A                     	;# 
   145     009B                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009F                     	;# 
   149     0000                     	;# 
   150     0001                     	;# 
   151     0002                     	;# 
   152     0003                     	;# 
   153     0004                     	;# 
   154     0005                     	;# 
   155     0006                     	;# 
   156     000A                     	;# 
   157     000B                     	;# 
   158     000C                     	;# 
   159     000E                     	;# 
   160     000E                     	;# 
   161     000F                     	;# 
   162     0010                     	;# 
   163     0011                     	;# 
   164     0012                     	;# 
   165     0015                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001F                     	;# 
   173     0081                     	;# 
   174     0085                     	;# 
   175     0086                     	;# 
   176     008C                     	;# 
   177     008E                     	;# 
   178     0092                     	;# 
   179     0098                     	;# 
   180     0099                     	;# 
   181     009A                     	;# 
   182     009B                     	;# 
   183     009C                     	;# 
   184     009D                     	;# 
   185     009F                     	;# 
   186     0000                     	;# 
   187     0001                     	;# 
   188     0002                     	;# 
   189     0003                     	;# 
   190     0004                     	;# 
   191     0005                     	;# 
   192     0006                     	;# 
   193     000A                     	;# 
   194     000B                     	;# 
   195     000C                     	;# 
   196     000E                     	;# 
   197     000E                     	;# 
   198     000F                     	;# 
   199     0010                     	;# 
   200     0011                     	;# 
   201     0012                     	;# 
   202     0015                     	;# 
   203     0015                     	;# 
   204     0016                     	;# 
   205     0017                     	;# 
   206     0018                     	;# 
   207     0019                     	;# 
   208     001A                     	;# 
   209     001F                     	;# 
   210     0081                     	;# 
   211     0085                     	;# 
   212     0086                     	;# 
   213     008C                     	;# 
   214     008E                     	;# 
   215     0092                     	;# 
   216     0098                     	;# 
   217     0099                     	;# 
   218     009A                     	;# 
   219     009B                     	;# 
   220     009C                     	;# 
   221     009D                     	;# 
   222     009F                     	;# 
   223     0000                     	;# 
   224     0001                     	;# 
   225     0002                     	;# 
   226     0003                     	;# 
   227     0004                     	;# 
   228     0005                     	;# 
   229     0006                     	;# 
   230     000A                     	;# 
   231     000B                     	;# 
   232     000C                     	;# 
   233     000E                     	;# 
   234     000E                     	;# 
   235     000F                     	;# 
   236     0010                     	;# 
   237     0011                     	;# 
   238     0012                     	;# 
   239     0015                     	;# 
   240     0015                     	;# 
   241     0016                     	;# 
   242     0017                     	;# 
   243     0018                     	;# 
   244     0019                     	;# 
   245     001A                     	;# 
   246     001F                     	;# 
   247     0081                     	;# 
   248     0085                     	;# 
   249     0086                     	;# 
   250     008C                     	;# 
   251     008E                     	;# 
   252     0092                     	;# 
   253     0098                     	;# 
   254     0099                     	;# 
   255     009A                     	;# 
   256     009B                     	;# 
   257     009C                     	;# 
   258     009D                     	;# 
   259     009F                     	;# 
   260                           
   261                           	psect	text0
   262     0000                     __ptext0:
   263     0006                     _PORTB	set	6
   264     0005                     _PORTAbits	set	5
   265     001F                     _CMCON	set	31
   266     0085                     _TRISAbits	set	133
   267     0081                     _OPTION_REG	set	129
   268     0086                     _TRISB	set	134
   269     0085                     _TRISA	set	133
   270                           
   271                           	psect	cinit
   272     07FC                     start_initialization:	
   273                           ; #config settings
   274                           
   275     07FC                     __initialization:
   276                           
   277                           ; Clear objects allocated to COMMON
   278     07FC  01F8               	clrf	__pbssCOMMON& (0+127)
   279     07FD  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   280     07FE                     end_of_initialization:	
   281                           ;End of C runtime variable initialization code
   282                           
   283     07FE                     __end_of__initialization:
   284     07FE  0183               	clrf	3
   285     07FF  2F60               	ljmp	_main	;jump to C main() function
   286                           
   287                           	psect	bssCOMMON
   288     0078                     __pbssCOMMON:
   289     0078                     _PORTB_SHADOW:
   290     0078                     	ds	1
   291     0079                     _PORTA_SHADOW:
   292     0079                     	ds	1
   293                           
   294                           	psect	cstackCOMMON
   295     0070                     __pcstackCOMMON:
   296     0070                     ?_isRTCRunning:
   297     0070                     ?_checkRTCType:	
   298                           ; 1 bit 
   299                           
   300     0070                     ?_I2C_WriteByte:	
   301                           ; 1 bit 
   302                           
   303     0070                     ?_InitI2C:	
   304                           ; 1 bit 
   305                           
   306     0070                     ??_InitI2C:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?_startRTC:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ?_main:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ?_I2C_Start:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ??_I2C_Start:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     ?_I2C_ReStart:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ??_I2C_ReStart:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0070                     ?_I2C_Stop:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ??_I2C_Stop:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     ??_I2C_WriteByte:	
   334                           ; 1 bytes @ 0x0
   335                           
   336     0070                     ?_I2C_ReadByte:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ??_I2C_ReadByte:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_I2C_SendACK:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ??_I2C_SendACK:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_I2C_SendNACK:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ??_I2C_SendNACK:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ?_reqReadRTC:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?_readDataRTC:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ?_endReadRTC:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ??_endReadRTC:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ?_readByteRTC:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?_reqWriteRTC:	
   370                           ; 1 bytes @ 0x0
   371                           
   372     0070                     ?_writeDataRTC:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ?_endWriteRTC:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ??_endWriteRTC:	
   379                           ; 1 bytes @ 0x0
   380                           
   381                           
   382                           ; 1 bytes @ 0x0
   383     0070                     	ds	1
   384     0071                     I2C_ReadByte@i:
   385                           
   386                           ; 1 bytes @ 0x1
   387     0071                     	ds	1
   388     0072                     I2C_WriteByte@Data:
   389     0072                     I2C_ReadByte@Data:	
   390                           ; 1 bytes @ 0x2
   391                           
   392                           
   393                           ; 1 bytes @ 0x2
   394     0072                     	ds	1
   395     0073                     ??_readDataRTC:
   396     0073                     I2C_WriteByte@i:	
   397                           ; 1 bytes @ 0x3
   398                           
   399     0073                     readDataRTC@data:	
   400                           ; 1 bytes @ 0x3
   401                           
   402                           
   403                           ; 1 bytes @ 0x3
   404     0073                     	ds	1
   405     0074                     ??_reqReadRTC:
   406     0074                     ??_reqWriteRTC:	
   407                           ; 1 bytes @ 0x4
   408                           
   409     0074                     ??_writeDataRTC:	
   410                           ; 1 bytes @ 0x4
   411                           
   412     0074                     reqReadRTC@address:	
   413                           ; 1 bytes @ 0x4
   414                           
   415     0074                     reqWriteRTC@address:	
   416                           ; 1 bytes @ 0x4
   417                           
   418     0074                     writeDataRTC@data:	
   419                           ; 1 bytes @ 0x4
   420                           
   421                           
   422                           ; 1 bytes @ 0x4
   423     0074                     	ds	1
   424     0075                     ??_isRTCRunning:
   425     0075                     ??_startRTC:	
   426                           ; 1 bytes @ 0x5
   427                           
   428     0075                     ??_readByteRTC:	
   429                           ; 1 bytes @ 0x5
   430                           
   431     0075                     ?_writeByteRTC:	
   432                           ; 1 bytes @ 0x5
   433                           
   434     0075                     readByteRTC@address:	
   435                           ; 1 bytes @ 0x5
   436                           
   437     0075                     writeByteRTC@data:	
   438                           ; 1 bytes @ 0x5
   439                           
   440     0075                     isRTCRunning@data:	
   441                           ; 1 bytes @ 0x5
   442                           
   443                           
   444                           ; 1 bytes @ 0x5
   445     0075                     	ds	1
   446     0076                     ??_writeByteRTC:
   447     0076                     readByteRTC@data:	
   448                           ; 1 bytes @ 0x6
   449                           
   450     0076                     writeByteRTC@address:	
   451                           ; 1 bytes @ 0x6
   452                           
   453                           
   454                           ; 1 bytes @ 0x6
   455     0076                     	ds	1
   456     0077                     ??_checkRTCType:
   457     0077                     checkRTCType@data:	
   458                           ; 1 bytes @ 0x7
   459                           
   460                           
   461                           ; 1 bytes @ 0x7
   462     0077                     	ds	1
   463     0078                     ??_main:
   464                           
   465                           	psect	maintext
   466     0760                     __pmaintext:	
   467                           ; 1 bytes @ 0x8
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 24 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : B00/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   487 ;;      Params:         0       0       0       0
   488 ;;      Locals:         0       0       0       0
   489 ;;      Temps:          0       0       0       0
   490 ;;      Totals:         0       0       0       0
   491 ;;Total ram usage:        0 bytes
   492 ;; Hardware stack levels required when called: 4
   493 ;; This function calls:
   494 ;;		_InitI2C
   495 ;;		_checkRTCType
   496 ;;		_isRTCRunning
   497 ;;		_startRTC
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503     0760                     _main:	
   504                           ;psect for function _main
   505                           
   506     0760                     l935:	
   507                           ;incstack = 0
   508                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   509                           
   510                           
   511                           ;main.c: 26:     CMCON = 0b111;
   512     0760  3007               	movlw	7
   513     0761  1283               	bcf	3,5	;RP0=0, select bank0
   514     0762  1303               	bcf	3,6	;RP1=0, select bank0
   515     0763  009F               	movwf	31	;volatile
   516                           
   517                           ;main.c: 27:     TRISA = 0b00101111;
   518     0764  302F               	movlw	47
   519     0765  1683               	bsf	3,5	;RP0=1, select bank1
   520     0766  1303               	bcf	3,6	;RP1=0, select bank1
   521     0767  0085               	movwf	5	;volatile
   522     0768                     l937:
   523                           
   524                           ;main.c: 28:     TRISB = 0b00000000;
   525     0768  0186               	clrf	6	;volatile
   526     0769                     l939:
   527                           
   528                           ;main.c: 29:     OPTION_REG = 0b11011111;
   529     0769  30DF               	movlw	223
   530     076A  0081               	movwf	1	;volatile
   531     076B                     l941:
   532                           
   533                           ;main.c: 30:     InitI2C();
   534     076B  26CA               	fcall	_InitI2C
   535     076C                     l943:
   536                           
   537                           ;main.c: 32:     if(isRTCRunning()) {
   538     076C  26E2               	fcall	_isRTCRunning
   539     076D  1C03               	btfss	3,0
   540     076E  2F70               	goto	u131
   541     076F  2F71               	goto	u130
   542     0770                     u131:
   543     0770  2F73               	goto	l947
   544     0771                     u130:
   545     0771                     l945:
   546                           
   547                           ;main.c: 33:         startRTC();
   548     0771  2749               	fcall	_startRTC
   549                           
   550                           ;main.c: 34:     } else {
   551     0772  2F79               	goto	l26
   552     0773                     l947:
   553                           
   554                           ;main.c: 35:         if(checkRTCType()) {
   555     0773  277A               	fcall	_checkRTCType
   556     0774  1C03               	btfss	3,0
   557     0775  2F77               	goto	u141
   558     0776  2F78               	goto	u140
   559     0777                     u141:
   560     0777  2F79               	goto	l26
   561     0778                     u140:
   562     0778  2F71               	goto	l945
   563     0779                     l26:
   564     0779  2800               	ljmp	start
   565     077A                     __end_of_main:
   566                           
   567                           	psect	text1
   568     0749                     __ptext1:	
   569 ;; *************** function _startRTC *****************
   570 ;; Defined at:
   571 ;;		line 69 in file "RTC.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;		None
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   585 ;;      Params:         0       0       0       0
   586 ;;      Locals:         0       0       0       0
   587 ;;      Temps:          0       0       0       0
   588 ;;      Totals:         0       0       0       0
   589 ;;Total ram usage:        0 bytes
   590 ;; Hardware stack levels used: 1
   591 ;; Hardware stack levels required when called: 2
   592 ;; This function calls:
   593 ;;		_endWriteRTC
   594 ;;		_reqWriteRTC
   595 ;;		_writeDataRTC
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601     0749                     _startRTC:	
   602                           ;psect for function _startRTC
   603                           
   604     0749                     l801:	
   605                           ;incstack = 0
   606                           ; Regs used in _startRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   607                           
   608                           
   609                           ;RTC.c: 70:     reqWriteRTC(0x00);
   610     0749  3000               	movlw	0
   611     074A  26D4               	fcall	_reqWriteRTC
   612                           
   613                           ;RTC.c: 71:     writeDataRTC(0x00);
   614     074B  3000               	movlw	0
   615     074C  26C6               	fcall	_writeDataRTC
   616                           
   617                           ;RTC.c: 73:     writeDataRTC(0x30);
   618     074D  3030               	movlw	48
   619     074E  26C6               	fcall	_writeDataRTC
   620                           
   621                           ;RTC.c: 74:     writeDataRTC(0x12);
   622     074F  3012               	movlw	18
   623     0750  26C6               	fcall	_writeDataRTC
   624                           
   625                           ;RTC.c: 75:     writeDataRTC(0x28);
   626     0751  3028               	movlw	40
   627     0752  26C6               	fcall	_writeDataRTC
   628                           
   629                           ;RTC.c: 76:     writeDataRTC(0x7);
   630     0753  3007               	movlw	7
   631     0754  26C6               	fcall	_writeDataRTC
   632                           
   633                           ;RTC.c: 77:     writeDataRTC(0x10);
   634     0755  3010               	movlw	16
   635     0756  26C6               	fcall	_writeDataRTC
   636     0757                     l803:
   637                           
   638                           ;RTC.c: 78:     endWriteRTC();
   639     0757  26C1               	fcall	_endWriteRTC
   640     0758                     l805:
   641                           
   642                           ;RTC.c: 80:     reqWriteRTC(0x14);
   643     0758  3014               	movlw	20
   644     0759  26D4               	fcall	_reqWriteRTC
   645     075A                     l807:
   646                           
   647                           ;RTC.c: 81:     writeDataRTC(0x00);
   648     075A  3000               	movlw	0
   649     075B  26C6               	fcall	_writeDataRTC
   650     075C                     l809:
   651                           
   652                           ;RTC.c: 82:     writeDataRTC(0x00);
   653     075C  3000               	movlw	0
   654     075D  26C6               	fcall	_writeDataRTC
   655                           
   656                           ;RTC.c: 83:     endWriteRTC();
   657     075E  26C1               	fcall	_endWriteRTC
   658     075F                     l106:
   659     075F  0008               	return
   660     0760                     __end_of_startRTC:
   661                           
   662                           	psect	text2
   663     06E2                     __ptext2:	
   664 ;; *************** function _isRTCRunning *****************
   665 ;; Defined at:
   666 ;;		line 61 in file "RTC.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  data            1    5[COMMON] unsigned char 
   671 ;; Return value:  Size  Location     Type
   672 ;;		None               void
   673 ;; Registers used:
   674 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   680 ;;      Params:         0       0       0       0
   681 ;;      Locals:         1       0       0       0
   682 ;;      Temps:          0       0       0       0
   683 ;;      Totals:         1       0       0       0
   684 ;;Total ram usage:        1 bytes
   685 ;; Hardware stack levels used: 1
   686 ;; Hardware stack levels required when called: 2
   687 ;; This function calls:
   688 ;;		_readDataRTC
   689 ;;		_reqReadRTC
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695     06E2                     _isRTCRunning:	
   696                           ;psect for function _isRTCRunning
   697                           
   698     06E2                     l795:	
   699                           ;incstack = 0
   700                           ; Regs used in _isRTCRunning: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   701                           
   702                           
   703                           ;RTC.c: 62:     unsigned char data;;RTC.c: 63:     reqReadRTC(0x00);
   704     06E2  3000               	movlw	0
   705     06E3  26F1               	fcall	_reqReadRTC
   706                           
   707                           ;RTC.c: 64:     data = readDataRTC();
   708     06E4  26CF               	fcall	_readDataRTC
   709     06E5  00F5               	movwf	isRTCRunning@data
   710     06E6                     l797:
   711                           
   712                           ;RTC.c: 65:     return (data |= (1<<7));
   713     06E6  17F5               	bsf	isRTCRunning@data,7
   714     06E7  0C75               	rrf	isRTCRunning@data,w
   715     06E8                     l103:
   716     06E8  0008               	return
   717     06E9                     __end_of_isRTCRunning:
   718                           
   719                           	psect	text3
   720     06CF                     __ptext3:	
   721 ;; *************** function _readDataRTC *****************
   722 ;; Defined at:
   723 ;;		line 14 in file "RTC.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  data            1    3[COMMON] unsigned char 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      unsigned char 
   730 ;; Registers used:
   731 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   737 ;;      Params:         0       0       0       0
   738 ;;      Locals:         1       0       0       0
   739 ;;      Temps:          0       0       0       0
   740 ;;      Totals:         1       0       0       0
   741 ;;Total ram usage:        1 bytes
   742 ;; Hardware stack levels used: 1
   743 ;; Hardware stack levels required when called: 1
   744 ;; This function calls:
   745 ;;		_I2C_ReadByte
   746 ;;		_I2C_SendACK
   747 ;; This function is called by:
   748 ;;		_isRTCRunning
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752     06CF                     _readDataRTC:	
   753                           ;psect for function _readDataRTC
   754                           
   755     06CF                     l773:	
   756                           ;incstack = 0
   757                           ; Regs used in _readDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   758                           
   759                           
   760                           ;RTC.c: 15:     unsigned char data;;RTC.c: 16:     data = I2C_ReadByte();
   761     06CF  279B               	fcall	_I2C_ReadByte
   762     06D0  00F3               	movwf	readDataRTC@data
   763     06D1                     l775:
   764                           
   765                           ;RTC.c: 17:     I2C_SendACK();
   766     06D1  2718               	fcall	_I2C_SendACK
   767     06D2                     l777:
   768                           
   769                           ;RTC.c: 18:     return data;
   770     06D2  0873               	movf	readDataRTC@data,w
   771     06D3                     l82:
   772     06D3  0008               	return
   773     06D4                     __end_of_readDataRTC:
   774                           
   775                           	psect	text4
   776     0718                     __ptext4:	
   777 ;; *************** function _I2C_SendACK *****************
   778 ;; Defined at:
   779 ;;		line 83 in file "IIC.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		None
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   793 ;;      Params:         0       0       0       0
   794 ;;      Locals:         0       0       0       0
   795 ;;      Temps:          0       0       0       0
   796 ;;      Totals:         0       0       0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels used: 1
   799 ;; This function calls:
   800 ;;		Nothing
   801 ;; This function is called by:
   802 ;;		_readDataRTC
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806     0718                     _I2C_SendACK:	
   807                           ;psect for function _I2C_SendACK
   808                           
   809     0718                     l751:	
   810                           ;incstack = 0
   811                           ; Regs used in _I2C_SendACK: []
   812                           
   813                           
   814                           ;IIC.c: 84:     TRISAbits.TRISA0 = 0;
   815     0718  1683               	bsf	3,5	;RP0=1, select bank1
   816     0719  1303               	bcf	3,6	;RP1=0, select bank1
   817     071A  1005               	bcf	5,0	;volatile
   818                           
   819                           ;IIC.c: 85:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
   820     071B  2F1C               	nop2	;2 cycle nop
   821                           
   822                           ;IIC.c: 86:     TRISAbits.TRISA1 = 0;
   823     071C  1683               	bsf	3,5	;RP0=1, select bank1
   824     071D  1303               	bcf	3,6	;RP1=0, select bank1
   825     071E  1085               	bcf	5,1	;volatile
   826                           
   827                           ;IIC.c: 87:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
   828     071F  2F20               	nop2	;2 cycle nop
   829                           
   830                           ;IIC.c: 88:     TRISAbits.TRISA0 = 1;
   831     0720  1683               	bsf	3,5	;RP0=1, select bank1
   832     0721  1303               	bcf	3,6	;RP1=0, select bank1
   833     0722  1405               	bsf	5,0	;volatile
   834                           
   835                           ;IIC.c: 89:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
   836     0723  2F24               	nop2	;2 cycle nop
   837     0724  2F25               	nop2	;2 cycle nop
   838     0725  0000               	nop
   839     0726                     l57:
   840     0726  0008               	return
   841     0727                     __end_of_I2C_SendACK:
   842                           
   843                           	psect	text5
   844     077A                     __ptext5:	
   845 ;; *************** function _checkRTCType *****************
   846 ;; Defined at:
   847 ;;		line 87 in file "RTC.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  data            1    7[COMMON] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;		None               void
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   861 ;;      Params:         0       0       0       0
   862 ;;      Locals:         1       0       0       0
   863 ;;      Temps:          0       0       0       0
   864 ;;      Totals:         1       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels used: 1
   867 ;; Hardware stack levels required when called: 3
   868 ;; This function calls:
   869 ;;		_readByteRTC
   870 ;;		_writeByteRTC
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876     077A                     _checkRTCType:	
   877                           ;psect for function _checkRTCType
   878                           
   879     077A                     l907:	
   880                           ;incstack = 0
   881                           ; Regs used in _checkRTCType: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   882                           
   883                           
   884                           ;RTC.c: 88:     unsigned char data;;RTC.c: 89:     data = readByteRTC(0x0F);
   885     077A  300F               	movlw	15
   886     077B  26E9               	fcall	_readByteRTC
   887     077C  00F7               	movwf	checkRTCType@data
   888     077D                     l909:
   889                           
   890                           ;RTC.c: 90:     if(((data) & 1<<(7))) {
   891     077D  1FF7               	btfss	checkRTCType@data,7
   892     077E  2F80               	goto	u111
   893     077F  2F81               	goto	u110
   894     0780                     u111:
   895     0780  2F99               	goto	l931
   896     0781                     u110:
   897     0781                     l911:
   898                           
   899                           ;RTC.c: 93:         (data &=(0<<0));
   900     0781  01F7               	clrf	checkRTCType@data
   901     0782                     l913:
   902                           
   903                           ;RTC.c: 94:         writeByteRTC(0x0F,data);
   904     0782  01F5               	clrf	writeByteRTC@data
   905     0783  300F               	movlw	15
   906     0784  26DB               	fcall	_writeByteRTC
   907     0785                     l915:
   908                           
   909                           ;RTC.c: 95:         (data |= (1<<0));
   910     0785  1477               	bsf	checkRTCType@data,0
   911     0786                     l917:
   912                           
   913                           ;RTC.c: 96:         writeByteRTC(0x0F,data);
   914     0786  0877               	movf	checkRTCType@data,w
   915     0787  00F5               	movwf	writeByteRTC@data
   916     0788  300F               	movlw	15
   917     0789  26DB               	fcall	_writeByteRTC
   918     078A                     l919:
   919                           
   920                           ;RTC.c: 97:         _delay((unsigned long)((5)*(4000000/4000000.0)));
   921     078A  2F8B               	nop2	;2 cycle nop
   922     078B  2F8C               	nop2	;2 cycle nop
   923     078C  0000               	nop
   924     078D                     l921:
   925                           
   926                           ;RTC.c: 98:         data = readByteRTC(0x0F);
   927     078D  300F               	movlw	15
   928     078E  26E9               	fcall	_readByteRTC
   929     078F  00F7               	movwf	checkRTCType@data
   930     0790                     l923:
   931                           
   932                           ;RTC.c: 99:         if(!((data) & 1<<(0))) {
   933     0790  1877               	btfsc	checkRTCType@data,0
   934     0791  2F93               	goto	u121
   935     0792  2F94               	goto	u120
   936     0793                     u121:
   937     0793  2F99               	goto	l931
   938     0794                     u120:
   939     0794                     l925:
   940                           
   941                           ;RTC.c: 100:             writeByteRTC(0x0F, 0x00);
   942     0794  01F5               	clrf	writeByteRTC@data
   943     0795  300F               	movlw	15
   944     0796  26DB               	fcall	_writeByteRTC
   945     0797                     l927:
   946                           
   947                           ;RTC.c: 101:             return 1;
   948     0797  1403               	setc
   949     0798  2F9A               	goto	l111
   950     0799                     l931:
   951                           
   952                           ;RTC.c: 104:     return 0;
   953     0799  1003               	clrc
   954     079A                     l111:
   955     079A  0008               	return
   956     079B                     __end_of_checkRTCType:
   957                           
   958                           	psect	text6
   959     06DB                     __ptext6:	
   960 ;; *************** function _writeByteRTC *****************
   961 ;; Defined at:
   962 ;;		line 54 in file "RTC.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  address         1    wreg     unsigned char 
   965 ;;  data            1    5[COMMON] unsigned char 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  address         1    6[COMMON] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   977 ;;      Params:         1       0       0       0
   978 ;;      Locals:         1       0       0       0
   979 ;;      Temps:          0       0       0       0
   980 ;;      Totals:         2       0       0       0
   981 ;;Total ram usage:        2 bytes
   982 ;; Hardware stack levels used: 1
   983 ;; Hardware stack levels required when called: 2
   984 ;; This function calls:
   985 ;;		_endWriteRTC
   986 ;;		_reqWriteRTC
   987 ;;		_writeDataRTC
   988 ;; This function is called by:
   989 ;;		_checkRTCType
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993     06DB                     _writeByteRTC:	
   994                           ;psect for function _writeByteRTC
   995                           
   996                           
   997                           ;incstack = 0
   998                           ; Regs used in _writeByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   999                           ;writeByteRTC@address stored from wreg
  1000     06DB  00F6               	movwf	writeByteRTC@address
  1001     06DC                     l903:
  1002                           
  1003                           ;RTC.c: 55:     reqWriteRTC(address);
  1004     06DC  0876               	movf	writeByteRTC@address,w
  1005     06DD  26D4               	fcall	_reqWriteRTC
  1006                           
  1007                           ;RTC.c: 56:     writeDataRTC(data);
  1008     06DE  0875               	movf	writeByteRTC@data,w
  1009     06DF  26C6               	fcall	_writeDataRTC
  1010     06E0                     l905:
  1011                           
  1012                           ;RTC.c: 57:     endWriteRTC();
  1013     06E0  26C1               	fcall	_endWriteRTC
  1014     06E1                     l100:
  1015     06E1  0008               	return
  1016     06E2                     __end_of_writeByteRTC:
  1017                           
  1018                           	psect	text7
  1019     06C6                     __ptext7:	
  1020 ;; *************** function _writeDataRTC *****************
  1021 ;; Defined at:
  1022 ;;		line 44 in file "RTC.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  data            1    wreg     unsigned char 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  data            1    4[COMMON] unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1036 ;;      Params:         0       0       0       0
  1037 ;;      Locals:         1       0       0       0
  1038 ;;      Temps:          0       0       0       0
  1039 ;;      Totals:         1       0       0       0
  1040 ;;Total ram usage:        1 bytes
  1041 ;; Hardware stack levels used: 1
  1042 ;; Hardware stack levels required when called: 1
  1043 ;; This function calls:
  1044 ;;		_I2C_WriteByte
  1045 ;; This function is called by:
  1046 ;;		_writeByteRTC
  1047 ;;		_startRTC
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051     06C6                     _writeDataRTC:	
  1052                           ;psect for function _writeDataRTC
  1053                           
  1054                           
  1055                           ;incstack = 0
  1056                           ; Regs used in _writeDataRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1057                           ;writeDataRTC@data stored from wreg
  1058     06C6  00F4               	movwf	writeDataRTC@data
  1059     06C7                     l769:
  1060                           
  1061                           ;RTC.c: 45:     I2C_WriteByte(data);
  1062     06C7  0874               	movf	writeDataRTC@data,w
  1063     06C8  27BF               	fcall	_I2C_WriteByte
  1064     06C9                     l94:
  1065     06C9  0008               	return
  1066     06CA                     __end_of_writeDataRTC:
  1067                           
  1068                           	psect	text8
  1069     06D4                     __ptext8:	
  1070 ;; *************** function _reqWriteRTC *****************
  1071 ;; Defined at:
  1072 ;;		line 37 in file "RTC.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  address         1    wreg     unsigned char 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  address         1    4[COMMON] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1086 ;;      Params:         0       0       0       0
  1087 ;;      Locals:         1       0       0       0
  1088 ;;      Temps:          0       0       0       0
  1089 ;;      Totals:         1       0       0       0
  1090 ;;Total ram usage:        1 bytes
  1091 ;; Hardware stack levels used: 1
  1092 ;; Hardware stack levels required when called: 1
  1093 ;; This function calls:
  1094 ;;		_I2C_Start
  1095 ;;		_I2C_WriteByte
  1096 ;; This function is called by:
  1097 ;;		_writeByteRTC
  1098 ;;		_startRTC
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102     06D4                     _reqWriteRTC:	
  1103                           ;psect for function _reqWriteRTC
  1104                           
  1105                           
  1106                           ;incstack = 0
  1107                           ; Regs used in _reqWriteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1108                           ;reqWriteRTC@address stored from wreg
  1109     06D4  00F4               	movwf	reqWriteRTC@address
  1110     06D5                     l763:
  1111                           
  1112                           ;RTC.c: 38:     I2C_Start();
  1113     06D5  26FB               	fcall	_I2C_Start
  1114     06D6                     l765:
  1115                           
  1116                           ;RTC.c: 39:     I2C_WriteByte(0b11010000);
  1117     06D6  30D0               	movlw	208
  1118     06D7  27BF               	fcall	_I2C_WriteByte
  1119     06D8                     l767:
  1120                           
  1121                           ;RTC.c: 40:     I2C_WriteByte(address);
  1122     06D8  0874               	movf	reqWriteRTC@address,w
  1123     06D9  27BF               	fcall	_I2C_WriteByte
  1124     06DA                     l91:
  1125     06DA  0008               	return
  1126     06DB                     __end_of_reqWriteRTC:
  1127                           
  1128                           	psect	text9
  1129     06C1                     __ptext9:	
  1130 ;; *************** function _endWriteRTC *****************
  1131 ;; Defined at:
  1132 ;;		line 49 in file "RTC.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		status,2, status,0, pclath, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1146 ;;      Params:         0       0       0       0
  1147 ;;      Locals:         0       0       0       0
  1148 ;;      Temps:          0       0       0       0
  1149 ;;      Totals:         0       0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; Hardware stack levels required when called: 1
  1153 ;; This function calls:
  1154 ;;		_I2C_Stop
  1155 ;; This function is called by:
  1156 ;;		_writeByteRTC
  1157 ;;		_startRTC
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161     06C1                     _endWriteRTC:	
  1162                           ;psect for function _endWriteRTC
  1163                           
  1164     06C1                     l771:	
  1165                           ;incstack = 0
  1166                           ; Regs used in _endWriteRTC: [status,2+status,0+pclath+cstack]
  1167                           
  1168                           
  1169                           ;RTC.c: 50:     I2C_Stop();
  1170     06C1  2727               	fcall	_I2C_Stop
  1171     06C2                     l97:
  1172     06C2  0008               	return
  1173     06C3                     __end_of_endWriteRTC:
  1174                           
  1175                           	psect	text10
  1176     06E9                     __ptext10:	
  1177 ;; *************** function _readByteRTC *****************
  1178 ;; Defined at:
  1179 ;;		line 28 in file "RTC.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  address         1    wreg     unsigned char 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  address         1    5[COMMON] unsigned char 
  1184 ;;  data            1    6[COMMON] unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      unsigned char 
  1187 ;; Registers used:
  1188 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1194 ;;      Params:         0       0       0       0
  1195 ;;      Locals:         2       0       0       0
  1196 ;;      Temps:          0       0       0       0
  1197 ;;      Totals:         2       0       0       0
  1198 ;;Total ram usage:        2 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 2
  1201 ;; This function calls:
  1202 ;;		_I2C_ReadByte
  1203 ;;		_endReadRTC
  1204 ;;		_reqReadRTC
  1205 ;; This function is called by:
  1206 ;;		_checkRTCType
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210     06E9                     _readByteRTC:	
  1211                           ;psect for function _readByteRTC
  1212                           
  1213                           
  1214                           ;incstack = 0
  1215                           ; Regs used in _readByteRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1216                           ;readByteRTC@address stored from wreg
  1217     06E9  00F5               	movwf	readByteRTC@address
  1218     06EA                     l781:
  1219                           
  1220                           ;RTC.c: 29:     unsigned char data;;RTC.c: 30:     reqReadRTC(address);
  1221     06EA  0875               	movf	readByteRTC@address,w
  1222     06EB  26F1               	fcall	_reqReadRTC
  1223                           
  1224                           ;RTC.c: 31:     data = I2C_ReadByte();
  1225     06EC  279B               	fcall	_I2C_ReadByte
  1226     06ED  00F6               	movwf	readByteRTC@data
  1227     06EE                     l783:
  1228                           
  1229                           ;RTC.c: 32:     endReadRTC();
  1230     06EE  26C3               	fcall	_endReadRTC
  1231     06EF                     l785:
  1232                           
  1233                           ;RTC.c: 33:     return data;
  1234     06EF  0876               	movf	readByteRTC@data,w
  1235     06F0                     l88:
  1236     06F0  0008               	return
  1237     06F1                     __end_of_readByteRTC:
  1238                           
  1239                           	psect	text11
  1240     06F1                     __ptext11:	
  1241 ;; *************** function _reqReadRTC *****************
  1242 ;; Defined at:
  1243 ;;		line 4 in file "RTC.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  address         1    wreg     unsigned char 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  address         1    4[COMMON] unsigned char 
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      void 
  1250 ;; Registers used:
  1251 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1257 ;;      Params:         0       0       0       0
  1258 ;;      Locals:         1       0       0       0
  1259 ;;      Temps:          0       0       0       0
  1260 ;;      Totals:         1       0       0       0
  1261 ;;Total ram usage:        1 bytes
  1262 ;; Hardware stack levels used: 1
  1263 ;; Hardware stack levels required when called: 1
  1264 ;; This function calls:
  1265 ;;		_I2C_ReStart
  1266 ;;		_I2C_Start
  1267 ;;		_I2C_WriteByte
  1268 ;; This function is called by:
  1269 ;;		_readByteRTC
  1270 ;;		_isRTCRunning
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274     06F1                     _reqReadRTC:	
  1275                           ;psect for function _reqReadRTC
  1276                           
  1277                           
  1278                           ;incstack = 0
  1279                           ; Regs used in _reqReadRTC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1280                           ;reqReadRTC@address stored from wreg
  1281     06F1  00F4               	movwf	reqReadRTC@address
  1282     06F2                     l753:
  1283                           
  1284                           ;RTC.c: 5:     I2C_Start();
  1285     06F2  26FB               	fcall	_I2C_Start
  1286     06F3                     l755:
  1287                           
  1288                           ;RTC.c: 6:     I2C_WriteByte(0b11010000);
  1289     06F3  30D0               	movlw	208
  1290     06F4  27BF               	fcall	_I2C_WriteByte
  1291     06F5                     l757:
  1292                           
  1293                           ;RTC.c: 7:     I2C_WriteByte(address);
  1294     06F5  0874               	movf	reqReadRTC@address,w
  1295     06F6  27BF               	fcall	_I2C_WriteByte
  1296                           
  1297                           ;RTC.c: 8:     I2C_ReStart();
  1298     06F7  2738               	fcall	_I2C_ReStart
  1299     06F8                     l759:
  1300                           
  1301                           ;RTC.c: 9:     I2C_WriteByte(0b11010001);
  1302     06F8  30D1               	movlw	209
  1303     06F9  27BF               	fcall	_I2C_WriteByte
  1304     06FA                     l79:
  1305     06FA  0008               	return
  1306     06FB                     __end_of_reqReadRTC:
  1307                           
  1308                           	psect	text12
  1309     07BF                     __ptext12:	
  1310 ;; *************** function _I2C_WriteByte *****************
  1311 ;; Defined at:
  1312 ;;		line 43 in file "IIC.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  Data            1    wreg     unsigned char 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  Data            1    2[COMMON] unsigned char 
  1317 ;;  i               1    3[COMMON] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;		None               void
  1320 ;; Registers used:
  1321 ;;		wreg, status,2, status,0, btemp+1
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1327 ;;      Params:         0       0       0       0
  1328 ;;      Locals:         2       0       0       0
  1329 ;;      Temps:          2       0       0       0
  1330 ;;      Totals:         4       0       0       0
  1331 ;;Total ram usage:        4 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_reqReadRTC
  1337 ;;		_reqWriteRTC
  1338 ;;		_writeDataRTC
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342     07BF                     _I2C_WriteByte:	
  1343                           ;psect for function _I2C_WriteByte
  1344                           
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _I2C_WriteByte: [wreg+status,2+status,0+btemp+1]
  1348                           ;I2C_WriteByte@Data stored from wreg
  1349     07BF  00F2               	movwf	I2C_WriteByte@Data
  1350     07C0                     l711:
  1351                           
  1352                           ;IIC.c: 44:     unsigned char i;;IIC.c: 45:     for(i = 0; i<8; i++) {
  1353     07C0  01F3               	clrf	I2C_WriteByte@i
  1354     07C1                     l47:
  1355                           
  1356                           ;IIC.c: 46:         TRISAbits.TRISA0 = 0;
  1357     07C1  1683               	bsf	3,5	;RP0=1, select bank1
  1358     07C2  1303               	bcf	3,6	;RP1=0, select bank1
  1359     07C3  1005               	bcf	5,0	;volatile
  1360                           
  1361                           ;IIC.c: 47:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1362     07C4  2FC5               	nop2	;2 cycle nop
  1363     07C5                     l717:
  1364                           
  1365                           ;IIC.c: 48:         TRISAbits.TRISA1 = ((Data<<i)&0x80)?1:0;
  1366     07C5  0A73               	incf	I2C_WriteByte@i,w
  1367     07C6  00FF               	movwf	btemp+1
  1368     07C7  0872               	movf	I2C_WriteByte@Data,w
  1369     07C8  00F0               	movwf	??_I2C_WriteByte
  1370     07C9  01F1               	clrf	??_I2C_WriteByte+1
  1371     07CA  2FCE               	goto	u14
  1372     07CB                     u15:
  1373     07CB  1003               	clrc
  1374     07CC  0DF0               	rlf	??_I2C_WriteByte,f
  1375     07CD  0DF1               	rlf	??_I2C_WriteByte+1,f
  1376     07CE                     u14:
  1377     07CE  0BFF               	decfsz	btemp+1,f
  1378     07CF  2FCB               	goto	u15
  1379     07D0  1BF0               	btfsc	??_I2C_WriteByte,7
  1380     07D1  2FD3               	goto	u21
  1381     07D2  2FD7               	goto	u20
  1382     07D3                     u21:
  1383     07D3  1683               	bsf	3,5	;RP0=1, select bank1
  1384     07D4  1303               	bcf	3,6	;RP1=0, select bank1
  1385     07D5  1485               	bsf	5,1	;volatile
  1386     07D6  2FDA               	goto	u34
  1387     07D7                     u20:
  1388     07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1389     07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1390     07D9  1085               	bcf	5,1	;volatile
  1391     07DA                     u34:
  1392     07DA                     l719:
  1393                           
  1394                           ;IIC.c: 49:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1395     07DA  2FDB               	nop2	;2 cycle nop
  1396     07DB                     l721:
  1397                           
  1398                           ;IIC.c: 50:         TRISAbits.TRISA0 = 1;
  1399     07DB  1683               	bsf	3,5	;RP0=1, select bank1
  1400     07DC  1303               	bcf	3,6	;RP1=0, select bank1
  1401     07DD  1405               	bsf	5,0	;volatile
  1402     07DE                     l723:
  1403                           
  1404                           ;IIC.c: 51:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1405     07DE  2FDF               	nop2	;2 cycle nop
  1406     07DF  2FE0               	nop2	;2 cycle nop
  1407     07E0  0000               	nop
  1408                           
  1409                           ;IIC.c: 52:     }
  1410     07E1  3001               	movlw	1
  1411     07E2  00FF               	movwf	btemp+1
  1412     07E3  087F               	movf	btemp+1,w
  1413     07E4  07F3               	addwf	I2C_WriteByte@i,f
  1414     07E5                     l725:
  1415     07E5  3008               	movlw	8
  1416     07E6  0273               	subwf	I2C_WriteByte@i,w
  1417     07E7  1C03               	skipc
  1418     07E8  2FEA               	goto	u41
  1419     07E9  2FEB               	goto	u40
  1420     07EA                     u41:
  1421     07EA  2FC1               	goto	l47
  1422     07EB                     u40:
  1423     07EB                     l48:
  1424                           
  1425                           ;IIC.c: 55:     TRISAbits.TRISA0 = 0;
  1426     07EB  1683               	bsf	3,5	;RP0=1, select bank1
  1427     07EC  1303               	bcf	3,6	;RP1=0, select bank1
  1428     07ED  1005               	bcf	5,0	;volatile
  1429                           
  1430                           ;IIC.c: 56:     TRISAbits.TRISA1 = 1;
  1431     07EE  1485               	bsf	5,1	;volatile
  1432                           
  1433                           ;IIC.c: 57:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1434     07EF  2FF0               	nop2	;2 cycle nop
  1435     07F0  2FF1               	nop2	;2 cycle nop
  1436     07F1  0000               	nop
  1437                           
  1438                           ;IIC.c: 58:     TRISAbits.TRISA0 = 1;
  1439     07F2  1683               	bsf	3,5	;RP0=1, select bank1
  1440     07F3  1303               	bcf	3,6	;RP1=0, select bank1
  1441     07F4  1405               	bsf	5,0	;volatile
  1442                           
  1443                           ;IIC.c: 59:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1444     07F5  2FF6               	nop2	;2 cycle nop
  1445     07F6  2FF7               	nop2	;2 cycle nop
  1446     07F7  0000               	nop
  1447     07F8                     l727:
  1448                           
  1449                           ;IIC.c: 62:     return PORTAbits.RA1;;	Return value of _I2C_WriteByte is never used
  1450     07F8  1283               	bcf	3,5	;RP0=0, select bank0
  1451     07F9  1303               	bcf	3,6	;RP1=0, select bank0
  1452     07FA  0805               	movf	5,w	;volatile
  1453     07FB                     l49:
  1454     07FB  0008               	return
  1455     07FC                     __end_of_I2C_WriteByte:
  1456                           
  1457                           	psect	text13
  1458     06FB                     __ptext13:	
  1459 ;; *************** function _I2C_Start *****************
  1460 ;; Defined at:
  1461 ;;		line 11 in file "IIC.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;		None
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		None
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1475 ;;      Params:         0       0       0       0
  1476 ;;      Locals:         0       0       0       0
  1477 ;;      Temps:          0       0       0       0
  1478 ;;      Totals:         0       0       0       0
  1479 ;;Total ram usage:        0 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_reqReadRTC
  1485 ;;		_reqWriteRTC
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     06FB                     _I2C_Start:	
  1490                           ;psect for function _I2C_Start
  1491                           
  1492     06FB                     l705:	
  1493                           ;incstack = 0
  1494                           ; Regs used in _I2C_Start: []
  1495                           
  1496                           
  1497                           ;IIC.c: 12:     TRISAbits.TRISA0 = 1;
  1498     06FB  1683               	bsf	3,5	;RP0=1, select bank1
  1499     06FC  1303               	bcf	3,6	;RP1=0, select bank1
  1500     06FD  1405               	bsf	5,0	;volatile
  1501                           
  1502                           ;IIC.c: 13:     TRISAbits.TRISA1 = 1;
  1503     06FE  1485               	bsf	5,1	;volatile
  1504                           
  1505                           ;IIC.c: 14:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1506     06FF  2F00               	nop2	;2 cycle nop
  1507     0700  2F01               	nop2	;2 cycle nop
  1508     0701  0000               	nop
  1509                           
  1510                           ;IIC.c: 15:     TRISAbits.TRISA1 = 0;
  1511     0702  1683               	bsf	3,5	;RP0=1, select bank1
  1512     0703  1303               	bcf	3,6	;RP1=0, select bank1
  1513     0704  1085               	bcf	5,1	;volatile
  1514                           
  1515                           ;IIC.c: 16:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1516     0705  2F06               	nop2	;2 cycle nop
  1517     0706  2F07               	nop2	;2 cycle nop
  1518     0707  0000               	nop
  1519     0708                     l38:
  1520     0708  0008               	return
  1521     0709                     __end_of_I2C_Start:
  1522                           
  1523                           	psect	text14
  1524     0738                     __ptext14:	
  1525 ;; *************** function _I2C_ReStart *****************
  1526 ;; Defined at:
  1527 ;;		line 20 in file "IIC.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		None
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1541 ;;      Params:         0       0       0       0
  1542 ;;      Locals:         0       0       0       0
  1543 ;;      Temps:          0       0       0       0
  1544 ;;      Totals:         0       0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels used: 1
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		_reqReadRTC
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554     0738                     _I2C_ReStart:	
  1555                           ;psect for function _I2C_ReStart
  1556                           
  1557     0738                     l707:	
  1558                           ;incstack = 0
  1559                           ; Regs used in _I2C_ReStart: []
  1560                           
  1561                           
  1562                           ;IIC.c: 21:     TRISAbits.TRISA0 = 0;
  1563     0738  1683               	bsf	3,5	;RP0=1, select bank1
  1564     0739  1303               	bcf	3,6	;RP1=0, select bank1
  1565     073A  1005               	bcf	5,0	;volatile
  1566                           
  1567                           ;IIC.c: 22:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1568     073B  2F3C               	nop2	;2 cycle nop
  1569                           
  1570                           ;IIC.c: 23:     TRISAbits.TRISA1 = 1;
  1571     073C  1683               	bsf	3,5	;RP0=1, select bank1
  1572     073D  1303               	bcf	3,6	;RP1=0, select bank1
  1573     073E  1485               	bsf	5,1	;volatile
  1574                           
  1575                           ;IIC.c: 24:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1576     073F  2F40               	nop2	;2 cycle nop
  1577                           
  1578                           ;IIC.c: 25:     TRISAbits.TRISA0 = 1;
  1579     0740  1683               	bsf	3,5	;RP0=1, select bank1
  1580     0741  1303               	bcf	3,6	;RP1=0, select bank1
  1581     0742  1405               	bsf	5,0	;volatile
  1582                           
  1583                           ;IIC.c: 26:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1584     0743  2F44               	nop2	;2 cycle nop
  1585                           
  1586                           ;IIC.c: 27:     TRISAbits.TRISA1 = 0;
  1587     0744  1683               	bsf	3,5	;RP0=1, select bank1
  1588     0745  1303               	bcf	3,6	;RP1=0, select bank1
  1589     0746  1085               	bcf	5,1	;volatile
  1590                           
  1591                           ;IIC.c: 28:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1592     0747  2F48               	nop2	;2 cycle nop
  1593     0748                     l41:
  1594     0748  0008               	return
  1595     0749                     __end_of_I2C_ReStart:
  1596                           
  1597                           	psect	text15
  1598     06C3                     __ptext15:	
  1599 ;; *************** function _endReadRTC *****************
  1600 ;; Defined at:
  1601 ;;		line 22 in file "RTC.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		status,2, status,0, pclath, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1615 ;;      Params:         0       0       0       0
  1616 ;;      Locals:         0       0       0       0
  1617 ;;      Temps:          0       0       0       0
  1618 ;;      Totals:         0       0       0       0
  1619 ;;Total ram usage:        0 bytes
  1620 ;; Hardware stack levels used: 1
  1621 ;; Hardware stack levels required when called: 1
  1622 ;; This function calls:
  1623 ;;		_I2C_SendNACK
  1624 ;;		_I2C_Stop
  1625 ;; This function is called by:
  1626 ;;		_readByteRTC
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630     06C3                     _endReadRTC:	
  1631                           ;psect for function _endReadRTC
  1632                           
  1633     06C3                     l761:	
  1634                           ;incstack = 0
  1635                           ; Regs used in _endReadRTC: [status,2+status,0+pclath+cstack]
  1636                           
  1637                           
  1638                           ;RTC.c: 23:     I2C_SendNACK();
  1639     06C3  2709               	fcall	_I2C_SendNACK
  1640                           
  1641                           ;RTC.c: 24:     I2C_Stop();
  1642     06C4  2727               	fcall	_I2C_Stop
  1643     06C5                     l85:
  1644     06C5  0008               	return
  1645     06C6                     __end_of_endReadRTC:
  1646                           
  1647                           	psect	text16
  1648     0727                     __ptext16:	
  1649 ;; *************** function _I2C_Stop *****************
  1650 ;; Defined at:
  1651 ;;		line 32 in file "IIC.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		None
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1665 ;;      Params:         0       0       0       0
  1666 ;;      Locals:         0       0       0       0
  1667 ;;      Temps:          0       0       0       0
  1668 ;;      Totals:         0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_endReadRTC
  1675 ;;		_endWriteRTC
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679     0727                     _I2C_Stop:	
  1680                           ;psect for function _I2C_Stop
  1681                           
  1682     0727                     l709:	
  1683                           ;incstack = 0
  1684                           ; Regs used in _I2C_Stop: []
  1685                           
  1686                           
  1687                           ;IIC.c: 33:     TRISAbits.TRISA0 = 0;
  1688     0727  1683               	bsf	3,5	;RP0=1, select bank1
  1689     0728  1303               	bcf	3,6	;RP1=0, select bank1
  1690     0729  1005               	bcf	5,0	;volatile
  1691                           
  1692                           ;IIC.c: 34:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1693     072A  2F2B               	nop2	;2 cycle nop
  1694                           
  1695                           ;IIC.c: 35:     TRISAbits.TRISA1 = 0;
  1696     072B  1683               	bsf	3,5	;RP0=1, select bank1
  1697     072C  1303               	bcf	3,6	;RP1=0, select bank1
  1698     072D  1085               	bcf	5,1	;volatile
  1699                           
  1700                           ;IIC.c: 36:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1701     072E  2F2F               	nop2	;2 cycle nop
  1702                           
  1703                           ;IIC.c: 37:     TRISAbits.TRISA0 = 1;
  1704     072F  1683               	bsf	3,5	;RP0=1, select bank1
  1705     0730  1303               	bcf	3,6	;RP1=0, select bank1
  1706     0731  1405               	bsf	5,0	;volatile
  1707                           
  1708                           ;IIC.c: 38:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1709     0732  2F33               	nop2	;2 cycle nop
  1710                           
  1711                           ;IIC.c: 39:     TRISAbits.TRISA1 = 1;
  1712     0733  1683               	bsf	3,5	;RP0=1, select bank1
  1713     0734  1303               	bcf	3,6	;RP1=0, select bank1
  1714     0735  1485               	bsf	5,1	;volatile
  1715                           
  1716                           ;IIC.c: 40:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1717     0736  2F37               	nop2	;2 cycle nop
  1718     0737                     l44:
  1719     0737  0008               	return
  1720     0738                     __end_of_I2C_Stop:
  1721                           
  1722                           	psect	text17
  1723     0709                     __ptext17:	
  1724 ;; *************** function _I2C_SendNACK *****************
  1725 ;; Defined at:
  1726 ;;		line 93 in file "IIC.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		None
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1740 ;;      Params:         0       0       0       0
  1741 ;;      Locals:         0       0       0       0
  1742 ;;      Temps:          0       0       0       0
  1743 ;;      Totals:         0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_endReadRTC
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753     0709                     _I2C_SendNACK:	
  1754                           ;psect for function _I2C_SendNACK
  1755                           
  1756     0709                     l731:	
  1757                           ;incstack = 0
  1758                           ; Regs used in _I2C_SendNACK: []
  1759                           
  1760                           
  1761                           ;IIC.c: 94:     TRISAbits.TRISA0 = 0;
  1762     0709  1683               	bsf	3,5	;RP0=1, select bank1
  1763     070A  1303               	bcf	3,6	;RP1=0, select bank1
  1764     070B  1005               	bcf	5,0	;volatile
  1765                           
  1766                           ;IIC.c: 95:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1767     070C  2F0D               	nop2	;2 cycle nop
  1768                           
  1769                           ;IIC.c: 96:     TRISAbits.TRISA1 = 1;
  1770     070D  1683               	bsf	3,5	;RP0=1, select bank1
  1771     070E  1303               	bcf	3,6	;RP1=0, select bank1
  1772     070F  1485               	bsf	5,1	;volatile
  1773                           
  1774                           ;IIC.c: 97:     _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1775     0710  2F11               	nop2	;2 cycle nop
  1776                           
  1777                           ;IIC.c: 98:     TRISAbits.TRISA0 = 1;
  1778     0711  1683               	bsf	3,5	;RP0=1, select bank1
  1779     0712  1303               	bcf	3,6	;RP1=0, select bank1
  1780     0713  1405               	bsf	5,0	;volatile
  1781                           
  1782                           ;IIC.c: 99:     _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1783     0714  2F15               	nop2	;2 cycle nop
  1784     0715  2F16               	nop2	;2 cycle nop
  1785     0716  0000               	nop
  1786     0717                     l60:
  1787     0717  0008               	return
  1788     0718                     __end_of_I2C_SendNACK:
  1789                           
  1790                           	psect	text18
  1791     079B                     __ptext18:	
  1792 ;; *************** function _I2C_ReadByte *****************
  1793 ;; Defined at:
  1794 ;;		line 66 in file "IIC.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;		None
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  Data            1    2[COMMON] unsigned char 
  1799 ;;  i               1    1[COMMON] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      unsigned char 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0, btemp+1
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1809 ;;      Params:         0       0       0       0
  1810 ;;      Locals:         2       0       0       0
  1811 ;;      Temps:          1       0       0       0
  1812 ;;      Totals:         3       0       0       0
  1813 ;;Total ram usage:        3 bytes
  1814 ;; Hardware stack levels used: 1
  1815 ;; This function calls:
  1816 ;;		Nothing
  1817 ;; This function is called by:
  1818 ;;		_readDataRTC
  1819 ;;		_readByteRTC
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823     079B                     _I2C_ReadByte:	
  1824                           ;psect for function _I2C_ReadByte
  1825                           
  1826     079B                     l733:	
  1827                           ;incstack = 0
  1828                           ; Regs used in _I2C_ReadByte: [wreg+status,2+status,0+btemp+1]
  1829                           
  1830                           
  1831                           ;IIC.c: 67:     unsigned char i, Data = 0;
  1832     079B  01F2               	clrf	I2C_ReadByte@Data
  1833                           
  1834                           ;IIC.c: 68:     for(i=0; i<8; i++) {
  1835     079C  01F1               	clrf	I2C_ReadByte@i
  1836     079D                     l52:
  1837                           
  1838                           ;IIC.c: 69:         TRISAbits.TRISA0 = 0;
  1839     079D  1683               	bsf	3,5	;RP0=1, select bank1
  1840     079E  1303               	bcf	3,6	;RP1=0, select bank1
  1841     079F  1005               	bcf	5,0	;volatile
  1842                           
  1843                           ;IIC.c: 70:         TRISAbits.TRISA1 = 1;
  1844     07A0  1485               	bsf	5,1	;volatile
  1845                           
  1846                           ;IIC.c: 71:         _delay((unsigned long)((500/100)*(4000000/4000000.0)));
  1847     07A1  2FA2               	nop2	;2 cycle nop
  1848     07A2  2FA3               	nop2	;2 cycle nop
  1849     07A3  0000               	nop
  1850                           
  1851                           ;IIC.c: 72:         TRISAbits.TRISA0 = 1;
  1852     07A4  1683               	bsf	3,5	;RP0=1, select bank1
  1853     07A5  1303               	bcf	3,6	;RP1=0, select bank1
  1854     07A6  1405               	bsf	5,0	;volatile
  1855                           
  1856                           ;IIC.c: 73:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1857     07A7  2FA8               	nop2	;2 cycle nop
  1858     07A8                     l739:
  1859                           
  1860                           ;IIC.c: 74:         Data = Data << 1;
  1861     07A8  0872               	movf	I2C_ReadByte@Data,w
  1862     07A9  00F0               	movwf	??_I2C_ReadByte
  1863     07AA  0770               	addwf	??_I2C_ReadByte,w
  1864     07AB  00F2               	movwf	I2C_ReadByte@Data
  1865                           
  1866                           ;IIC.c: 75:         Data = Data|PORTAbits.RA1;
  1867     07AC  1283               	bcf	3,5	;RP0=0, select bank0
  1868     07AD  1303               	bcf	3,6	;RP1=0, select bank0
  1869     07AE  0C05               	rrf	5,w	;volatile
  1870     07AF  3901               	andlw	1
  1871     07B0  0472               	iorwf	I2C_ReadByte@Data,w
  1872     07B1  00F2               	movwf	I2C_ReadByte@Data
  1873     07B2                     l741:
  1874                           
  1875                           ;IIC.c: 77:         _delay((unsigned long)((500/100/2)*(4000000/4000000.0)));
  1876     07B2  2FB3               	nop2	;2 cycle nop
  1877     07B3                     l743:
  1878                           
  1879                           ;IIC.c: 78:     }
  1880     07B3  3001               	movlw	1
  1881     07B4  00FF               	movwf	btemp+1
  1882     07B5  087F               	movf	btemp+1,w
  1883     07B6  07F1               	addwf	I2C_ReadByte@i,f
  1884     07B7                     l745:
  1885     07B7  3008               	movlw	8
  1886     07B8  0271               	subwf	I2C_ReadByte@i,w
  1887     07B9  1C03               	skipc
  1888     07BA  2FBC               	goto	u51
  1889     07BB  2FBD               	goto	u50
  1890     07BC                     u51:
  1891     07BC  2F9D               	goto	l52
  1892     07BD                     u50:
  1893     07BD                     l747:
  1894                           
  1895                           ;IIC.c: 79:     return Data;
  1896     07BD  0872               	movf	I2C_ReadByte@Data,w
  1897     07BE                     l54:
  1898     07BE  0008               	return
  1899     07BF                     __end_of_I2C_ReadByte:
  1900                           
  1901                           	psect	text19
  1902     06CA                     __ptext19:	
  1903 ;; *************** function _InitI2C *****************
  1904 ;; Defined at:
  1905 ;;		line 4 in file "IIC.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		None
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1919 ;;      Params:         0       0       0       0
  1920 ;;      Locals:         0       0       0       0
  1921 ;;      Temps:          0       0       0       0
  1922 ;;      Totals:         0       0       0       0
  1923 ;;Total ram usage:        0 bytes
  1924 ;; Hardware stack levels used: 1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932     06CA                     _InitI2C:	
  1933                           ;psect for function _InitI2C
  1934                           
  1935     06CA                     l793:	
  1936                           ;incstack = 0
  1937                           ; Regs used in _InitI2C: []
  1938                           
  1939                           
  1940                           ;IIC.c: 6:     PORTAbits.RA1 = 0;
  1941     06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1942     06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1943     06CC  1085               	bcf	5,1	;volatile
  1944                           
  1945                           ;IIC.c: 7:     PORTAbits.RA0 = 0;
  1946     06CD  1005               	bcf	5,0	;volatile
  1947     06CE                     l35:
  1948     06CE  0008               	return
  1949     06CF                     __end_of_InitI2C:
  1950     007E                     btemp	set	126	;btemp
  1951     007E                     wtemp0	set	126
  1952                           
  1953                           	psect	config
  1954                           
  1955                           ;Config register CONFIG @ 0x2007
  1956                           ;	Oscillator Selection bits
  1957                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1958                           ;	Watchdog Timer Enable bit
  1959                           ;	WDTE = OFF, WDT disabled
  1960                           ;	Power-up Timer Enable bit
  1961                           ;	PWRTE = OFF, PWRT disabled
  1962                           ;	RA5/MCLR/VPP Pin Function Select bit
  1963                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1964                           ;	Brown-out Detect Enable bit
  1965                           ;	BOREN = OFF, BOD disabled
  1966                           ;	Low-Voltage Programming Enable bit
  1967                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1968                           ;	Data EE Memory Code Protection bit
  1969                           ;	CPD = OFF, Data memory code protection off
  1970                           ;	Flash Program Memory Code Protection bit
  1971                           ;	CP = OFF, Code protection off
  1972     2007                     	org	8199
  1973     2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            70      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkRTCType
    _startRTC->_reqWriteRTC
    _startRTC->_writeDataRTC
    _isRTCRunning->_reqReadRTC
    _readDataRTC->_I2C_ReadByte
    _checkRTCType->_readByteRTC
    _checkRTCType->_writeByteRTC
    _writeByteRTC->_reqWriteRTC
    _writeByteRTC->_writeDataRTC
    _writeDataRTC->_I2C_WriteByte
    _reqWriteRTC->_I2C_WriteByte
    _readByteRTC->_reqReadRTC
    _reqReadRTC->_I2C_WriteByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1024
                            _InitI2C
                       _checkRTCType
                       _isRTCRunning
                           _startRTC
 ---------------------------------------------------------------------------------
 (1) _startRTC                                             0     0      0     150
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (1) _isRTCRunning                                         1     1      0     180
                                              5 COMMON     1     1      0
                        _readDataRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _readDataRTC                                          1     1      0      90
                                              3 COMMON     1     1      0
                       _I2C_ReadByte
                        _I2C_SendACK
 ---------------------------------------------------------------------------------
 (3) _I2C_SendACK                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkRTCType                                         1     1      0     694
                                              7 COMMON     1     1      0
                        _readByteRTC
                       _writeByteRTC
 ---------------------------------------------------------------------------------
 (2) _writeByteRTC                                         2     1      1     422
                                              5 COMMON     2     1      1
                        _endWriteRTC
                        _reqWriteRTC
                       _writeDataRTC
 ---------------------------------------------------------------------------------
 (2) _writeDataRTC                                         1     1      0      75
                                              4 COMMON     1     1      0
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _reqWriteRTC                                          1     1      0      75
                                              4 COMMON     1     1      0
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (2) _endWriteRTC                                          0     0      0       0
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _readByteRTC                                          2     2      0     180
                                              5 COMMON     2     2      0
                       _I2C_ReadByte
                         _endReadRTC
                         _reqReadRTC
 ---------------------------------------------------------------------------------
 (2) _reqReadRTC                                           1     1      0      75
                                              4 COMMON     1     1      0
                        _I2C_ReStart
                          _I2C_Start
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteByte                                        4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _endReadRTC                                           0     0      0       0
                       _I2C_SendNACK
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_SendNACK                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadByte                                         3     3      0      75
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitI2C
   _checkRTCType
     _readByteRTC
       _I2C_ReadByte
       _endReadRTC
         _I2C_SendNACK
         _I2C_Stop
       _reqReadRTC
         _I2C_ReStart
         _I2C_Start
         _I2C_WriteByte
     _writeByteRTC
       _endWriteRTC
         _I2C_Stop
       _reqWriteRTC
         _I2C_Start
         _I2C_WriteByte
       _writeDataRTC
         _I2C_WriteByte
   _isRTCRunning
     _readDataRTC
       _I2C_ReadByte
       _I2C_SendACK
     _reqReadRTC
   _startRTC
     _endWriteRTC
     _reqWriteRTC
     _writeDataRTC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               46      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       A       4        0.0%
BITBANK0            46      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       A      10        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Oct 26 07:49:13 2023

                     l41 0748                       l26 0779                       l35 06CE  
                     l52 079D                       l60 0717                       l44 0737  
                     l54 07BE                       l38 0708                       l47 07C1  
                     l48 07EB                       l49 07FB                       l57 0726  
                     l82 06D3                       l91 06DA                       _T0 0022  
                     l85 06C5                       _T1 0023                       l94 06C9  
                     _T2 0024                       l79 06FA                       _T3 0025  
                     l88 06F0                       _T4 0026                       l97 06C2  
                     _T5 0027                       _T6 0028                       _T7 0029  
                     u20 07D7                       u21 07D3                       u14 07CE  
                     u15 07CB                       u40 07EB                       u41 07EA  
                     u50 07BD                       u34 07DA                       u51 07BC  
                    l100 06E1                      l111 079A                      l103 06E8  
                    l106 075F                      l711 07C0                      l705 06FB  
                    l721 07DB                      l801 0749                      l731 0709  
                    l707 0738                      l723 07DE                      l803 0757  
                    l741 07B2                      l733 079B                      l709 0727  
                    l725 07E5                      l717 07C5                      l805 0758  
                    l743 07B3                      l727 07F8                      l719 07DA  
                    l903 06DC                      l911 0781                      l751 0718  
                    l807 075A                      l745 07B7                      l761 06C3  
                    l753 06F2                      l905 06E0                      l921 078D  
                    l913 0782                      l809 075C                      l747 07BD  
                    l739 07A8                      l755 06F3                      l771 06C1  
                    l763 06D5                      l923 0790                      l915 0785  
                    l931 0799                      l907 077A                      l757 06F5  
                    l781 06EA                      l765 06D6                      l925 0794  
                    l917 0786                      l909 077D                      l773 06CF  
                    l941 076B                      l759 06F8                      l783 06EE  
                    l767 06D8                      l927 0797                      l919 078A  
                    l775 06D1                      l943 076C                      l935 0760  
                    l793 06CA                      l785 06EF                      l769 06C7  
                    l777 06D2                      l945 0771                      l937 0768  
                    l795 06E2                      l947 0773                      l939 0769  
                    l797 06E6                      u110 0781                      u111 0780  
                    u120 0794                      u121 0793                      u130 0771  
                    u131 0770                      u140 0778                      u141 0777  
        readByteRTC@data 0076                     _main 0760                     btemp 007E  
       __end_of_I2C_Stop 0738                     start 0000             ?_readDataRTC 0070  
        __end_of_InitI2C 06CF             ?_readByteRTC 0070                    ?_main 0070  
                  _CMCON 001F                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086     __end_of_isRTCRunning 06E9             _I2C_ReadByte 079B  
           _I2C_SendNACK 0709        __end_of_I2C_Start 0709                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 077A  
                 ??_main 0078             ?_reqWriteRTC 0070             _writeDataRTC 06C6  
           _writeByteRTC 06DB         checkRTCType@data 0077                ??_InitI2C 0070  
      reqReadRTC@address 0074                   _leftDP 0020             _checkRTCType 077A  
              ?_I2C_Stop 0070         __end_of_startRTC 0760  __end_of__initialization 07FE  
         __pcstackCOMMON 0070            _I2C_WriteByte 07BF               ??_I2C_Stop 0070  
             _endReadRTC 06C3             _isRTCRunning 06E2               __pmaintext 0760  
         ?_I2C_WriteByte 0070         writeDataRTC@data 0074            ??_I2C_ReStart 0070  
          ??_I2C_SendACK 0070       readByteRTC@address 0075                  _InitI2C 06CA  
              _I2C_Start 06FB         I2C_ReadByte@Data 0072                ?_startRTC 0070  
                __ptext0 0000                  __ptext1 0749                  __ptext2 06E2  
                __ptext3 06CF                  __ptext4 0718                  __ptext5 077A  
                __ptext6 06DB                  __ptext7 06C6                  __ptext8 06D4  
                __ptext9 06C1               _reqReadRTC 06F1                  _rightDP 0021  
    __end_of_I2C_ReStart 0749      __end_of_I2C_SendACK 0727     end_of_initialization 07FE  
             ?_I2C_Start 0070          ??_I2C_WriteByte 0070              ?_endReadRTC 0070  
             ??_startRTC 0075                _PORTAbits 0005            ??_endWriteRTC 0070  
              _TRISAbits 0085       reqWriteRTC@address 0074      writeByteRTC@address 0076  
            _I2C_ReStart 0738              _I2C_SendACK 0718              ?_reqReadRTC 0070  
    start_initialization 07FC      __end_of_endWriteRTC 06C3              ??_I2C_Start 0070  
          ??_readDataRTC 0073            ??_readByteRTC 0075           I2C_WriteByte@i 0073  
            __pbssCOMMON 0078                ___latbits 0000            ?_I2C_ReadByte 0070  
          ?_I2C_SendNACK 0070                 ?_InitI2C 0070            I2C_ReadByte@i 0071  
    __end_of_readDataRTC 06D4         writeByteRTC@data 0075          readDataRTC@data 0073  
          ??_reqWriteRTC 0074            ?_writeDataRTC 0070      __end_of_readByteRTC 06F1  
            _endWriteRTC 06C1                 _I2C_Stop 0727           ??_I2C_ReadByte 0070  
         ??_I2C_SendNACK 0070            ?_writeByteRTC 0075             ??_endReadRTC 0070  
          ?_checkRTCType 0070           ??_writeDataRTC 0074         isRTCRunning@data 0075  
         ??_writeByteRTC 0076       __end_of_endReadRTC 06C6      __end_of_reqWriteRTC 06DB  
  __end_of_I2C_WriteByte 07FC              _readDataRTC 06CF              _readByteRTC 06E9  
         ??_checkRTCType 0077             ?_I2C_ReStart 0070             ?_I2C_SendACK 0070  
           ??_reqReadRTC 0074                 __ptext10 06E9                 __ptext11 06F1  
               __ptext12 07BF                 __ptext13 06FB                 __ptext14 0738  
               __ptext15 06C3                 __ptext16 0727                 __ptext17 0709  
               __ptext18 079B                 __ptext19 06CA             _PORTA_SHADOW 0079  
           _PORTB_SHADOW 0078            ?_isRTCRunning 0070     __end_of_I2C_ReadByte 07BF  
     __end_of_reqReadRTC 06FB     __end_of_I2C_SendNACK 0718                 _startRTC 0749  
            _reqWriteRTC 06D4           ??_isRTCRunning 0075     __end_of_writeDataRTC 06CA  
   __end_of_writeByteRTC 06E2               _OPTION_REG 0081             ?_endWriteRTC 0070  
   __end_of_checkRTCType 079B        I2C_WriteByte@Data 0072  
